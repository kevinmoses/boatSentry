
/home/kmoses/boatSentry/target/boatSentry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c8  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080833e0  080833e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080833e8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  20000400  080833ec  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006fc  20000484  20000484  00030484  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08083470  08083470  00023470  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08083498  08083498  00023498  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a7690  00000000  00000000  0002349c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010183  00000000  00000000  000cab2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001fe8  00000000  00000000  000dacaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002616d  00000000  00000000  000dcc97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00024889  00000000  00000000  00102e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a6aa7  00000000  00000000  0012768d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00014e85  00000000  00000000  001ce134  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000033f0  00000000  00000000  001e2fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bc68  00000000  00000000  001e63ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	58 30 08 08                                         X0..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f002 ff9b 	bl	8082f68 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f002 ffa0 	bl	8082f7e <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	080833ec 	.word	0x080833ec
 808004c:	20000484 	.word	0x20000484
 8080050:	20000484 	.word	0x20000484
 8080054:	20000b80 	.word	0x20000b80
 8080058:	20000b80 	.word	0x20000b80

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 fa53 	bl	8081508 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	080833a8 	.word	0x080833a8
 8080084:	080833e0 	.word	0x080833e0

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b90a 	b.w	80802a0 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fa01 	bl	8080494 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f001 b9f9 	b.w	808148c <_post_loop>

0808009a <_Znwj>:
 808009a:	f000 bc33 	b.w	8080904 <malloc>

0808009e <_ZdlPv>:
 808009e:	f000 bc39 	b.w	8080914 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <_Z11readSensorsv>:
        }return lastPublish;
    }



void readSensors(){
 80800b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
waterRaw = analogRead(A1);
 80800b8:	200b      	movs	r0, #11
 80800ba:	f001 fcbf 	bl	8081a3c <analogRead>
 80800be:	f002 fb77 	bl	80827b0 <__aeabi_i2f>
 80800c2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8080168 <_Z11readSensorsv+0xb4>
batt1Raw = analogRead(A2);
 80800c6:	4f1e      	ldr	r7, [pc, #120]	; (8080140 <_Z11readSensorsv+0x8c>)
    }



void readSensors(){
waterRaw = analogRead(A1);
 80800c8:	f8c8 0000 	str.w	r0, [r8]
batt1Raw = analogRead(A2);
 80800cc:	200c      	movs	r0, #12
 80800ce:	f001 fcb5 	bl	8081a3c <analogRead>
 80800d2:	f002 fb6d 	bl	80827b0 <__aeabi_i2f>
 80800d6:	6038      	str	r0, [r7, #0]
batt2Raw = analogRead(A3);
 80800d8:	200d      	movs	r0, #13
 80800da:	f001 fcaf 	bl	8081a3c <analogRead>
 80800de:	f002 fb67 	bl	80827b0 <__aeabi_i2f>
 80800e2:	4e18      	ldr	r6, [pc, #96]	; (8080144 <_Z11readSensorsv+0x90>)
bilgePumpRaw = analogRead(A4);
 80800e4:	4d18      	ldr	r5, [pc, #96]	; (8080148 <_Z11readSensorsv+0x94>)


void readSensors(){
waterRaw = analogRead(A1);
batt1Raw = analogRead(A2);
batt2Raw = analogRead(A3);
 80800e6:	6030      	str	r0, [r6, #0]
bilgePumpRaw = analogRead(A4);
 80800e8:	200e      	movs	r0, #14
 80800ea:	f001 fca7 	bl	8081a3c <analogRead>
 80800ee:	f002 fb5f 	bl	80827b0 <__aeabi_i2f>
 80800f2:	6028      	str	r0, [r5, #0]
voltMeterRaw = analogRead(A5);
 80800f4:	200f      	movs	r0, #15
 80800f6:	f001 fca1 	bl	8081a3c <analogRead>
 80800fa:	f002 fb59 	bl	80827b0 <__aeabi_i2f>
 80800fe:	4b13      	ldr	r3, [pc, #76]	; (808014c <_Z11readSensorsv+0x98>)
water = waterRaw;
 8080100:	f8d8 2000 	ldr.w	r2, [r8]
void readSensors(){
waterRaw = analogRead(A1);
batt1Raw = analogRead(A2);
batt2Raw = analogRead(A3);
bilgePumpRaw = analogRead(A4);
voltMeterRaw = analogRead(A5);
 8080104:	6018      	str	r0, [r3, #0]
water = waterRaw;
 8080106:	4b12      	ldr	r3, [pc, #72]	; (8080150 <_Z11readSensorsv+0x9c>)
void readSensors(){
waterRaw = analogRead(A1);
batt1Raw = analogRead(A2);
batt2Raw = analogRead(A3);
bilgePumpRaw = analogRead(A4);
voltMeterRaw = analogRead(A5);
 8080108:	4604      	mov	r4, r0
water = waterRaw;
 808010a:	601a      	str	r2, [r3, #0]
batt1 = batt1Raw/261;
 808010c:	4911      	ldr	r1, [pc, #68]	; (8080154 <_Z11readSensorsv+0xa0>)
 808010e:	6838      	ldr	r0, [r7, #0]
 8080110:	f002 fc56 	bl	80829c0 <__aeabi_fdiv>
 8080114:	4b10      	ldr	r3, [pc, #64]	; (8080158 <_Z11readSensorsv+0xa4>)
batt2 = batt2Raw/261;
 8080116:	490f      	ldr	r1, [pc, #60]	; (8080154 <_Z11readSensorsv+0xa0>)
batt1Raw = analogRead(A2);
batt2Raw = analogRead(A3);
bilgePumpRaw = analogRead(A4);
voltMeterRaw = analogRead(A5);
water = waterRaw;
batt1 = batt1Raw/261;
 8080118:	6018      	str	r0, [r3, #0]
batt2 = batt2Raw/261;
 808011a:	6830      	ldr	r0, [r6, #0]
 808011c:	f002 fc50 	bl	80829c0 <__aeabi_fdiv>
 8080120:	4b0e      	ldr	r3, [pc, #56]	; (808015c <_Z11readSensorsv+0xa8>)
bilgePump = bilgePumpRaw/261;
 8080122:	490c      	ldr	r1, [pc, #48]	; (8080154 <_Z11readSensorsv+0xa0>)
batt2Raw = analogRead(A3);
bilgePumpRaw = analogRead(A4);
voltMeterRaw = analogRead(A5);
water = waterRaw;
batt1 = batt1Raw/261;
batt2 = batt2Raw/261;
 8080124:	6018      	str	r0, [r3, #0]
bilgePump = bilgePumpRaw/261;
 8080126:	6828      	ldr	r0, [r5, #0]
 8080128:	f002 fc4a 	bl	80829c0 <__aeabi_fdiv>
 808012c:	4b0c      	ldr	r3, [pc, #48]	; (8080160 <_Z11readSensorsv+0xac>)
voltMeter = voltMeterRaw/261;
 808012e:	4909      	ldr	r1, [pc, #36]	; (8080154 <_Z11readSensorsv+0xa0>)
bilgePumpRaw = analogRead(A4);
voltMeterRaw = analogRead(A5);
water = waterRaw;
batt1 = batt1Raw/261;
batt2 = batt2Raw/261;
bilgePump = bilgePumpRaw/261;
 8080130:	6018      	str	r0, [r3, #0]
voltMeter = voltMeterRaw/261;
 8080132:	4620      	mov	r0, r4
 8080134:	f002 fc44 	bl	80829c0 <__aeabi_fdiv>
 8080138:	4b0a      	ldr	r3, [pc, #40]	; (8080164 <_Z11readSensorsv+0xb0>)
 808013a:	6018      	str	r0, [r3, #0]
 808013c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080140:	200004c0 	.word	0x200004c0
 8080144:	200004b8 	.word	0x200004b8
 8080148:	2000048c 	.word	0x2000048c
 808014c:	200004a4 	.word	0x200004a4
 8080150:	200004b4 	.word	0x200004b4
 8080154:	43828000 	.word	0x43828000
 8080158:	20000498 	.word	0x20000498
 808015c:	2000049c 	.word	0x2000049c
 8080160:	200004c4 	.word	0x200004c4
 8080164:	200004ac 	.word	0x200004ac
 8080168:	200004bc 	.word	0x200004bc

0808016c <_Z15prepAndSendData6String>:
}

void prepAndSendData(String message){
 808016c:	b510      	push	{r4, lr}
 808016e:	4604      	mov	r4, r0
 8080170:	b0a8      	sub	sp, #160	; 0xa0
  char resultstr[128];
    strcpy (resultstr,"{\"Battery 1\":");
 8080172:	493f      	ldr	r1, [pc, #252]	; (8080270 <_Z15prepAndSendData6String+0x104>)
 8080174:	a808      	add	r0, sp, #32
 8080176:	f002 ff42 	bl	8082ffe <strcpy>
    strcat (resultstr,String(batt1, 2));
 808017a:	4b3e      	ldr	r3, [pc, #248]	; (8080274 <_Z15prepAndSendData6String+0x108>)
 808017c:	2202      	movs	r2, #2
 808017e:	6819      	ldr	r1, [r3, #0]
 8080180:	a804      	add	r0, sp, #16
 8080182:	f001 fb54 	bl	808182e <_ZN6StringC1Efi>
 8080186:	9904      	ldr	r1, [sp, #16]
 8080188:	a808      	add	r0, sp, #32
 808018a:	f002 ff29 	bl	8082fe0 <strcat>
 808018e:	a804      	add	r0, sp, #16
 8080190:	f001 fac8 	bl	8081724 <_ZN6StringD1Ev>
    strcat (resultstr,", \"Battery 2\":");
 8080194:	4938      	ldr	r1, [pc, #224]	; (8080278 <_Z15prepAndSendData6String+0x10c>)
 8080196:	a808      	add	r0, sp, #32
 8080198:	f002 ff22 	bl	8082fe0 <strcat>
    strcat (resultstr,String(batt2, 2));
 808019c:	4b37      	ldr	r3, [pc, #220]	; (808027c <_Z15prepAndSendData6String+0x110>)
 808019e:	2202      	movs	r2, #2
 80801a0:	6819      	ldr	r1, [r3, #0]
 80801a2:	a804      	add	r0, sp, #16
 80801a4:	f001 fb43 	bl	808182e <_ZN6StringC1Efi>
 80801a8:	9904      	ldr	r1, [sp, #16]
 80801aa:	a808      	add	r0, sp, #32
 80801ac:	f002 ff18 	bl	8082fe0 <strcat>
 80801b0:	a804      	add	r0, sp, #16
 80801b2:	f001 fab7 	bl	8081724 <_ZN6StringD1Ev>
    strcat (resultstr,", \"Bilge Status\":");
 80801b6:	4932      	ldr	r1, [pc, #200]	; (8080280 <_Z15prepAndSendData6String+0x114>)
 80801b8:	a808      	add	r0, sp, #32
 80801ba:	f002 ff11 	bl	8082fe0 <strcat>
    strcat (resultstr,String(bilgePump, 0));
 80801be:	4b31      	ldr	r3, [pc, #196]	; (8080284 <_Z15prepAndSendData6String+0x118>)
 80801c0:	2200      	movs	r2, #0
 80801c2:	6819      	ldr	r1, [r3, #0]
 80801c4:	a804      	add	r0, sp, #16
 80801c6:	f001 fb32 	bl	808182e <_ZN6StringC1Efi>
 80801ca:	9904      	ldr	r1, [sp, #16]
 80801cc:	a808      	add	r0, sp, #32
 80801ce:	f002 ff07 	bl	8082fe0 <strcat>
 80801d2:	a804      	add	r0, sp, #16
 80801d4:	f001 faa6 	bl	8081724 <_ZN6StringD1Ev>
    strcat (resultstr,", \"Water Sensor\":");
 80801d8:	492b      	ldr	r1, [pc, #172]	; (8080288 <_Z15prepAndSendData6String+0x11c>)
 80801da:	a808      	add	r0, sp, #32
 80801dc:	f002 ff00 	bl	8082fe0 <strcat>
    strcat (resultstr,String(water, 2));
 80801e0:	4b2a      	ldr	r3, [pc, #168]	; (808028c <_Z15prepAndSendData6String+0x120>)
 80801e2:	2202      	movs	r2, #2
 80801e4:	6819      	ldr	r1, [r3, #0]
 80801e6:	a804      	add	r0, sp, #16
 80801e8:	f001 fb21 	bl	808182e <_ZN6StringC1Efi>
 80801ec:	9904      	ldr	r1, [sp, #16]
 80801ee:	a808      	add	r0, sp, #32
 80801f0:	f002 fef6 	bl	8082fe0 <strcat>
 80801f4:	a804      	add	r0, sp, #16
 80801f6:	f001 fa95 	bl	8081724 <_ZN6StringD1Ev>
    strcat (resultstr,", \"voltMeter\":");
 80801fa:	4925      	ldr	r1, [pc, #148]	; (8080290 <_Z15prepAndSendData6String+0x124>)
 80801fc:	a808      	add	r0, sp, #32
 80801fe:	f002 feef 	bl	8082fe0 <strcat>
    strcat (resultstr,String(voltMeter, 2));
 8080202:	4b24      	ldr	r3, [pc, #144]	; (8080294 <_Z15prepAndSendData6String+0x128>)
 8080204:	2202      	movs	r2, #2
 8080206:	6819      	ldr	r1, [r3, #0]
 8080208:	a804      	add	r0, sp, #16
 808020a:	f001 fb10 	bl	808182e <_ZN6StringC1Efi>
 808020e:	9904      	ldr	r1, [sp, #16]
 8080210:	a808      	add	r0, sp, #32
 8080212:	f002 fee5 	bl	8082fe0 <strcat>
 8080216:	a804      	add	r0, sp, #16
 8080218:	f001 fa84 	bl	8081724 <_ZN6StringD1Ev>
    strcat (resultstr,"}");
 808021c:	491e      	ldr	r1, [pc, #120]	; (8080298 <_Z15prepAndSendData6String+0x12c>)
 808021e:	a808      	add	r0, sp, #32
 8080220:	f002 fede 	bl	8082fe0 <strcat>
    Particle.publish(String(message), resultstr, PRIVATE);
 8080224:	4621      	mov	r1, r4
 8080226:	a804      	add	r0, sp, #16
 8080228:	f001 fae5 	bl	80817f6 <_ZN6StringC1ERKS_>
 808022c:	4b1b      	ldr	r3, [pc, #108]	; (808029c <_Z15prepAndSendData6String+0x130>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808022e:	aa08      	add	r2, sp, #32
 8080230:	781b      	ldrb	r3, [r3, #0]
 8080232:	9904      	ldr	r1, [sp, #16]
 8080234:	f88d 3000 	strb.w	r3, [sp]
 8080238:	a802      	add	r0, sp, #8
 808023a:	233c      	movs	r3, #60	; 0x3c
 808023c:	f000 ff84 	bl	8081148 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8080240:	9c03      	ldr	r4, [sp, #12]
 8080242:	b17c      	cbz	r4, 8080264 <_Z15prepAndSendData6String+0xf8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080244:	6863      	ldr	r3, [r4, #4]
 8080246:	3b01      	subs	r3, #1
 8080248:	6063      	str	r3, [r4, #4]
 808024a:	b95b      	cbnz	r3, 8080264 <_Z15prepAndSendData6String+0xf8>
        {
          _M_dispose();
 808024c:	6823      	ldr	r3, [r4, #0]
 808024e:	4620      	mov	r0, r4
 8080250:	689b      	ldr	r3, [r3, #8]
 8080252:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080254:	68a3      	ldr	r3, [r4, #8]
 8080256:	3b01      	subs	r3, #1
 8080258:	60a3      	str	r3, [r4, #8]
 808025a:	b91b      	cbnz	r3, 8080264 <_Z15prepAndSendData6String+0xf8>
            _M_destroy();
 808025c:	6823      	ldr	r3, [r4, #0]
 808025e:	4620      	mov	r0, r4
 8080260:	68db      	ldr	r3, [r3, #12]
 8080262:	4798      	blx	r3
 8080264:	a804      	add	r0, sp, #16
 8080266:	f001 fa5d 	bl	8081724 <_ZN6StringD1Ev>
 808026a:	b028      	add	sp, #160	; 0xa0
 808026c:	bd10      	pop	{r4, pc}
 808026e:	bf00      	nop
 8080270:	0808306c 	.word	0x0808306c
 8080274:	20000498 	.word	0x20000498
 8080278:	0808307a 	.word	0x0808307a
 808027c:	2000049c 	.word	0x2000049c
 8080280:	08083089 	.word	0x08083089
 8080284:	200004c4 	.word	0x200004c4
 8080288:	0808309b 	.word	0x0808309b
 808028c:	200004b4 	.word	0x200004b4
 8080290:	080830ad 	.word	0x080830ad
 8080294:	200004ac 	.word	0x200004ac
 8080298:	080830bc 	.word	0x080830bc
 808029c:	200004b0 	.word	0x200004b0

080802a0 <setup>:
int bilgePumpRunTimeTrigger = 60000; //=1min
int bilgeRunTime = 0; //last 6 hours



void setup() {
 80802a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
analogWrite(DAC, 4095);
 80802a2:	f640 71ff 	movw	r1, #4095	; 0xfff
 80802a6:	2010      	movs	r0, #16
 80802a8:	f001 fbdf 	bl	8081a6a <_Z11analogWritetm>
readSensors();
 80802ac:	f7ff ff02 	bl	80800b4 <_Z11readSensorsv>
prepAndSendData("BoatData");
 80802b0:	4906      	ldr	r1, [pc, #24]	; (80802cc <setup+0x2c>)
 80802b2:	4668      	mov	r0, sp
 80802b4:	f001 fa7d 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80802b8:	4668      	mov	r0, sp
 80802ba:	f7ff ff57 	bl	808016c <_Z15prepAndSendData6String>
 80802be:	4668      	mov	r0, sp
 80802c0:	f001 fa30 	bl	8081724 <_ZN6StringD1Ev>
}
 80802c4:	b005      	add	sp, #20
 80802c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80802ca:	bf00      	nop
 80802cc:	080830be 	.word	0x080830be

080802d0 <_Z9checkTime6Stringmm>:
  alarmMode = 0;
}lastPublishConst = checkTime("BoatData", publishDelayConst, lastPublishConst);

}

unsigned long checkTime(String message, unsigned long delay, unsigned long lastPublish){
 80802d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80802d2:	b085      	sub	sp, #20
 80802d4:	460f      	mov	r7, r1
 80802d6:	4614      	mov	r4, r2
 80802d8:	4606      	mov	r6, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80802da:	f000 fa37 	bl	808074c <HAL_Timer_Get_Milli_Seconds>
unsigned long now = millis();

        if ((now - lastPublish) > delay) {
 80802de:	1b03      	subs	r3, r0, r4
 80802e0:	42bb      	cmp	r3, r7
 80802e2:	4605      	mov	r5, r0
 80802e4:	d90a      	bls.n	80802fc <_Z9checkTime6Stringmm+0x2c>
           prepAndSendData(message);
 80802e6:	4631      	mov	r1, r6
 80802e8:	4668      	mov	r0, sp
 80802ea:	f001 fa84 	bl	80817f6 <_ZN6StringC1ERKS_>
 80802ee:	4668      	mov	r0, sp
 80802f0:	f7ff ff3c 	bl	808016c <_Z15prepAndSendData6String>
 80802f4:	4668      	mov	r0, sp
 80802f6:	f001 fa15 	bl	8081724 <_ZN6StringD1Ev>
           lastPublish = now;
 80802fa:	462c      	mov	r4, r5
        }return lastPublish;
    }
 80802fc:	4620      	mov	r0, r4
 80802fe:	b005      	add	sp, #20
 8080300:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08080304 <_Z13checkTriggersv>:
readSensors();
checkTriggers();
delay(500); 
}

void checkTriggers(){
 8080304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

if (water>=1000 || bilgeRunTime >= bilgePumpRunTimeTrigger){
 8080306:	4b4d      	ldr	r3, [pc, #308]	; (808043c <_Z13checkTriggersv+0x138>)
 8080308:	494d      	ldr	r1, [pc, #308]	; (8080440 <_Z13checkTriggersv+0x13c>)
 808030a:	6818      	ldr	r0, [r3, #0]
 808030c:	f002 fc56 	bl	8082bbc <__aeabi_fcmpge>
 8080310:	4c4c      	ldr	r4, [pc, #304]	; (8080444 <_Z13checkTriggersv+0x140>)
 8080312:	4606      	mov	r6, r0
 8080314:	b928      	cbnz	r0, 8080322 <_Z13checkTriggersv+0x1e>
 8080316:	4b4c      	ldr	r3, [pc, #304]	; (8080448 <_Z13checkTriggersv+0x144>)
 8080318:	681a      	ldr	r2, [r3, #0]
 808031a:	4b4c      	ldr	r3, [pc, #304]	; (808044c <_Z13checkTriggersv+0x148>)
 808031c:	681b      	ldr	r3, [r3, #0]
 808031e:	429a      	cmp	r2, r3
 8080320:	db1d      	blt.n	808035e <_Z13checkTriggersv+0x5a>
if (alarmMode != 3){
 8080322:	6823      	ldr	r3, [r4, #0]
 8080324:	4c4a      	ldr	r4, [pc, #296]	; (8080450 <_Z13checkTriggersv+0x14c>)
 8080326:	2b03      	cmp	r3, #3
 8080328:	d012      	beq.n	8080350 <_Z13checkTriggersv+0x4c>
alarmMode = 3;
 808032a:	4b46      	ldr	r3, [pc, #280]	; (8080444 <_Z13checkTriggersv+0x140>)
 808032c:	2203      	movs	r2, #3
lastPublishWater =  checkTime("BoatDataWaterInBoat", 0, lastPublishWater);
 808032e:	4949      	ldr	r1, [pc, #292]	; (8080454 <_Z13checkTriggersv+0x150>)
 8080330:	4668      	mov	r0, sp

void checkTriggers(){

if (water>=1000 || bilgeRunTime >= bilgePumpRunTimeTrigger){
if (alarmMode != 3){
alarmMode = 3;
 8080332:	601a      	str	r2, [r3, #0]
lastPublishWater =  checkTime("BoatDataWaterInBoat", 0, lastPublishWater);
 8080334:	f001 fa3d 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080338:	6822      	ldr	r2, [r4, #0]
 808033a:	2100      	movs	r1, #0
 808033c:	4668      	mov	r0, sp
 808033e:	f7ff ffc7 	bl	80802d0 <_Z9checkTime6Stringmm>
 8080342:	6020      	str	r0, [r4, #0]
 8080344:	4668      	mov	r0, sp
 8080346:	f001 f9ed 	bl	8081724 <_ZN6StringD1Ev>
delay(2000);
 808034a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808034e:	e022      	b.n	8080396 <_Z13checkTriggersv+0x92>
}else
{
lastPublishWater = checkTime("BoatDataWaterInBoat",publishDelayWater, lastPublishWater);
 8080350:	4940      	ldr	r1, [pc, #256]	; (8080454 <_Z13checkTriggersv+0x150>)
 8080352:	4668      	mov	r0, sp
 8080354:	f001 fa2d 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080358:	6822      	ldr	r2, [r4, #0]
 808035a:	4b3f      	ldr	r3, [pc, #252]	; (8080458 <_Z13checkTriggersv+0x154>)
 808035c:	e053      	b.n	8080406 <_Z13checkTriggersv+0x102>
}

}else if (bilgePump>= bilgePumpTrigger){
 808035e:	4b3f      	ldr	r3, [pc, #252]	; (808045c <_Z13checkTriggersv+0x158>)
 8080360:	6819      	ldr	r1, [r3, #0]
 8080362:	4b3f      	ldr	r3, [pc, #252]	; (8080460 <_Z13checkTriggersv+0x15c>)
 8080364:	6818      	ldr	r0, [r3, #0]
 8080366:	f002 fc29 	bl	8082bbc <__aeabi_fcmpge>
 808036a:	b318      	cbz	r0, 80803b4 <_Z13checkTriggersv+0xb0>
  if(alarmMode !=2)
 808036c:	6823      	ldr	r3, [r4, #0]
 808036e:	4d3d      	ldr	r5, [pc, #244]	; (8080464 <_Z13checkTriggersv+0x160>)
 8080370:	2b02      	cmp	r3, #2
 8080372:	d013      	beq.n	808039c <_Z13checkTriggersv+0x98>
  {
alarmMode = 2;
 8080374:	2302      	movs	r3, #2
lastPublishPump = checkTime("BoatDataBilgeOn", 0, lastPublishPump);
 8080376:	493c      	ldr	r1, [pc, #240]	; (8080468 <_Z13checkTriggersv+0x164>)
 8080378:	4668      	mov	r0, sp
}

}else if (bilgePump>= bilgePumpTrigger){
  if(alarmMode !=2)
  {
alarmMode = 2;
 808037a:	6023      	str	r3, [r4, #0]
lastPublishPump = checkTime("BoatDataBilgeOn", 0, lastPublishPump);
 808037c:	f001 fa19 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080380:	682a      	ldr	r2, [r5, #0]
 8080382:	4631      	mov	r1, r6
 8080384:	4668      	mov	r0, sp
 8080386:	f7ff ffa3 	bl	80802d0 <_Z9checkTime6Stringmm>
 808038a:	6028      	str	r0, [r5, #0]
 808038c:	4668      	mov	r0, sp
 808038e:	f001 f9c9 	bl	8081724 <_ZN6StringD1Ev>
delay(1000);
 8080392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080396:	f001 f8f7 	bl	8081588 <delay>
 808039a:	e03e      	b.n	808041a <_Z13checkTriggersv+0x116>
  }else
  {
 lastPublishPump = checkTime("BoatDataBilgeOn", publishDelayPump, lastPublishPump);
 808039c:	4932      	ldr	r1, [pc, #200]	; (8080468 <_Z13checkTriggersv+0x164>)
 808039e:	4668      	mov	r0, sp
 80803a0:	f001 fa07 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80803a4:	4b31      	ldr	r3, [pc, #196]	; (808046c <_Z13checkTriggersv+0x168>)
 80803a6:	682a      	ldr	r2, [r5, #0]
 80803a8:	6819      	ldr	r1, [r3, #0]
 80803aa:	4668      	mov	r0, sp
 80803ac:	f7ff ff90 	bl	80802d0 <_Z9checkTime6Stringmm>
 80803b0:	6028      	str	r0, [r5, #0]
 80803b2:	e02d      	b.n	8080410 <_Z13checkTriggersv+0x10c>
  }
  

}else if (batt1<=minVoltage || batt2 <=minVoltage){
 80803b4:	4b2e      	ldr	r3, [pc, #184]	; (8080470 <_Z13checkTriggersv+0x16c>)
 80803b6:	681d      	ldr	r5, [r3, #0]
 80803b8:	4b2e      	ldr	r3, [pc, #184]	; (8080474 <_Z13checkTriggersv+0x170>)
 80803ba:	4629      	mov	r1, r5
 80803bc:	6818      	ldr	r0, [r3, #0]
 80803be:	f002 fbf3 	bl	8082ba8 <__aeabi_fcmple>
 80803c2:	b928      	cbnz	r0, 80803d0 <_Z13checkTriggersv+0xcc>
 80803c4:	4b2c      	ldr	r3, [pc, #176]	; (8080478 <_Z13checkTriggersv+0x174>)
 80803c6:	4628      	mov	r0, r5
 80803c8:	6819      	ldr	r1, [r3, #0]
 80803ca:	f002 fbf7 	bl	8082bbc <__aeabi_fcmpge>
 80803ce:	b318      	cbz	r0, 8080418 <_Z13checkTriggersv+0x114>
 if(alarmMode != 1){
 80803d0:	6823      	ldr	r3, [r4, #0]
  lastPublishBatt = checkTime("BoatDataBatteryALERT!",0, lastPublishBatt);
 80803d2:	492a      	ldr	r1, [pc, #168]	; (808047c <_Z13checkTriggersv+0x178>)
 lastPublishPump = checkTime("BoatDataBilgeOn", publishDelayPump, lastPublishPump);
  }
  

}else if (batt1<=minVoltage || batt2 <=minVoltage){
 if(alarmMode != 1){
 80803d4:	2b01      	cmp	r3, #1
  lastPublishBatt = checkTime("BoatDataBatteryALERT!",0, lastPublishBatt);
 80803d6:	4668      	mov	r0, sp
 80803d8:	4c29      	ldr	r4, [pc, #164]	; (8080480 <_Z13checkTriggersv+0x17c>)
 lastPublishPump = checkTime("BoatDataBilgeOn", publishDelayPump, lastPublishPump);
  }
  

}else if (batt1<=minVoltage || batt2 <=minVoltage){
 if(alarmMode != 1){
 80803da:	d010      	beq.n	80803fe <_Z13checkTriggersv+0xfa>
  lastPublishBatt = checkTime("BoatDataBatteryALERT!",0, lastPublishBatt);
 80803dc:	f001 f9e9 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80803e0:	6822      	ldr	r2, [r4, #0]
 80803e2:	2100      	movs	r1, #0
 80803e4:	4668      	mov	r0, sp
 80803e6:	f7ff ff73 	bl	80802d0 <_Z9checkTime6Stringmm>
 80803ea:	6020      	str	r0, [r4, #0]
 80803ec:	4668      	mov	r0, sp
 80803ee:	f001 f999 	bl	8081724 <_ZN6StringD1Ev>
  alarmMode = 1;
 80803f2:	4b14      	ldr	r3, [pc, #80]	; (8080444 <_Z13checkTriggersv+0x140>)
 80803f4:	2201      	movs	r2, #1
 80803f6:	601a      	str	r2, [r3, #0]
  delay(30000);
 80803f8:	f247 5030 	movw	r0, #30000	; 0x7530
 80803fc:	e7cb      	b.n	8080396 <_Z13checkTriggersv+0x92>
 }else
 {
     lastPublishBatt = checkTime("BoatDataBatteryALERT!",publishDelayBatt, lastPublishBatt);
 80803fe:	f001 f9d8 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080402:	6822      	ldr	r2, [r4, #0]
 8080404:	4b1f      	ldr	r3, [pc, #124]	; (8080484 <_Z13checkTriggersv+0x180>)
 8080406:	6819      	ldr	r1, [r3, #0]
 8080408:	4668      	mov	r0, sp
 808040a:	f7ff ff61 	bl	80802d0 <_Z9checkTime6Stringmm>
 808040e:	6020      	str	r0, [r4, #0]
 8080410:	4668      	mov	r0, sp
 8080412:	f001 f987 	bl	8081724 <_ZN6StringD1Ev>
 8080416:	e000      	b.n	808041a <_Z13checkTriggersv+0x116>
 }
  
}else {
  alarmMode = 0;
 8080418:	6020      	str	r0, [r4, #0]
}lastPublishConst = checkTime("BoatData", publishDelayConst, lastPublishConst);
 808041a:	491b      	ldr	r1, [pc, #108]	; (8080488 <_Z13checkTriggersv+0x184>)
 808041c:	4668      	mov	r0, sp
 808041e:	f001 f9c8 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080422:	4c1a      	ldr	r4, [pc, #104]	; (808048c <_Z13checkTriggersv+0x188>)
 8080424:	4b1a      	ldr	r3, [pc, #104]	; (8080490 <_Z13checkTriggersv+0x18c>)
 8080426:	6822      	ldr	r2, [r4, #0]
 8080428:	6819      	ldr	r1, [r3, #0]
 808042a:	4668      	mov	r0, sp
 808042c:	f7ff ff50 	bl	80802d0 <_Z9checkTime6Stringmm>
 8080430:	6020      	str	r0, [r4, #0]
 8080432:	4668      	mov	r0, sp
 8080434:	f001 f976 	bl	8081724 <_ZN6StringD1Ev>

}
 8080438:	b004      	add	sp, #16
 808043a:	bd70      	pop	{r4, r5, r6, pc}
 808043c:	200004b4 	.word	0x200004b4
 8080440:	447a0000 	.word	0x447a0000
 8080444:	20000488 	.word	0x20000488
 8080448:	20000490 	.word	0x20000490
 808044c:	20000414 	.word	0x20000414
 8080450:	200004c8 	.word	0x200004c8
 8080454:	080830c7 	.word	0x080830c7
 8080458:	20000408 	.word	0x20000408
 808045c:	20000410 	.word	0x20000410
 8080460:	200004c4 	.word	0x200004c4
 8080464:	20000494 	.word	0x20000494
 8080468:	080830db 	.word	0x080830db
 808046c:	20000418 	.word	0x20000418
 8080470:	20000400 	.word	0x20000400
 8080474:	20000498 	.word	0x20000498
 8080478:	2000049c 	.word	0x2000049c
 808047c:	080830eb 	.word	0x080830eb
 8080480:	200004a8 	.word	0x200004a8
 8080484:	2000040c 	.word	0x2000040c
 8080488:	080830be 	.word	0x080830be
 808048c:	200004a0 	.word	0x200004a0
 8080490:	20000404 	.word	0x20000404

08080494 <loop>:
analogWrite(DAC, 4095);
readSensors();
prepAndSendData("BoatData");
}

void loop() {
 8080494:	b508      	push	{r3, lr}
readSensors();
 8080496:	f7ff fe0d 	bl	80800b4 <_Z11readSensorsv>
checkTriggers();
 808049a:	f7ff ff33 	bl	8080304 <_Z13checkTriggersv>
delay(500); 
}
 808049e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void loop() {
readSensors();
checkTriggers();
delay(500); 
 80804a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80804a6:	f001 b86f 	b.w	8081588 <delay>
	...

080804ac <_GLOBAL__sub_I_waterRaw>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80804ac:	4b02      	ldr	r3, [pc, #8]	; (80804b8 <_GLOBAL__sub_I_waterRaw+0xc>)
 80804ae:	2201      	movs	r2, #1
 80804b0:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80804b2:	f000 b963 	b.w	808077c <HAL_Pin_Map>
 80804b6:	bf00      	nop
 80804b8:	200004b0 	.word	0x200004b0

080804bc <_ZN15ThingSpeakClassD1Ev>:
 80804bc:	b570      	push	{r4, r5, r6, lr}
 80804be:	4604      	mov	r4, r0
 80804c0:	30c8      	adds	r0, #200	; 0xc8
 80804c2:	f001 f92f 	bl	8081724 <_ZN6StringD1Ev>
 80804c6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80804ca:	f001 f92b 	bl	8081724 <_ZN6StringD1Ev>
 80804ce:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80804d2:	f001 f927 	bl	8081724 <_ZN6StringD1Ev>
 80804d6:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80804da:	f001 f923 	bl	8081724 <_ZN6StringD1Ev>
 80804de:	f114 0608 	adds.w	r6, r4, #8
 80804e2:	d008      	beq.n	80804f6 <_ZN15ThingSpeakClassD1Ev+0x3a>
 80804e4:	f104 0588 	add.w	r5, r4, #136	; 0x88
 80804e8:	42b5      	cmp	r5, r6
 80804ea:	d004      	beq.n	80804f6 <_ZN15ThingSpeakClassD1Ev+0x3a>
 80804ec:	3d10      	subs	r5, #16
 80804ee:	4628      	mov	r0, r5
 80804f0:	f001 f918 	bl	8081724 <_ZN6StringD1Ev>
 80804f4:	e7f8      	b.n	80804e8 <_ZN15ThingSpeakClassD1Ev+0x2c>
 80804f6:	4620      	mov	r0, r4
 80804f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080804fc <_ZN15ThingSpeakClassC1Ev>:
 80804fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080500:	f100 0608 	add.w	r6, r0, #8
 8080504:	4604      	mov	r4, r0
 8080506:	4635      	mov	r5, r6
 8080508:	2200      	movs	r2, #0
 808050a:	2350      	movs	r3, #80	; 0x50
 808050c:	e880 000c 	stmia.w	r0, {r2, r3}
 8080510:	f100 0988 	add.w	r9, r0, #136	; 0x88
 8080514:	4630      	mov	r0, r6
 8080516:	4921      	ldr	r1, [pc, #132]	; (808059c <_ZN15ThingSpeakClassC1Ev+0xa0>)
 8080518:	3610      	adds	r6, #16
 808051a:	f001 f94a 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 808051e:	454e      	cmp	r6, r9
 8080520:	d1f8      	bne.n	8080514 <_ZN15ThingSpeakClassC1Ev+0x18>
 8080522:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 8080526:	491d      	ldr	r1, [pc, #116]	; (808059c <_ZN15ThingSpeakClassC1Ev+0xa0>)
 8080528:	4650      	mov	r0, sl
 808052a:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
 808052e:	f001 f940 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080532:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
 8080536:	4919      	ldr	r1, [pc, #100]	; (808059c <_ZN15ThingSpeakClassC1Ev+0xa0>)
 8080538:	4640      	mov	r0, r8
 808053a:	f001 f93a 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 808053e:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 8080542:	4916      	ldr	r1, [pc, #88]	; (808059c <_ZN15ThingSpeakClassC1Ev+0xa0>)
 8080544:	4638      	mov	r0, r7
 8080546:	f001 f934 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 808054a:	4914      	ldr	r1, [pc, #80]	; (808059c <_ZN15ThingSpeakClassC1Ev+0xa0>)
 808054c:	4630      	mov	r0, r6
 808054e:	f001 f930 	bl	80817b2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080552:	4628      	mov	r0, r5
 8080554:	4911      	ldr	r1, [pc, #68]	; (808059c <_ZN15ThingSpeakClassC1Ev+0xa0>)
 8080556:	3510      	adds	r5, #16
 8080558:	f001 f958 	bl	808180c <_ZN6StringaSEPKc>
 808055c:	45a9      	cmp	r9, r5
 808055e:	d1f8      	bne.n	8080552 <_ZN15ThingSpeakClassC1Ev+0x56>
 8080560:	4b0f      	ldr	r3, [pc, #60]	; (80805a0 <_ZN15ThingSpeakClassC1Ev+0xa4>)
 8080562:	490e      	ldr	r1, [pc, #56]	; (808059c <_ZN15ThingSpeakClassC1Ev+0xa0>)
 8080564:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8080568:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 808056c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8080570:	4650      	mov	r0, sl
 8080572:	f001 f94b 	bl	808180c <_ZN6StringaSEPKc>
 8080576:	4909      	ldr	r1, [pc, #36]	; (808059c <_ZN15ThingSpeakClassC1Ev+0xa0>)
 8080578:	4640      	mov	r0, r8
 808057a:	f001 f947 	bl	808180c <_ZN6StringaSEPKc>
 808057e:	4907      	ldr	r1, [pc, #28]	; (808059c <_ZN15ThingSpeakClassC1Ev+0xa0>)
 8080580:	4638      	mov	r0, r7
 8080582:	f001 f943 	bl	808180c <_ZN6StringaSEPKc>
 8080586:	4905      	ldr	r1, [pc, #20]	; (808059c <_ZN15ThingSpeakClassC1Ev+0xa0>)
 8080588:	4630      	mov	r0, r6
 808058a:	f001 f93f 	bl	808180c <_ZN6StringaSEPKc>
 808058e:	23c8      	movs	r3, #200	; 0xc8
 8080590:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8080594:	4620      	mov	r0, r4
 8080596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808059a:	bf00      	nop
 808059c:	08083263 	.word	0x08083263
 80805a0:	7fc00000 	.word	0x7fc00000

080805a4 <_GLOBAL__sub_I_ThingSpeak>:
 80805a4:	b510      	push	{r4, lr}
 80805a6:	4c06      	ldr	r4, [pc, #24]	; (80805c0 <_GLOBAL__sub_I_ThingSpeak+0x1c>)
 80805a8:	f000 f8e8 	bl	808077c <HAL_Pin_Map>
 80805ac:	4620      	mov	r0, r4
 80805ae:	f7ff ffa5 	bl	80804fc <_ZN15ThingSpeakClassC1Ev>
 80805b2:	4620      	mov	r0, r4
 80805b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80805b8:	4a02      	ldr	r2, [pc, #8]	; (80805c4 <_GLOBAL__sub_I_ThingSpeak+0x20>)
 80805ba:	4903      	ldr	r1, [pc, #12]	; (80805c8 <_GLOBAL__sub_I_ThingSpeak+0x24>)
 80805bc:	f001 ba7b 	b.w	8081ab6 <__aeabi_atexit>
 80805c0:	200004cc 	.word	0x200004cc
 80805c4:	20000484 	.word	0x20000484
 80805c8:	080804bd 	.word	0x080804bd

080805cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80805cc:	b508      	push	{r3, lr}
 80805ce:	4b02      	ldr	r3, [pc, #8]	; (80805d8 <HAL_USB_USART_Init+0xc>)
 80805d0:	681b      	ldr	r3, [r3, #0]
 80805d2:	681b      	ldr	r3, [r3, #0]
 80805d4:	9301      	str	r3, [sp, #4]
 80805d6:	bd08      	pop	{r3, pc}
 80805d8:	0806001c 	.word	0x0806001c

080805dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80805dc:	b508      	push	{r3, lr}
 80805de:	4b02      	ldr	r3, [pc, #8]	; (80805e8 <HAL_USB_USART_Available_Data+0xc>)
 80805e0:	681b      	ldr	r3, [r3, #0]
 80805e2:	691b      	ldr	r3, [r3, #16]
 80805e4:	9301      	str	r3, [sp, #4]
 80805e6:	bd08      	pop	{r3, pc}
 80805e8:	0806001c 	.word	0x0806001c

080805ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80805ec:	b508      	push	{r3, lr}
 80805ee:	4b02      	ldr	r3, [pc, #8]	; (80805f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80805f0:	681b      	ldr	r3, [r3, #0]
 80805f2:	695b      	ldr	r3, [r3, #20]
 80805f4:	9301      	str	r3, [sp, #4]
 80805f6:	bd08      	pop	{r3, pc}
 80805f8:	0806001c 	.word	0x0806001c

080805fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80805fc:	b508      	push	{r3, lr}
 80805fe:	4b02      	ldr	r3, [pc, #8]	; (8080608 <HAL_USB_USART_Receive_Data+0xc>)
 8080600:	681b      	ldr	r3, [r3, #0]
 8080602:	699b      	ldr	r3, [r3, #24]
 8080604:	9301      	str	r3, [sp, #4]
 8080606:	bd08      	pop	{r3, pc}
 8080608:	0806001c 	.word	0x0806001c

0808060c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808060c:	b508      	push	{r3, lr}
 808060e:	4b02      	ldr	r3, [pc, #8]	; (8080618 <HAL_USB_USART_Send_Data+0xc>)
 8080610:	681b      	ldr	r3, [r3, #0]
 8080612:	69db      	ldr	r3, [r3, #28]
 8080614:	9301      	str	r3, [sp, #4]
 8080616:	bd08      	pop	{r3, pc}
 8080618:	0806001c 	.word	0x0806001c

0808061c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808061c:	b508      	push	{r3, lr}
 808061e:	4b02      	ldr	r3, [pc, #8]	; (8080628 <HAL_USB_USART_Flush_Data+0xc>)
 8080620:	681b      	ldr	r3, [r3, #0]
 8080622:	6a1b      	ldr	r3, [r3, #32]
 8080624:	9301      	str	r3, [sp, #4]
 8080626:	bd08      	pop	{r3, pc}
 8080628:	0806001c 	.word	0x0806001c

0808062c <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808062c:	b508      	push	{r3, lr}
 808062e:	4b02      	ldr	r3, [pc, #8]	; (8080638 <inet_gethostbyname+0xc>)
 8080630:	681b      	ldr	r3, [r3, #0]
 8080632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080634:	9301      	str	r3, [sp, #4]
 8080636:	bd08      	pop	{r3, pc}
 8080638:	08060020 	.word	0x08060020

0808063c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 808063c:	b508      	push	{r3, lr}
 808063e:	4b02      	ldr	r3, [pc, #8]	; (8080648 <HAL_I2C_Write_Data+0xc>)
 8080640:	681b      	ldr	r3, [r3, #0]
 8080642:	6a1b      	ldr	r3, [r3, #32]
 8080644:	9301      	str	r3, [sp, #4]
 8080646:	bd08      	pop	{r3, pc}
 8080648:	080401ac 	.word	0x080401ac

0808064c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 808064c:	b508      	push	{r3, lr}
 808064e:	4b02      	ldr	r3, [pc, #8]	; (8080658 <HAL_I2C_Available_Data+0xc>)
 8080650:	681b      	ldr	r3, [r3, #0]
 8080652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080654:	9301      	str	r3, [sp, #4]
 8080656:	bd08      	pop	{r3, pc}
 8080658:	080401ac 	.word	0x080401ac

0808065c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 808065c:	b508      	push	{r3, lr}
 808065e:	4b02      	ldr	r3, [pc, #8]	; (8080668 <HAL_I2C_Read_Data+0xc>)
 8080660:	681b      	ldr	r3, [r3, #0]
 8080662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080664:	9301      	str	r3, [sp, #4]
 8080666:	bd08      	pop	{r3, pc}
 8080668:	080401ac 	.word	0x080401ac

0808066c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 808066c:	b508      	push	{r3, lr}
 808066e:	4b02      	ldr	r3, [pc, #8]	; (8080678 <HAL_I2C_Peek_Data+0xc>)
 8080670:	681b      	ldr	r3, [r3, #0]
 8080672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080674:	9301      	str	r3, [sp, #4]
 8080676:	bd08      	pop	{r3, pc}
 8080678:	080401ac 	.word	0x080401ac

0808067c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 808067c:	b508      	push	{r3, lr}
 808067e:	4b02      	ldr	r3, [pc, #8]	; (8080688 <HAL_I2C_Flush_Data+0xc>)
 8080680:	681b      	ldr	r3, [r3, #0]
 8080682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080684:	9301      	str	r3, [sp, #4]
 8080686:	bd08      	pop	{r3, pc}
 8080688:	080401ac 	.word	0x080401ac

0808068c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 808068c:	b508      	push	{r3, lr}
 808068e:	4b02      	ldr	r3, [pc, #8]	; (8080698 <HAL_I2C_Is_Enabled+0xc>)
 8080690:	681b      	ldr	r3, [r3, #0]
 8080692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080694:	9301      	str	r3, [sp, #4]
 8080696:	bd08      	pop	{r3, pc}
 8080698:	080401ac 	.word	0x080401ac

0808069c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 808069c:	b508      	push	{r3, lr}
 808069e:	4b02      	ldr	r3, [pc, #8]	; (80806a8 <HAL_I2C_Init+0xc>)
 80806a0:	681b      	ldr	r3, [r3, #0]
 80806a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80806a4:	9301      	str	r3, [sp, #4]
 80806a6:	bd08      	pop	{r3, pc}
 80806a8:	080401ac 	.word	0x080401ac

080806ac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80806ac:	b508      	push	{r3, lr}
 80806ae:	4b02      	ldr	r3, [pc, #8]	; (80806b8 <HAL_USART_Init+0xc>)
 80806b0:	681b      	ldr	r3, [r3, #0]
 80806b2:	699b      	ldr	r3, [r3, #24]
 80806b4:	9301      	str	r3, [sp, #4]
 80806b6:	bd08      	pop	{r3, pc}
 80806b8:	080401c4 	.word	0x080401c4

080806bc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80806bc:	b508      	push	{r3, lr}
 80806be:	4b02      	ldr	r3, [pc, #8]	; (80806c8 <HAL_USART_Write_Data+0xc>)
 80806c0:	681b      	ldr	r3, [r3, #0]
 80806c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80806c4:	9301      	str	r3, [sp, #4]
 80806c6:	bd08      	pop	{r3, pc}
 80806c8:	080401c4 	.word	0x080401c4

080806cc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80806cc:	b508      	push	{r3, lr}
 80806ce:	4b02      	ldr	r3, [pc, #8]	; (80806d8 <HAL_USART_Available_Data+0xc>)
 80806d0:	681b      	ldr	r3, [r3, #0]
 80806d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80806d4:	9301      	str	r3, [sp, #4]
 80806d6:	bd08      	pop	{r3, pc}
 80806d8:	080401c4 	.word	0x080401c4

080806dc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80806dc:	b508      	push	{r3, lr}
 80806de:	4b02      	ldr	r3, [pc, #8]	; (80806e8 <HAL_USART_Read_Data+0xc>)
 80806e0:	681b      	ldr	r3, [r3, #0]
 80806e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80806e4:	9301      	str	r3, [sp, #4]
 80806e6:	bd08      	pop	{r3, pc}
 80806e8:	080401c4 	.word	0x080401c4

080806ec <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80806ec:	b508      	push	{r3, lr}
 80806ee:	4b02      	ldr	r3, [pc, #8]	; (80806f8 <HAL_USART_Peek_Data+0xc>)
 80806f0:	681b      	ldr	r3, [r3, #0]
 80806f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80806f4:	9301      	str	r3, [sp, #4]
 80806f6:	bd08      	pop	{r3, pc}
 80806f8:	080401c4 	.word	0x080401c4

080806fc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80806fc:	b508      	push	{r3, lr}
 80806fe:	4b02      	ldr	r3, [pc, #8]	; (8080708 <HAL_USART_Flush_Data+0xc>)
 8080700:	681b      	ldr	r3, [r3, #0]
 8080702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080704:	9301      	str	r3, [sp, #4]
 8080706:	bd08      	pop	{r3, pc}
 8080708:	080401c4 	.word	0x080401c4

0808070c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 808070c:	b508      	push	{r3, lr}
 808070e:	4b02      	ldr	r3, [pc, #8]	; (8080718 <HAL_USART_Is_Enabled+0xc>)
 8080710:	681b      	ldr	r3, [r3, #0]
 8080712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080714:	9301      	str	r3, [sp, #4]
 8080716:	bd08      	pop	{r3, pc}
 8080718:	080401c4 	.word	0x080401c4

0808071c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 808071c:	b508      	push	{r3, lr}
 808071e:	4b02      	ldr	r3, [pc, #8]	; (8080728 <HAL_USART_Available_Data_For_Write+0xc>)
 8080720:	681b      	ldr	r3, [r3, #0]
 8080722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080724:	9301      	str	r3, [sp, #4]
 8080726:	bd08      	pop	{r3, pc}
 8080728:	080401c4 	.word	0x080401c4

0808072c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808072c:	b508      	push	{r3, lr}
 808072e:	4b02      	ldr	r3, [pc, #8]	; (8080738 <os_mutex_create+0xc>)
 8080730:	681b      	ldr	r3, [r3, #0]
 8080732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080734:	9301      	str	r3, [sp, #4]
 8080736:	bd08      	pop	{r3, pc}
 8080738:	080401d0 	.word	0x080401d0

0808073c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808073c:	b508      	push	{r3, lr}
 808073e:	4b02      	ldr	r3, [pc, #8]	; (8080748 <HAL_RNG_GetRandomNumber+0xc>)
 8080740:	681b      	ldr	r3, [r3, #0]
 8080742:	685b      	ldr	r3, [r3, #4]
 8080744:	9301      	str	r3, [sp, #4]
 8080746:	bd08      	pop	{r3, pc}
 8080748:	0804019c 	.word	0x0804019c

0808074c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808074c:	b508      	push	{r3, lr}
 808074e:	4b02      	ldr	r3, [pc, #8]	; (8080758 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080750:	681b      	ldr	r3, [r3, #0]
 8080752:	695b      	ldr	r3, [r3, #20]
 8080754:	9301      	str	r3, [sp, #4]
 8080756:	bd08      	pop	{r3, pc}
 8080758:	0804019c 	.word	0x0804019c

0808075c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 808075c:	b508      	push	{r3, lr}
 808075e:	4b02      	ldr	r3, [pc, #8]	; (8080768 <HAL_SPI_Init+0xc>)
 8080760:	681b      	ldr	r3, [r3, #0]
 8080762:	69db      	ldr	r3, [r3, #28]
 8080764:	9301      	str	r3, [sp, #4]
 8080766:	bd08      	pop	{r3, pc}
 8080768:	080401b4 	.word	0x080401b4

0808076c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 808076c:	b508      	push	{r3, lr}
 808076e:	4b02      	ldr	r3, [pc, #8]	; (8080778 <HAL_SPI_Is_Enabled+0xc>)
 8080770:	681b      	ldr	r3, [r3, #0]
 8080772:	6a1b      	ldr	r3, [r3, #32]
 8080774:	9301      	str	r3, [sp, #4]
 8080776:	bd08      	pop	{r3, pc}
 8080778:	080401b4 	.word	0x080401b4

0808077c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 808077c:	b508      	push	{r3, lr}
 808077e:	4b02      	ldr	r3, [pc, #8]	; (8080788 <HAL_Pin_Map+0xc>)
 8080780:	681b      	ldr	r3, [r3, #0]
 8080782:	681b      	ldr	r3, [r3, #0]
 8080784:	9301      	str	r3, [sp, #4]
 8080786:	bd08      	pop	{r3, pc}
 8080788:	080401b0 	.word	0x080401b0

0808078c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808078c:	b508      	push	{r3, lr}
 808078e:	4b02      	ldr	r3, [pc, #8]	; (8080798 <HAL_Validate_Pin_Function+0xc>)
 8080790:	681b      	ldr	r3, [r3, #0]
 8080792:	685b      	ldr	r3, [r3, #4]
 8080794:	9301      	str	r3, [sp, #4]
 8080796:	bd08      	pop	{r3, pc}
 8080798:	080401b0 	.word	0x080401b0

0808079c <HAL_Get_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808079c:	b508      	push	{r3, lr}
 808079e:	4b02      	ldr	r3, [pc, #8]	; (80807a8 <HAL_Get_Pin_Mode+0xc>)
 80807a0:	681b      	ldr	r3, [r3, #0]
 80807a2:	68db      	ldr	r3, [r3, #12]
 80807a4:	9301      	str	r3, [sp, #4]
 80807a6:	bd08      	pop	{r3, pc}
 80807a8:	080401b0 	.word	0x080401b0

080807ac <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80807ac:	b508      	push	{r3, lr}
 80807ae:	4b02      	ldr	r3, [pc, #8]	; (80807b8 <HAL_DAC_Write+0xc>)
 80807b0:	681b      	ldr	r3, [r3, #0]
 80807b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80807b4:	9301      	str	r3, [sp, #4]
 80807b6:	bd08      	pop	{r3, pc}
 80807b8:	080401b0 	.word	0x080401b0

080807bc <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80807bc:	b508      	push	{r3, lr}
 80807be:	4b02      	ldr	r3, [pc, #8]	; (80807c8 <HAL_ADC_Read+0xc>)
 80807c0:	681b      	ldr	r3, [r3, #0]
 80807c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80807c4:	9301      	str	r3, [sp, #4]
 80807c6:	bd08      	pop	{r3, pc}
 80807c8:	080401b0 	.word	0x080401b0

080807cc <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80807cc:	b508      	push	{r3, lr}
 80807ce:	4b02      	ldr	r3, [pc, #8]	; (80807d8 <HAL_PWM_Write_Ext+0xc>)
 80807d0:	681b      	ldr	r3, [r3, #0]
 80807d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80807d4:	9301      	str	r3, [sp, #4]
 80807d6:	bd08      	pop	{r3, pc}
 80807d8:	080401b0 	.word	0x080401b0

080807dc <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80807dc:	b508      	push	{r3, lr}
 80807de:	4b02      	ldr	r3, [pc, #8]	; (80807e8 <spark_send_event+0xc>)
 80807e0:	681b      	ldr	r3, [r3, #0]
 80807e2:	6a1b      	ldr	r3, [r3, #32]
 80807e4:	9301      	str	r3, [sp, #4]
 80807e6:	bd08      	pop	{r3, pc}
 80807e8:	080401cc 	.word	0x080401cc

080807ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80807ec:	b508      	push	{r3, lr}
 80807ee:	4b02      	ldr	r3, [pc, #8]	; (80807f8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80807f0:	681b      	ldr	r3, [r3, #0]
 80807f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80807f4:	9301      	str	r3, [sp, #4]
 80807f6:	bd08      	pop	{r3, pc}
 80807f8:	080401cc 	.word	0x080401cc

080807fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80807fc:	b508      	push	{r3, lr}
 80807fe:	4b02      	ldr	r3, [pc, #8]	; (8080808 <network_connect+0xc>)
 8080800:	681b      	ldr	r3, [r3, #0]
 8080802:	685b      	ldr	r3, [r3, #4]
 8080804:	9301      	str	r3, [sp, #4]
 8080806:	bd08      	pop	{r3, pc}
 8080808:	080401c8 	.word	0x080401c8

0808080c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808080c:	b508      	push	{r3, lr}
 808080e:	4b02      	ldr	r3, [pc, #8]	; (8080818 <network_connecting+0xc>)
 8080810:	681b      	ldr	r3, [r3, #0]
 8080812:	689b      	ldr	r3, [r3, #8]
 8080814:	9301      	str	r3, [sp, #4]
 8080816:	bd08      	pop	{r3, pc}
 8080818:	080401c8 	.word	0x080401c8

0808081c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808081c:	b508      	push	{r3, lr}
 808081e:	4b02      	ldr	r3, [pc, #8]	; (8080828 <network_disconnect+0xc>)
 8080820:	681b      	ldr	r3, [r3, #0]
 8080822:	68db      	ldr	r3, [r3, #12]
 8080824:	9301      	str	r3, [sp, #4]
 8080826:	bd08      	pop	{r3, pc}
 8080828:	080401c8 	.word	0x080401c8

0808082c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808082c:	b508      	push	{r3, lr}
 808082e:	4b02      	ldr	r3, [pc, #8]	; (8080838 <network_ready+0xc>)
 8080830:	681b      	ldr	r3, [r3, #0]
 8080832:	691b      	ldr	r3, [r3, #16]
 8080834:	9301      	str	r3, [sp, #4]
 8080836:	bd08      	pop	{r3, pc}
 8080838:	080401c8 	.word	0x080401c8

0808083c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808083c:	b508      	push	{r3, lr}
 808083e:	4b02      	ldr	r3, [pc, #8]	; (8080848 <network_on+0xc>)
 8080840:	681b      	ldr	r3, [r3, #0]
 8080842:	695b      	ldr	r3, [r3, #20]
 8080844:	9301      	str	r3, [sp, #4]
 8080846:	bd08      	pop	{r3, pc}
 8080848:	080401c8 	.word	0x080401c8

0808084c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808084c:	b508      	push	{r3, lr}
 808084e:	4b02      	ldr	r3, [pc, #8]	; (8080858 <network_off+0xc>)
 8080850:	681b      	ldr	r3, [r3, #0]
 8080852:	699b      	ldr	r3, [r3, #24]
 8080854:	9301      	str	r3, [sp, #4]
 8080856:	bd08      	pop	{r3, pc}
 8080858:	080401c8 	.word	0x080401c8

0808085c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808085c:	b508      	push	{r3, lr}
 808085e:	4b02      	ldr	r3, [pc, #8]	; (8080868 <network_listen+0xc>)
 8080860:	681b      	ldr	r3, [r3, #0]
 8080862:	69db      	ldr	r3, [r3, #28]
 8080864:	9301      	str	r3, [sp, #4]
 8080866:	bd08      	pop	{r3, pc}
 8080868:	080401c8 	.word	0x080401c8

0808086c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808086c:	b508      	push	{r3, lr}
 808086e:	4b02      	ldr	r3, [pc, #8]	; (8080878 <network_listening+0xc>)
 8080870:	681b      	ldr	r3, [r3, #0]
 8080872:	6a1b      	ldr	r3, [r3, #32]
 8080874:	9301      	str	r3, [sp, #4]
 8080876:	bd08      	pop	{r3, pc}
 8080878:	080401c8 	.word	0x080401c8

0808087c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808087c:	b508      	push	{r3, lr}
 808087e:	4b02      	ldr	r3, [pc, #8]	; (8080888 <network_set_listen_timeout+0xc>)
 8080880:	681b      	ldr	r3, [r3, #0]
 8080882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080884:	9301      	str	r3, [sp, #4]
 8080886:	bd08      	pop	{r3, pc}
 8080888:	080401c8 	.word	0x080401c8

0808088c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808088c:	b508      	push	{r3, lr}
 808088e:	4b02      	ldr	r3, [pc, #8]	; (8080898 <network_get_listen_timeout+0xc>)
 8080890:	681b      	ldr	r3, [r3, #0]
 8080892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080894:	9301      	str	r3, [sp, #4]
 8080896:	bd08      	pop	{r3, pc}
 8080898:	080401c8 	.word	0x080401c8

0808089c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808089c:	b508      	push	{r3, lr}
 808089e:	4b02      	ldr	r3, [pc, #8]	; (80808a8 <set_system_mode+0xc>)
 80808a0:	681b      	ldr	r3, [r3, #0]
 80808a2:	685b      	ldr	r3, [r3, #4]
 80808a4:	9301      	str	r3, [sp, #4]
 80808a6:	bd08      	pop	{r3, pc}
 80808a8:	080401a4 	.word	0x080401a4

080808ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80808ac:	b508      	push	{r3, lr}
 80808ae:	4b02      	ldr	r3, [pc, #8]	; (80808b8 <system_delay_ms+0xc>)
 80808b0:	681b      	ldr	r3, [r3, #0]
 80808b2:	695b      	ldr	r3, [r3, #20]
 80808b4:	9301      	str	r3, [sp, #4]
 80808b6:	bd08      	pop	{r3, pc}
 80808b8:	080401a4 	.word	0x080401a4

080808bc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80808bc:	b508      	push	{r3, lr}
 80808be:	4b02      	ldr	r3, [pc, #8]	; (80808c8 <application_thread_current+0xc>)
 80808c0:	681b      	ldr	r3, [r3, #0]
 80808c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80808c4:	9301      	str	r3, [sp, #4]
 80808c6:	bd08      	pop	{r3, pc}
 80808c8:	080401a4 	.word	0x080401a4

080808cc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80808cc:	b508      	push	{r3, lr}
 80808ce:	4b02      	ldr	r3, [pc, #8]	; (80808d8 <application_thread_invoke+0xc>)
 80808d0:	681b      	ldr	r3, [r3, #0]
 80808d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80808d4:	9301      	str	r3, [sp, #4]
 80808d6:	bd08      	pop	{r3, pc}
 80808d8:	080401a4 	.word	0x080401a4

080808dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80808dc:	b508      	push	{r3, lr}
 80808de:	4b03      	ldr	r3, [pc, #12]	; (80808ec <system_ctrl_set_app_request_handler+0x10>)
 80808e0:	681b      	ldr	r3, [r3, #0]
 80808e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80808e6:	9301      	str	r3, [sp, #4]
 80808e8:	bd08      	pop	{r3, pc}
 80808ea:	0000      	.short	0x0000
 80808ec:	080401a4 	.word	0x080401a4

080808f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80808f0:	b508      	push	{r3, lr}
 80808f2:	4b03      	ldr	r3, [pc, #12]	; (8080900 <system_ctrl_set_result+0x10>)
 80808f4:	681b      	ldr	r3, [r3, #0]
 80808f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80808fa:	9301      	str	r3, [sp, #4]
 80808fc:	bd08      	pop	{r3, pc}
 80808fe:	0000      	.short	0x0000
 8080900:	080401a4 	.word	0x080401a4

08080904 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080904:	b508      	push	{r3, lr}
 8080906:	4b02      	ldr	r3, [pc, #8]	; (8080910 <malloc+0xc>)
 8080908:	681b      	ldr	r3, [r3, #0]
 808090a:	681b      	ldr	r3, [r3, #0]
 808090c:	9301      	str	r3, [sp, #4]
 808090e:	bd08      	pop	{r3, pc}
 8080910:	080401a0 	.word	0x080401a0

08080914 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080914:	b508      	push	{r3, lr}
 8080916:	4b02      	ldr	r3, [pc, #8]	; (8080920 <free+0xc>)
 8080918:	681b      	ldr	r3, [r3, #0]
 808091a:	685b      	ldr	r3, [r3, #4]
 808091c:	9301      	str	r3, [sp, #4]
 808091e:	bd08      	pop	{r3, pc}
 8080920:	080401a0 	.word	0x080401a0

08080924 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8080924:	b508      	push	{r3, lr}
 8080926:	4b02      	ldr	r3, [pc, #8]	; (8080930 <realloc+0xc>)
 8080928:	681b      	ldr	r3, [r3, #0]
 808092a:	689b      	ldr	r3, [r3, #8]
 808092c:	9301      	str	r3, [sp, #4]
 808092e:	bd08      	pop	{r3, pc}
 8080930:	080401a0 	.word	0x080401a0

08080934 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8080934:	b508      	push	{r3, lr}
 8080936:	4b02      	ldr	r3, [pc, #8]	; (8080940 <abort+0xc>)
 8080938:	681b      	ldr	r3, [r3, #0]
 808093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808093c:	9301      	str	r3, [sp, #4]
 808093e:	bd08      	pop	{r3, pc}
 8080940:	080401a0 	.word	0x080401a0

08080944 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8080944:	b508      	push	{r3, lr}
 8080946:	4b02      	ldr	r3, [pc, #8]	; (8080950 <_malloc_r+0xc>)
 8080948:	681b      	ldr	r3, [r3, #0]
 808094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808094c:	9301      	str	r3, [sp, #4]
 808094e:	bd08      	pop	{r3, pc}
 8080950:	080401a0 	.word	0x080401a0

08080954 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8080954:	b510      	push	{r4, lr}
 8080956:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 8080958:	6803      	ldr	r3, [r0, #0]
 808095a:	689b      	ldr	r3, [r3, #8]
 808095c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808095e:	68a3      	ldr	r3, [r4, #8]
 8080960:	3b01      	subs	r3, #1
 8080962:	60a3      	str	r3, [r4, #8]
 8080964:	b92b      	cbnz	r3, 8080972 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
 8080966:	6823      	ldr	r3, [r4, #0]
 8080968:	4620      	mov	r0, r4
        }
    }
 808096a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 808096e:	68db      	ldr	r3, [r3, #12]
 8080970:	4718      	bx	r3
 8080972:	bd10      	pop	{r4, pc}

08080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080974:	b510      	push	{r4, lr}
 8080976:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
 8080978:	6800      	ldr	r0, [r0, #0]
 808097a:	b128      	cbz	r0, 8080988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808097c:	6843      	ldr	r3, [r0, #4]
 808097e:	3b01      	subs	r3, #1
 8080980:	6043      	str	r3, [r0, #4]
 8080982:	b90b      	cbnz	r3, 8080988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
 8080984:	f7ff ffe6 	bl	8080954 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080988:	4620      	mov	r0, r4
 808098a:	bd10      	pop	{r4, pc}

0808098c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808098c:	2300      	movs	r3, #0
 808098e:	461a      	mov	r2, r3
 8080990:	6840      	ldr	r0, [r0, #4]
 8080992:	f7ff bf33 	b.w	80807fc <network_connect>

08080996 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8080996:	2200      	movs	r2, #0
 8080998:	2102      	movs	r1, #2
 808099a:	6840      	ldr	r0, [r0, #4]
 808099c:	f7ff bf3e 	b.w	808081c <network_disconnect>

080809a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80809a0:	2200      	movs	r2, #0
 80809a2:	4611      	mov	r1, r2
 80809a4:	6840      	ldr	r0, [r0, #4]
 80809a6:	f7ff bf31 	b.w	808080c <network_connecting>

080809aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80809aa:	2200      	movs	r2, #0
 80809ac:	4611      	mov	r1, r2
 80809ae:	6840      	ldr	r0, [r0, #4]
 80809b0:	f7ff bf3c 	b.w	808082c <network_ready>

080809b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80809b4:	2300      	movs	r3, #0
 80809b6:	461a      	mov	r2, r3
 80809b8:	4619      	mov	r1, r3
 80809ba:	6840      	ldr	r0, [r0, #4]
 80809bc:	f7ff bf3e 	b.w	808083c <network_on>

080809c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80809c0:	2300      	movs	r3, #0
 80809c2:	461a      	mov	r2, r3
 80809c4:	4619      	mov	r1, r3
 80809c6:	6840      	ldr	r0, [r0, #4]
 80809c8:	f7ff bf40 	b.w	808084c <network_off>

080809cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80809cc:	2200      	movs	r2, #0
 80809ce:	f081 0101 	eor.w	r1, r1, #1
 80809d2:	6840      	ldr	r0, [r0, #4]
 80809d4:	f7ff bf42 	b.w	808085c <network_listen>

080809d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80809d8:	2200      	movs	r2, #0
 80809da:	6840      	ldr	r0, [r0, #4]
 80809dc:	f7ff bf4e 	b.w	808087c <network_set_listen_timeout>

080809e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80809e0:	2200      	movs	r2, #0
 80809e2:	4611      	mov	r1, r2
 80809e4:	6840      	ldr	r0, [r0, #4]
 80809e6:	f7ff bf51 	b.w	808088c <network_get_listen_timeout>

080809ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80809ea:	2200      	movs	r2, #0
 80809ec:	4611      	mov	r1, r2
 80809ee:	6840      	ldr	r0, [r0, #4]
 80809f0:	f7ff bf3c 	b.w	808086c <network_listening>

080809f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80809f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80809f6:	4617      	mov	r7, r2
 80809f8:	b087      	sub	sp, #28
 80809fa:	4605      	mov	r5, r0
    IPAddress addr;
 80809fc:	a804      	add	r0, sp, #16
 80809fe:	f000 fa3f 	bl	8080e80 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8080a02:	2600      	movs	r6, #0
 8080a04:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080a06:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8080a08:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080a0c:	f002 fb1b 	bl	8083046 <strlen>
 8080a10:	4b0a      	ldr	r3, [pc, #40]	; (8080a3c <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8080a12:	9600      	str	r6, [sp, #0]
 8080a14:	b281      	uxth	r1, r0
 8080a16:	685b      	ldr	r3, [r3, #4]
 8080a18:	4622      	mov	r2, r4
 8080a1a:	4638      	mov	r0, r7
 8080a1c:	f7ff fe06 	bl	808062c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080a20:	b120      	cbz	r0, 8080a2c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8080a22:	4631      	mov	r1, r6
 8080a24:	4628      	mov	r0, r5
 8080a26:	f000 fa3b 	bl	8080ea0 <_ZN9IPAddressC1Em>
 8080a2a:	e003      	b.n	8080a34 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8080a2c:	4621      	mov	r1, r4
 8080a2e:	4628      	mov	r0, r5
 8080a30:	f000 fa2e 	bl	8080e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8080a34:	4628      	mov	r0, r5
 8080a36:	b007      	add	sp, #28
 8080a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080a3a:	bf00      	nop
 8080a3c:	200006cc 	.word	0x200006cc

08080a40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8080a40:	4b02      	ldr	r3, [pc, #8]	; (8080a4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8080a42:	4a03      	ldr	r2, [pc, #12]	; (8080a50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8080a44:	601a      	str	r2, [r3, #0]
 8080a46:	2200      	movs	r2, #0
 8080a48:	605a      	str	r2, [r3, #4]
 8080a4a:	4770      	bx	lr
 8080a4c:	200005a4 	.word	0x200005a4
 8080a50:	0808310c 	.word	0x0808310c

08080a54 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8080a54:	4770      	bx	lr

08080a56 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8080a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080a58:	4606      	mov	r6, r0
 8080a5a:	4615      	mov	r5, r2
 8080a5c:	460c      	mov	r4, r1
 8080a5e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8080a60:	42bc      	cmp	r4, r7
 8080a62:	d006      	beq.n	8080a72 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8080a64:	6833      	ldr	r3, [r6, #0]
 8080a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8080a6a:	689b      	ldr	r3, [r3, #8]
 8080a6c:	4630      	mov	r0, r6
 8080a6e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8080a70:	e7f6      	b.n	8080a60 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8080a72:	4628      	mov	r0, r5
 8080a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080a76 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8080a76:	2200      	movs	r2, #0
 8080a78:	7c00      	ldrb	r0, [r0, #16]
 8080a7a:	f7ff bddf 	b.w	808063c <HAL_I2C_Write_Data>

08080a7e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8080a7e:	2100      	movs	r1, #0
 8080a80:	7c00      	ldrb	r0, [r0, #16]
 8080a82:	f7ff bde3 	b.w	808064c <HAL_I2C_Available_Data>

08080a86 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8080a86:	2100      	movs	r1, #0
 8080a88:	7c00      	ldrb	r0, [r0, #16]
 8080a8a:	f7ff bde7 	b.w	808065c <HAL_I2C_Read_Data>

08080a8e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8080a8e:	2100      	movs	r1, #0
 8080a90:	7c00      	ldrb	r0, [r0, #16]
 8080a92:	f7ff bdeb 	b.w	808066c <HAL_I2C_Peek_Data>

08080a96 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8080a96:	2100      	movs	r1, #0
 8080a98:	7c00      	ldrb	r0, [r0, #16]
 8080a9a:	f7ff bdef 	b.w	808067c <HAL_I2C_Flush_Data>

08080a9e <_ZN7TwoWireD0Ev>:
 8080a9e:	b510      	push	{r4, lr}
 8080aa0:	4604      	mov	r4, r0
 8080aa2:	f7ff fafc 	bl	808009e <_ZdlPv>
 8080aa6:	4620      	mov	r0, r4
 8080aa8:	bd10      	pop	{r4, pc}
	...

08080aac <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080aac:	b510      	push	{r4, lr}
 8080aae:	4604      	mov	r4, r0
 8080ab0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080ab6:	60a3      	str	r3, [r4, #8]
 8080ab8:	4b04      	ldr	r3, [pc, #16]	; (8080acc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080aba:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8080abc:	7420      	strb	r0, [r4, #16]
 8080abe:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080ac0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8080ac2:	f7ff fdeb 	bl	808069c <HAL_I2C_Init>

}
 8080ac6:	4620      	mov	r0, r4
 8080ac8:	bd10      	pop	{r4, pc}
 8080aca:	bf00      	nop
 8080acc:	08083140 	.word	0x08083140

08080ad0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8080ad0:	2100      	movs	r1, #0
 8080ad2:	7c00      	ldrb	r0, [r0, #16]
 8080ad4:	f7ff bdda 	b.w	808068c <HAL_I2C_Is_Enabled>

08080ad8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8080ad8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080ada:	6883      	ldr	r3, [r0, #8]
 8080adc:	4604      	mov	r4, r0
 8080ade:	b90b      	cbnz	r3, 8080ae4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8080ae0:	f000 ffee 	bl	8081ac0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ae4:	68c3      	ldr	r3, [r0, #12]
 8080ae6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8080ae8:	68a3      	ldr	r3, [r4, #8]
 8080aea:	b11b      	cbz	r3, 8080af4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080aec:	2203      	movs	r2, #3
 8080aee:	4621      	mov	r1, r4
 8080af0:	4620      	mov	r0, r4
 8080af2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080af4:	4620      	mov	r0, r4
}
 8080af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080afa:	f7ff bad0 	b.w	808009e <_ZdlPv>

08080afe <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080afe:	4770      	bx	lr

08080b00 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080b00:	7441      	strb	r1, [r0, #17]
 8080b02:	4770      	bx	lr

08080b04 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 8080b04:	7c00      	ldrb	r0, [r0, #16]
 8080b06:	f7ff be09 	b.w	808071c <HAL_USART_Available_Data_For_Write>

08080b0a <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8080b0a:	7c00      	ldrb	r0, [r0, #16]
 8080b0c:	f7ff bdde 	b.w	80806cc <HAL_USART_Available_Data>

08080b10 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8080b10:	7c00      	ldrb	r0, [r0, #16]
 8080b12:	f7ff bdeb 	b.w	80806ec <HAL_USART_Peek_Data>

08080b16 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8080b16:	7c00      	ldrb	r0, [r0, #16]
 8080b18:	f7ff bde0 	b.w	80806dc <HAL_USART_Read_Data>

08080b1c <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8080b1c:	7c00      	ldrb	r0, [r0, #16]
 8080b1e:	f7ff bded 	b.w	80806fc <HAL_USART_Flush_Data>

08080b22 <_ZN11USARTSerialD0Ev>:
 8080b22:	b510      	push	{r4, lr}
 8080b24:	4604      	mov	r4, r0
 8080b26:	f7ff faba 	bl	808009e <_ZdlPv>
 8080b2a:	4620      	mov	r0, r4
 8080b2c:	bd10      	pop	{r4, pc}

08080b2e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8080b2e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8080b30:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8080b32:	4604      	mov	r4, r0
 8080b34:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8080b36:	b925      	cbnz	r5, 8080b42 <_ZN11USARTSerial5writeEh+0x14>
 8080b38:	7c00      	ldrb	r0, [r0, #16]
 8080b3a:	f7ff fdef 	bl	808071c <HAL_USART_Available_Data_For_Write>
 8080b3e:	2800      	cmp	r0, #0
 8080b40:	dd05      	ble.n	8080b4e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8080b42:	4631      	mov	r1, r6
 8080b44:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8080b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8080b4a:	f7ff bdb7 	b.w	80806bc <HAL_USART_Write_Data>
  }
  return 0;
}
 8080b4e:	4628      	mov	r0, r5
 8080b50:	bd70      	pop	{r4, r5, r6, pc}
	...

08080b54 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8080b54:	b510      	push	{r4, lr}
 8080b56:	4604      	mov	r4, r0
 8080b58:	4608      	mov	r0, r1
 8080b5a:	4611      	mov	r1, r2
 8080b5c:	2200      	movs	r2, #0
 8080b5e:	6062      	str	r2, [r4, #4]
 8080b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080b64:	60a2      	str	r2, [r4, #8]
 8080b66:	4a05      	ldr	r2, [pc, #20]	; (8080b7c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8080b68:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8080b6a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8080b6c:	2201      	movs	r2, #1
 8080b6e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8080b70:	461a      	mov	r2, r3
 8080b72:	f7ff fd9b 	bl	80806ac <HAL_USART_Init>
}
 8080b76:	4620      	mov	r0, r4
 8080b78:	bd10      	pop	{r4, pc}
 8080b7a:	bf00      	nop
 8080b7c:	08083168 	.word	0x08083168

08080b80 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8080b80:	7c00      	ldrb	r0, [r0, #16]
 8080b82:	f7ff bdc3 	b.w	808070c <HAL_USART_Is_Enabled>
	...

08080b88 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8080b88:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8080b8a:	4d0c      	ldr	r5, [pc, #48]	; (8080bbc <_Z22__fetch_global_Serial1v+0x34>)
 8080b8c:	6829      	ldr	r1, [r5, #0]
 8080b8e:	f011 0401 	ands.w	r4, r1, #1
 8080b92:	d111      	bne.n	8080bb8 <_Z22__fetch_global_Serial1v+0x30>
 8080b94:	4628      	mov	r0, r5
 8080b96:	f7ff fa84 	bl	80800a2 <__cxa_guard_acquire>
 8080b9a:	b168      	cbz	r0, 8080bb8 <_Z22__fetch_global_Serial1v+0x30>
 8080b9c:	4a08      	ldr	r2, [pc, #32]	; (8080bc0 <_Z22__fetch_global_Serial1v+0x38>)
 8080b9e:	4621      	mov	r1, r4
 8080ba0:	4b08      	ldr	r3, [pc, #32]	; (8080bc4 <_Z22__fetch_global_Serial1v+0x3c>)
 8080ba2:	4809      	ldr	r0, [pc, #36]	; (8080bc8 <_Z22__fetch_global_Serial1v+0x40>)
 8080ba4:	f7ff ffd6 	bl	8080b54 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080ba8:	4628      	mov	r0, r5
 8080baa:	f7ff fa7f 	bl	80800ac <__cxa_guard_release>
 8080bae:	4a07      	ldr	r2, [pc, #28]	; (8080bcc <_Z22__fetch_global_Serial1v+0x44>)
 8080bb0:	4907      	ldr	r1, [pc, #28]	; (8080bd0 <_Z22__fetch_global_Serial1v+0x48>)
 8080bb2:	4805      	ldr	r0, [pc, #20]	; (8080bc8 <_Z22__fetch_global_Serial1v+0x40>)
 8080bb4:	f000 ff7f 	bl	8081ab6 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8080bb8:	4803      	ldr	r0, [pc, #12]	; (8080bc8 <_Z22__fetch_global_Serial1v+0x40>)
 8080bba:	bd38      	pop	{r3, r4, r5, pc}
 8080bbc:	20000644 	.word	0x20000644
 8080bc0:	20000648 	.word	0x20000648
 8080bc4:	200005c0 	.word	0x200005c0
 8080bc8:	200005ac 	.word	0x200005ac
 8080bcc:	20000484 	.word	0x20000484
 8080bd0:	08080aff 	.word	0x08080aff

08080bd4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080bd4:	2200      	movs	r2, #0
 8080bd6:	4611      	mov	r1, r2
 8080bd8:	6840      	ldr	r0, [r0, #4]
 8080bda:	f7ff be27 	b.w	808082c <network_ready>

08080bde <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080bde:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8080be2:	2600      	movs	r6, #0
 8080be4:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080be6:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080be8:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080bea:	4688      	mov	r8, r1
 8080bec:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8080bee:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080bf2:	f002 fa28 	bl	8083046 <strlen>
 8080bf6:	9600      	str	r6, [sp, #0]
 8080bf8:	b281      	uxth	r1, r0
 8080bfa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8080bfe:	4622      	mov	r2, r4
 8080c00:	4638      	mov	r0, r7
 8080c02:	f7ff fd13 	bl	808062c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080c06:	b120      	cbz	r0, 8080c12 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8080c08:	4631      	mov	r1, r6
 8080c0a:	4628      	mov	r0, r5
 8080c0c:	f000 f948 	bl	8080ea0 <_ZN9IPAddressC1Em>
 8080c10:	e003      	b.n	8080c1a <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8080c12:	4621      	mov	r1, r4
 8080c14:	4628      	mov	r0, r5
 8080c16:	f000 f93b 	bl	8080e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8080c1a:	4628      	mov	r0, r5
 8080c1c:	b004      	add	sp, #16
 8080c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080c22 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8080c22:	2200      	movs	r2, #0
 8080c24:	4611      	mov	r1, r2
 8080c26:	6840      	ldr	r0, [r0, #4]
 8080c28:	f7ff be20 	b.w	808086c <network_listening>

08080c2c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8080c2c:	2200      	movs	r2, #0
 8080c2e:	4611      	mov	r1, r2
 8080c30:	6840      	ldr	r0, [r0, #4]
 8080c32:	f7ff be2b 	b.w	808088c <network_get_listen_timeout>

08080c36 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8080c36:	2200      	movs	r2, #0
 8080c38:	6840      	ldr	r0, [r0, #4]
 8080c3a:	f7ff be1f 	b.w	808087c <network_set_listen_timeout>

08080c3e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8080c3e:	2200      	movs	r2, #0
 8080c40:	f081 0101 	eor.w	r1, r1, #1
 8080c44:	6840      	ldr	r0, [r0, #4]
 8080c46:	f7ff be09 	b.w	808085c <network_listen>

08080c4a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080c4a:	2300      	movs	r3, #0
 8080c4c:	461a      	mov	r2, r3
 8080c4e:	4619      	mov	r1, r3
 8080c50:	6840      	ldr	r0, [r0, #4]
 8080c52:	f7ff bdfb 	b.w	808084c <network_off>

08080c56 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080c56:	2300      	movs	r3, #0
 8080c58:	461a      	mov	r2, r3
 8080c5a:	4619      	mov	r1, r3
 8080c5c:	6840      	ldr	r0, [r0, #4]
 8080c5e:	f7ff bded 	b.w	808083c <network_on>

08080c62 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8080c62:	2200      	movs	r2, #0
 8080c64:	4611      	mov	r1, r2
 8080c66:	6840      	ldr	r0, [r0, #4]
 8080c68:	f7ff bdd0 	b.w	808080c <network_connecting>

08080c6c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8080c6c:	2200      	movs	r2, #0
 8080c6e:	2102      	movs	r1, #2
 8080c70:	6840      	ldr	r0, [r0, #4]
 8080c72:	f7ff bdd3 	b.w	808081c <network_disconnect>

08080c76 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8080c76:	2300      	movs	r3, #0
 8080c78:	461a      	mov	r2, r3
 8080c7a:	6840      	ldr	r0, [r0, #4]
 8080c7c:	f7ff bdbe 	b.w	80807fc <network_connect>

08080c80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8080c80:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080c82:	4c0c      	ldr	r4, [pc, #48]	; (8080cb4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8080c84:	2528      	movs	r5, #40	; 0x28
 8080c86:	462a      	mov	r2, r5
 8080c88:	2100      	movs	r1, #0
 8080c8a:	4620      	mov	r0, r4
 8080c8c:	f002 f977 	bl	8082f7e <memset>
        cid = -1;
 8080c90:	f04f 33ff 	mov.w	r3, #4294967295
 8080c94:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 8080c96:	8025      	strh	r5, [r4, #0]
 8080c98:	4c07      	ldr	r4, [pc, #28]	; (8080cb8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8080c9a:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8080c9c:	4620      	mov	r0, r4
 8080c9e:	6063      	str	r3, [r4, #4]
 8080ca0:	4b06      	ldr	r3, [pc, #24]	; (8080cbc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8080ca2:	252c      	movs	r5, #44	; 0x2c
 8080ca4:	f840 3b08 	str.w	r3, [r0], #8
 8080ca8:	462a      	mov	r2, r5
 8080caa:	2100      	movs	r1, #0
 8080cac:	f002 f967 	bl	8082f7e <memset>
        size = sizeof(*this);
 8080cb0:	8125      	strh	r5, [r4, #8]
 8080cb2:	bd38      	pop	{r3, r4, r5, pc}
 8080cb4:	20000700 	.word	0x20000700
 8080cb8:	200006cc 	.word	0x200006cc
 8080cbc:	08083198 	.word	0x08083198

08080cc0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080cc0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080cc2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080cc4:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080cc6:	b113      	cbz	r3, 8080cce <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080cc8:	2203      	movs	r2, #3
 8080cca:	4601      	mov	r1, r0
 8080ccc:	4798      	blx	r3
    }
 8080cce:	4620      	mov	r0, r4
 8080cd0:	bd10      	pop	{r4, pc}

08080cd2 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8080cd2:	7441      	strb	r1, [r0, #17]
 8080cd4:	4770      	bx	lr

08080cd6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8080cd6:	4770      	bx	lr

08080cd8 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8080cd8:	2100      	movs	r1, #0
 8080cda:	7c00      	ldrb	r0, [r0, #16]
 8080cdc:	f7ff bc8e 	b.w	80805fc <HAL_USB_USART_Receive_Data>

08080ce0 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8080ce0:	2101      	movs	r1, #1
 8080ce2:	7c00      	ldrb	r0, [r0, #16]
 8080ce4:	f7ff bc8a 	b.w	80805fc <HAL_USB_USART_Receive_Data>

08080ce8 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8080ce8:	7c00      	ldrb	r0, [r0, #16]
 8080cea:	f7ff bc7f 	b.w	80805ec <HAL_USB_USART_Available_Data_For_Write>

08080cee <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8080cee:	7c00      	ldrb	r0, [r0, #16]
 8080cf0:	f7ff bc74 	b.w	80805dc <HAL_USB_USART_Available_Data>

08080cf4 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8080cf4:	b538      	push	{r3, r4, r5, lr}
 8080cf6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080cf8:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8080cfa:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8080cfc:	f7ff fc76 	bl	80805ec <HAL_USB_USART_Available_Data_For_Write>
 8080d00:	2800      	cmp	r0, #0
 8080d02:	dc01      	bgt.n	8080d08 <_ZN9USBSerial5writeEh+0x14>
 8080d04:	7c60      	ldrb	r0, [r4, #17]
 8080d06:	b120      	cbz	r0, 8080d12 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8080d08:	4629      	mov	r1, r5
 8080d0a:	7c20      	ldrb	r0, [r4, #16]
 8080d0c:	f7ff fc7e 	bl	808060c <HAL_USB_USART_Send_Data>
    return 1;
 8080d10:	2001      	movs	r0, #1
  }
  return 0;
}
 8080d12:	bd38      	pop	{r3, r4, r5, pc}

08080d14 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8080d14:	7c00      	ldrb	r0, [r0, #16]
 8080d16:	f7ff bc81 	b.w	808061c <HAL_USB_USART_Flush_Data>

08080d1a <_ZN9USBSerialD0Ev>:
 8080d1a:	b510      	push	{r4, lr}
 8080d1c:	4604      	mov	r4, r0
 8080d1e:	f7ff f9be 	bl	808009e <_ZdlPv>
 8080d22:	4620      	mov	r0, r4
 8080d24:	bd10      	pop	{r4, pc}
	...

08080d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8080d28:	b510      	push	{r4, lr}
 8080d2a:	4604      	mov	r4, r0
 8080d2c:	2300      	movs	r3, #0
 8080d2e:	6063      	str	r3, [r4, #4]
 8080d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080d34:	60a3      	str	r3, [r4, #8]
 8080d36:	4b05      	ldr	r3, [pc, #20]	; (8080d4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8080d38:	4608      	mov	r0, r1
 8080d3a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8080d3c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8080d3e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8080d40:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8080d42:	4611      	mov	r1, r2
 8080d44:	f7ff fc42 	bl	80805cc <HAL_USB_USART_Init>
}
 8080d48:	4620      	mov	r0, r4
 8080d4a:	bd10      	pop	{r4, pc}
 8080d4c:	080831cc 	.word	0x080831cc

08080d50 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8080d50:	b510      	push	{r4, lr}
 8080d52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080d54:	2214      	movs	r2, #20
 8080d56:	2100      	movs	r1, #0
 8080d58:	f002 f911 	bl	8082f7e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080d5c:	4b05      	ldr	r3, [pc, #20]	; (8080d74 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080d5e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8080d60:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8080d62:	4b05      	ldr	r3, [pc, #20]	; (8080d78 <_Z19acquireSerialBufferv+0x28>)
 8080d64:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080d66:	f240 1301 	movw	r3, #257	; 0x101
 8080d6a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080d6c:	2381      	movs	r3, #129	; 0x81
 8080d6e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8080d70:	bd10      	pop	{r4, pc}
 8080d72:	bf00      	nop
 8080d74:	200007ad 	.word	0x200007ad
 8080d78:	2000072c 	.word	0x2000072c

08080d7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8080d7c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080d7e:	4d0e      	ldr	r5, [pc, #56]	; (8080db8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8080d80:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8080d82:	a801      	add	r0, sp, #4
 8080d84:	f7ff ffe4 	bl	8080d50 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8080d88:	6829      	ldr	r1, [r5, #0]
 8080d8a:	f011 0401 	ands.w	r4, r1, #1
 8080d8e:	d110      	bne.n	8080db2 <_Z16_fetch_usbserialv+0x36>
 8080d90:	4628      	mov	r0, r5
 8080d92:	f7ff f986 	bl	80800a2 <__cxa_guard_acquire>
 8080d96:	b160      	cbz	r0, 8080db2 <_Z16_fetch_usbserialv+0x36>
 8080d98:	aa01      	add	r2, sp, #4
 8080d9a:	4621      	mov	r1, r4
 8080d9c:	4807      	ldr	r0, [pc, #28]	; (8080dbc <_Z16_fetch_usbserialv+0x40>)
 8080d9e:	f7ff ffc3 	bl	8080d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080da2:	4628      	mov	r0, r5
 8080da4:	f7ff f982 	bl	80800ac <__cxa_guard_release>
 8080da8:	4a05      	ldr	r2, [pc, #20]	; (8080dc0 <_Z16_fetch_usbserialv+0x44>)
 8080daa:	4906      	ldr	r1, [pc, #24]	; (8080dc4 <_Z16_fetch_usbserialv+0x48>)
 8080dac:	4803      	ldr	r0, [pc, #12]	; (8080dbc <_Z16_fetch_usbserialv+0x40>)
 8080dae:	f000 fe82 	bl	8081ab6 <__aeabi_atexit>
	return _usbserial;
}
 8080db2:	4802      	ldr	r0, [pc, #8]	; (8080dbc <_Z16_fetch_usbserialv+0x40>)
 8080db4:	b007      	add	sp, #28
 8080db6:	bd30      	pop	{r4, r5, pc}
 8080db8:	20000728 	.word	0x20000728
 8080dbc:	200008b0 	.word	0x200008b0
 8080dc0:	20000484 	.word	0x20000484
 8080dc4:	08080cd7 	.word	0x08080cd7

08080dc8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8080dc8:	b510      	push	{r4, lr}
 8080dca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8080dcc:	2214      	movs	r2, #20
 8080dce:	2100      	movs	r1, #0
 8080dd0:	f002 f8d5 	bl	8082f7e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8080dd4:	4b05      	ldr	r3, [pc, #20]	; (8080dec <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8080dd6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8080dd8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8080dda:	4b05      	ldr	r3, [pc, #20]	; (8080df0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8080ddc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8080dde:	f240 1301 	movw	r3, #257	; 0x101
 8080de2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8080de4:	2381      	movs	r3, #129	; 0x81
 8080de6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8080de8:	bd10      	pop	{r4, pc}
 8080dea:	bf00      	nop
 8080dec:	20000960 	.word	0x20000960
 8080df0:	200008c8 	.word	0x200008c8

08080df4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8080df4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080df6:	4c0e      	ldr	r4, [pc, #56]	; (8080e30 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8080df8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8080dfa:	a801      	add	r0, sp, #4
 8080dfc:	f7ff ffe4 	bl	8080dc8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8080e00:	6823      	ldr	r3, [r4, #0]
 8080e02:	07db      	lsls	r3, r3, #31
 8080e04:	d410      	bmi.n	8080e28 <_Z17_fetch_usbserial1v+0x34>
 8080e06:	4620      	mov	r0, r4
 8080e08:	f7ff f94b 	bl	80800a2 <__cxa_guard_acquire>
 8080e0c:	b160      	cbz	r0, 8080e28 <_Z17_fetch_usbserial1v+0x34>
 8080e0e:	aa01      	add	r2, sp, #4
 8080e10:	2101      	movs	r1, #1
 8080e12:	4808      	ldr	r0, [pc, #32]	; (8080e34 <_Z17_fetch_usbserial1v+0x40>)
 8080e14:	f7ff ff88 	bl	8080d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8080e18:	4620      	mov	r0, r4
 8080e1a:	f7ff f947 	bl	80800ac <__cxa_guard_release>
 8080e1e:	4a06      	ldr	r2, [pc, #24]	; (8080e38 <_Z17_fetch_usbserial1v+0x44>)
 8080e20:	4906      	ldr	r1, [pc, #24]	; (8080e3c <_Z17_fetch_usbserial1v+0x48>)
 8080e22:	4804      	ldr	r0, [pc, #16]	; (8080e34 <_Z17_fetch_usbserial1v+0x40>)
 8080e24:	f000 fe47 	bl	8081ab6 <__aeabi_atexit>
  return _usbserial1;
}
 8080e28:	4802      	ldr	r0, [pc, #8]	; (8080e34 <_Z17_fetch_usbserial1v+0x40>)
 8080e2a:	b006      	add	sp, #24
 8080e2c:	bd10      	pop	{r4, pc}
 8080e2e:	bf00      	nop
 8080e30:	200008c4 	.word	0x200008c4
 8080e34:	2000094c 	.word	0x2000094c
 8080e38:	20000484 	.word	0x20000484
 8080e3c:	08080cd7 	.word	0x08080cd7

08080e40 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080e40:	4770      	bx	lr

08080e42 <_ZN9IPAddressD0Ev>:
 8080e42:	b510      	push	{r4, lr}
 8080e44:	4604      	mov	r4, r0
 8080e46:	f7ff f92a 	bl	808009e <_ZdlPv>
 8080e4a:	4620      	mov	r0, r4
 8080e4c:	bd10      	pop	{r4, pc}

08080e4e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080e50:	460f      	mov	r7, r1
 8080e52:	f100 0608 	add.w	r6, r0, #8
 8080e56:	1d05      	adds	r5, r0, #4
 8080e58:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080e5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8080e5e:	220a      	movs	r2, #10
 8080e60:	4638      	mov	r0, r7
 8080e62:	f000 fbfa 	bl	808165a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080e66:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080e68:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080e6a:	d007      	beq.n	8080e7c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8080e6c:	2c00      	cmp	r4, #0
 8080e6e:	d0f4      	beq.n	8080e5a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080e70:	212e      	movs	r1, #46	; 0x2e
 8080e72:	4638      	mov	r0, r7
 8080e74:	f000 fbc4 	bl	8081600 <_ZN5Print5printEc>
 8080e78:	4404      	add	r4, r0
 8080e7a:	e7ee      	b.n	8080e5a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8080e7c:	4620      	mov	r0, r4
 8080e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080e80 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8080e80:	4a02      	ldr	r2, [pc, #8]	; (8080e8c <_ZN9IPAddressC1Ev+0xc>)
 8080e82:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080e84:	2200      	movs	r2, #0
 8080e86:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8080e88:	4770      	bx	lr
 8080e8a:	bf00      	nop
 8080e8c:	080831fc 	.word	0x080831fc

08080e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8080e90:	4a02      	ldr	r2, [pc, #8]	; (8080e9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080e92:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8080e94:	680a      	ldr	r2, [r1, #0]
 8080e96:	6042      	str	r2, [r0, #4]
}
 8080e98:	4770      	bx	lr
 8080e9a:	bf00      	nop
 8080e9c:	080831fc 	.word	0x080831fc

08080ea0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8080ea0:	4a01      	ldr	r2, [pc, #4]	; (8080ea8 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8080ea2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8080ea4:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8080ea6:	4770      	bx	lr
 8080ea8:	080831fc 	.word	0x080831fc

08080eac <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8080eac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080eae:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080eb2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8080eb6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8080eba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8080ebe:	6041      	str	r1, [r0, #4]
 8080ec0:	bd10      	pop	{r4, pc}
	...

08080ec4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080ec6:	4d04      	ldr	r5, [pc, #16]	; (8080ed8 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080ec8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080eca:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080ece:	9500      	str	r5, [sp, #0]
 8080ed0:	f7ff ffec 	bl	8080eac <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080ed4:	b003      	add	sp, #12
 8080ed6:	bd30      	pop	{r4, r5, pc}
 8080ed8:	080831fc 	.word	0x080831fc

08080edc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080edc:	4770      	bx	lr

08080ede <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8080ede:	2000      	movs	r0, #0
 8080ee0:	4770      	bx	lr

08080ee2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080ee2:	b510      	push	{r4, lr}
 8080ee4:	4604      	mov	r4, r0
 8080ee6:	f7ff f8da 	bl	808009e <_ZdlPv>
 8080eea:	4620      	mov	r0, r4
 8080eec:	bd10      	pop	{r4, pc}

08080eee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8080eee:	b508      	push	{r3, lr}
      { delete this; }
 8080ef0:	b108      	cbz	r0, 8080ef6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8080ef2:	f7ff fff6 	bl	8080ee2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8080ef6:	bd08      	pop	{r3, pc}

08080ef8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8080ef8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8080efa:	68c4      	ldr	r4, [r0, #12]
 8080efc:	b1d4      	cbz	r4, 8080f34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8080efe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8080f00:	2b02      	cmp	r3, #2
 8080f02:	d102      	bne.n	8080f0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080f04:	68e0      	ldr	r0, [r4, #12]
 8080f06:	f7ff fd05 	bl	8080914 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8080f0a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8080f0c:	b12d      	cbz	r5, 8080f1a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080f0e:	4628      	mov	r0, r5
 8080f10:	f7ff fed6 	bl	8080cc0 <_ZNSt14_Function_baseD1Ev>
 8080f14:	4628      	mov	r0, r5
 8080f16:	f7ff f8c2 	bl	808009e <_ZdlPv>
 8080f1a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8080f1c:	b12d      	cbz	r5, 8080f2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8080f1e:	4628      	mov	r0, r5
 8080f20:	f7ff fece 	bl	8080cc0 <_ZNSt14_Function_baseD1Ev>
 8080f24:	4628      	mov	r0, r5
 8080f26:	f7ff f8ba 	bl	808009e <_ZdlPv>
 8080f2a:	4620      	mov	r0, r4
 8080f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8080f30:	f7ff b8b5 	b.w	808009e <_ZdlPv>
 8080f34:	bd38      	pop	{r3, r4, r5, pc}

08080f36 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8080f36:	b513      	push	{r0, r1, r4, lr}
 8080f38:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8080f3a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8080f3e:	2300      	movs	r3, #0
 8080f40:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080f42:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080f44:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8080f46:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080f48:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8080f4a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080f4c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080f4e:	f7ff fd11 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080f52:	4620      	mov	r0, r4
 8080f54:	b002      	add	sp, #8
 8080f56:	bd10      	pop	{r4, pc}

08080f58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080f58:	680b      	ldr	r3, [r1, #0]
 8080f5a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080f5c:	b113      	cbz	r3, 8080f64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8080f5e:	685a      	ldr	r2, [r3, #4]
 8080f60:	3201      	adds	r2, #1
 8080f62:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8080f64:	4770      	bx	lr

08080f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8080f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080f68:	460c      	mov	r4, r1
 8080f6a:	4606      	mov	r6, r0
 8080f6c:	460f      	mov	r7, r1
 8080f6e:	f854 3b04 	ldr.w	r3, [r4], #4
 8080f72:	ad02      	add	r5, sp, #8
 8080f74:	f845 3d08 	str.w	r3, [r5, #-8]!
 8080f78:	4621      	mov	r1, r4
 8080f7a:	a801      	add	r0, sp, #4
 8080f7c:	f7ff ffec 	bl	8080f58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8080f80:	4629      	mov	r1, r5
 8080f82:	4630      	mov	r0, r6
 8080f84:	f7ff ffd7 	bl	8080f36 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080f88:	a801      	add	r0, sp, #4
 8080f8a:	f7ff fcf3 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080f8e:	4620      	mov	r0, r4
 8080f90:	f7ff fcf0 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8080f94:	4638      	mov	r0, r7
 8080f96:	f7ff f882 	bl	808009e <_ZdlPv>
        return p;
    }
 8080f9a:	4630      	mov	r0, r6
 8080f9c:	b003      	add	sp, #12
 8080f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080fa0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8080fa0:	b513      	push	{r0, r1, r4, lr}
 8080fa2:	460b      	mov	r3, r1
 8080fa4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080fa6:	c803      	ldmia	r0, {r0, r1}
 8080fa8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8080fac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080fb0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080fb4:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8080fb8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8080fbc:	b002      	add	sp, #8
 8080fbe:	bd10      	pop	{r4, pc}

08080fc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080fc0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080fc2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080fc4:	b90a      	cbnz	r2, 8080fca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8080fc6:	f000 fd7b 	bl	8081ac0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080fca:	68c3      	ldr	r3, [r0, #12]
    }
 8080fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080fd0:	4718      	bx	r3

08080fd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080fd2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080fd4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080fd6:	f100 0110 	add.w	r1, r0, #16
 8080fda:	f7ff fff1 	bl	8080fc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080fde:	bd08      	pop	{r3, pc}

08080fe0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080fe0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080fe2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080fe4:	b90a      	cbnz	r2, 8080fea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8080fe6:	f000 fd6b 	bl	8081ac0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080fea:	68c3      	ldr	r3, [r0, #12]
    }
 8080fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ff0:	4718      	bx	r3

08080ff2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080ff2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080ff4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080ff6:	f100 0110 	add.w	r1, r0, #16
 8080ffa:	f7ff fff1 	bl	8080fe0 <_ZNKSt8functionIFvRKbEEclES1_>
 8080ffe:	bd08      	pop	{r3, pc}

08081000 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081000:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081002:	2300      	movs	r3, #0
 8081004:	6083      	str	r3, [r0, #8]
 8081006:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081008:	4604      	mov	r4, r0
 808100a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808100c:	b12b      	cbz	r3, 808101a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808100e:	2202      	movs	r2, #2
 8081010:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081012:	68eb      	ldr	r3, [r5, #12]
 8081014:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081016:	68ab      	ldr	r3, [r5, #8]
 8081018:	60a3      	str	r3, [r4, #8]
	}
    }
 808101a:	4620      	mov	r0, r4
 808101c:	bd38      	pop	{r3, r4, r5, pc}
	...

08081020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8081020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8081024:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8081028:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808102a:	f04f 0002 	mov.w	r0, #2
 808102e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081030:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081034:	808b      	strh	r3, [r1, #4]
 8081036:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081038:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808103a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 808103e:	600b      	str	r3, [r1, #0]
 8081040:	e8d4 1f4f 	ldrexb	r1, [r4]
 8081044:	4299      	cmp	r1, r3
 8081046:	d103      	bne.n	8081050 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8081048:	e8c4 0f45 	strexb	r5, r0, [r4]
 808104c:	2d00      	cmp	r5, #0
 808104e:	d1f7      	bne.n	8081040 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8081050:	d002      	beq.n	8081058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 8081052:	f88d 1000 	strb.w	r1, [sp]
 8081056:	e06b      	b.n	8081130 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8081058:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808105c:	bf1c      	itt	ne
 808105e:	60e7      	strne	r7, [r4, #12]
 8081060:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081062:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8081066:	bf18      	it	ne
 8081068:	461f      	movne	r7, r3
 808106a:	2301      	movs	r3, #1
 808106c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808106e:	f3bf 8f5f 	dmb	sy
 8081072:	f104 0308 	add.w	r3, r4, #8
 8081076:	2000      	movs	r0, #0
 8081078:	e853 6f00 	ldrex	r6, [r3]
 808107c:	e843 0200 	strex	r2, r0, [r3]
 8081080:	2a00      	cmp	r2, #0
 8081082:	d1f9      	bne.n	8081078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8081084:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081088:	2e00      	cmp	r6, #0
 808108a:	d051      	beq.n	8081130 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808108c:	f7ff fc16 	bl	80808bc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081090:	b120      	cbz	r0, 808109c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081092:	4629      	mov	r1, r5
 8081094:	4630      	mov	r0, r6
 8081096:	f7ff ff93 	bl	8080fc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808109a:	e043      	b.n	8081124 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808109c:	4631      	mov	r1, r6
 808109e:	4668      	mov	r0, sp
 80810a0:	f7ff ffae 	bl	8081000 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80810a4:	68e0      	ldr	r0, [r4, #12]
 80810a6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80810aa:	b108      	cbz	r0, 80810b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80810ac:	f001 ffb0 	bl	8083010 <strdup>
 80810b0:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80810b2:	2010      	movs	r0, #16
 80810b4:	f8ad 5014 	strh.w	r5, [sp, #20]
 80810b8:	f7fe ffef 	bl	808009a <_Znwj>
 80810bc:	4605      	mov	r5, r0
 80810be:	b330      	cbz	r0, 808110e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80810c0:	f04f 0800 	mov.w	r8, #0
 80810c4:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80810c8:	2018      	movs	r0, #24
 80810ca:	f7fe ffe6 	bl	808009a <_Znwj>
 80810ce:	4604      	mov	r4, r0
 80810d0:	b1c0      	cbz	r0, 8081104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80810d2:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80810d6:	4601      	mov	r1, r0
 80810d8:	4668      	mov	r0, sp
 80810da:	f7ff ff61 	bl	8080fa0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80810de:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80810e0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80810e2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80810e4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80810e6:	9202      	str	r2, [sp, #8]
 80810e8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80810ea:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80810ec:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80810f0:	9203      	str	r2, [sp, #12]
 80810f2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80810f4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80810f8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80810fc:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80810fe:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081102:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081104:	4b0d      	ldr	r3, [pc, #52]	; (808113c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081106:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081108:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808110a:	4b0d      	ldr	r3, [pc, #52]	; (8081140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 808110c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808110e:	9804      	ldr	r0, [sp, #16]
 8081110:	f7ff fc00 	bl	8080914 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081114:	4668      	mov	r0, sp
 8081116:	f7ff fdd3 	bl	8080cc0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808111a:	2200      	movs	r2, #0
 808111c:	4629      	mov	r1, r5
 808111e:	4809      	ldr	r0, [pc, #36]	; (8081144 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 8081120:	f7ff fbd4 	bl	80808cc <application_thread_invoke>
 8081124:	4630      	mov	r0, r6
 8081126:	f7ff fdcb 	bl	8080cc0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808112a:	4630      	mov	r0, r6
 808112c:	f7fe ffb7 	bl	808009e <_ZdlPv>
 8081130:	4638      	mov	r0, r7
 8081132:	f7ff fbef 	bl	8080914 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8081136:	b006      	add	sp, #24
 8081138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808113c:	08080fd3 	.word	0x08080fd3
 8081140:	08081231 	.word	0x08081231
 8081144:	08080ad9 	.word	0x08080ad9

08081148 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808114c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808114e:	ad07      	add	r5, sp, #28
 8081150:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081154:	4606      	mov	r6, r0
 8081156:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081158:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808115a:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808115c:	460f      	mov	r7, r1
 808115e:	4690      	mov	r8, r2
 8081160:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081164:	f8c5 b004 	str.w	fp, [r5, #4]
 8081168:	f8c5 b008 	str.w	fp, [r5, #8]
 808116c:	9307      	str	r3, [sp, #28]
 808116e:	f7fe ff94 	bl	808009a <_Znwj>
 8081172:	4604      	mov	r4, r0
 8081174:	b138      	cbz	r0, 8081186 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081176:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808117a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808117e:	f8c0 b004 	str.w	fp, [r0, #4]
 8081182:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081186:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081188:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808118a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808118c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808118e:	f7fe ff84 	bl	808009a <_Znwj>
 8081192:	b128      	cbz	r0, 80811a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8081194:	2301      	movs	r3, #1
 8081196:	6043      	str	r3, [r0, #4]
 8081198:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 808119a:	4b23      	ldr	r3, [pc, #140]	; (8081228 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 808119c:	60c4      	str	r4, [r0, #12]
 808119e:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80811a0:	4b22      	ldr	r3, [pc, #136]	; (808122c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80811a2:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80811a4:	2008      	movs	r0, #8
 80811a6:	9308      	str	r3, [sp, #32]
 80811a8:	f7fe ff77 	bl	808009a <_Znwj>
 80811ac:	4604      	mov	r4, r0
 80811ae:	b128      	cbz	r0, 80811bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80811b0:	9b03      	ldr	r3, [sp, #12]
 80811b2:	a904      	add	r1, sp, #16
 80811b4:	f840 3b04 	str.w	r3, [r0], #4
 80811b8:	f7ff fece 	bl	8080f58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80811bc:	9500      	str	r5, [sp, #0]
 80811be:	fa5f f38a 	uxtb.w	r3, sl
 80811c2:	464a      	mov	r2, r9
 80811c4:	4641      	mov	r1, r8
 80811c6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80811c8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80811ca:	f7ff fb07 	bl	80807dc <spark_send_event>
 80811ce:	b9b8      	cbnz	r0, 8081200 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80811d0:	9b03      	ldr	r3, [sp, #12]
 80811d2:	785b      	ldrb	r3, [r3, #1]
 80811d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80811d8:	b993      	cbnz	r3, 8081200 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80811da:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80811de:	a905      	add	r1, sp, #20
 80811e0:	a803      	add	r0, sp, #12
 80811e2:	9205      	str	r2, [sp, #20]
 80811e4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80811e8:	f7ff ff1a 	bl	8081020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80811ec:	9805      	ldr	r0, [sp, #20]
 80811ee:	f7ff fb91 	bl	8080914 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80811f2:	a805      	add	r0, sp, #20
 80811f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80811f6:	f7ff feb6 	bl	8080f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80811fa:	a806      	add	r0, sp, #24
 80811fc:	f7ff fbba 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081200:	9b03      	ldr	r3, [sp, #12]
 8081202:	a904      	add	r1, sp, #16
 8081204:	a806      	add	r0, sp, #24
 8081206:	9305      	str	r3, [sp, #20]
 8081208:	f7ff fea6 	bl	8080f58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808120c:	a905      	add	r1, sp, #20
 808120e:	4630      	mov	r0, r6
 8081210:	f7ff fe91 	bl	8080f36 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081214:	a806      	add	r0, sp, #24
 8081216:	f7ff fbad 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808121a:	a804      	add	r0, sp, #16
 808121c:	f7ff fbaa 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8081220:	4630      	mov	r0, r6
 8081222:	b00b      	add	sp, #44	; 0x2c
 8081224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081228:	08083210 	.word	0x08083210
 808122c:	08081399 	.word	0x08081399

08081230 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081230:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081234:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081236:	d006      	beq.n	8081246 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081238:	2a03      	cmp	r2, #3
 808123a:	d017      	beq.n	808126c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 808123c:	2a01      	cmp	r2, #1
 808123e:	d120      	bne.n	8081282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081240:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081242:	6003      	str	r3, [r0, #0]
	      break;
 8081244:	e01d      	b.n	8081282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081246:	2018      	movs	r0, #24
 8081248:	680e      	ldr	r6, [r1, #0]
 808124a:	f7fe ff26 	bl	808009a <_Znwj>
 808124e:	4605      	mov	r5, r0
 8081250:	b150      	cbz	r0, 8081268 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081252:	4631      	mov	r1, r6
 8081254:	f7ff fed4 	bl	8081000 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081258:	6930      	ldr	r0, [r6, #16]
 808125a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808125e:	b108      	cbz	r0, 8081264 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8081260:	f001 fed6 	bl	8083010 <strdup>
 8081264:	6128      	str	r0, [r5, #16]
 8081266:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081268:	6025      	str	r5, [r4, #0]
 808126a:	e00a      	b.n	8081282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808126c:	6804      	ldr	r4, [r0, #0]
 808126e:	b144      	cbz	r4, 8081282 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081270:	6920      	ldr	r0, [r4, #16]
 8081272:	f7ff fb4f 	bl	8080914 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081276:	4620      	mov	r0, r4
 8081278:	f7ff fd22 	bl	8080cc0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808127c:	4620      	mov	r0, r4
 808127e:	f7fe ff0e 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081282:	2000      	movs	r0, #0
 8081284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081286 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081286:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081288:	2300      	movs	r3, #0
 808128a:	6083      	str	r3, [r0, #8]
 808128c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808128e:	4604      	mov	r4, r0
 8081290:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081292:	b12b      	cbz	r3, 80812a0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081294:	2202      	movs	r2, #2
 8081296:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081298:	68eb      	ldr	r3, [r5, #12]
 808129a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808129c:	68ab      	ldr	r3, [r5, #8]
 808129e:	60a3      	str	r3, [r4, #8]
	}
    }
 80812a0:	4620      	mov	r0, r4
 80812a2:	bd38      	pop	{r3, r4, r5, pc}

080812a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80812a4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80812a6:	b570      	push	{r4, r5, r6, lr}
 80812a8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80812aa:	d006      	beq.n	80812ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80812ac:	2a03      	cmp	r2, #3
 80812ae:	d011      	beq.n	80812d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80812b0:	2a01      	cmp	r2, #1
 80812b2:	d117      	bne.n	80812e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80812b4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80812b6:	6003      	str	r3, [r0, #0]
	      break;
 80812b8:	e014      	b.n	80812e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80812ba:	2014      	movs	r0, #20
 80812bc:	680e      	ldr	r6, [r1, #0]
 80812be:	f7fe feec 	bl	808009a <_Znwj>
 80812c2:	4605      	mov	r5, r0
 80812c4:	b120      	cbz	r0, 80812d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80812c6:	4631      	mov	r1, r6
 80812c8:	f7ff ffdd 	bl	8081286 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80812cc:	7c33      	ldrb	r3, [r6, #16]
 80812ce:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80812d0:	6025      	str	r5, [r4, #0]
 80812d2:	e007      	b.n	80812e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80812d4:	6804      	ldr	r4, [r0, #0]
 80812d6:	b12c      	cbz	r4, 80812e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80812d8:	4620      	mov	r0, r4
 80812da:	f7ff fcf1 	bl	8080cc0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80812de:	4620      	mov	r0, r4
 80812e0:	f7fe fedd 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80812e4:	2000      	movs	r0, #0
 80812e6:	bd70      	pop	{r4, r5, r6, pc}

080812e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80812e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80812ea:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80812ec:	f3bf 8f5f 	dmb	sy
 80812f0:	b087      	sub	sp, #28
 80812f2:	2300      	movs	r3, #0
 80812f4:	e850 6f00 	ldrex	r6, [r0]
 80812f8:	e840 3200 	strex	r2, r3, [r0]
 80812fc:	2a00      	cmp	r2, #0
 80812fe:	d1f9      	bne.n	80812f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8081300:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081304:	2e00      	cmp	r6, #0
 8081306:	d03e      	beq.n	8081386 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081308:	4618      	mov	r0, r3
 808130a:	f7ff fad7 	bl	80808bc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808130e:	4607      	mov	r7, r0
 8081310:	b120      	cbz	r0, 808131c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081312:	4621      	mov	r1, r4
 8081314:	4630      	mov	r0, r6
 8081316:	f7ff fe63 	bl	8080fe0 <_ZNKSt8functionIFvRKbEEclES1_>
 808131a:	e02e      	b.n	808137a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808131c:	4631      	mov	r1, r6
 808131e:	a801      	add	r0, sp, #4
 8081320:	f7ff ffb1 	bl	8081286 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081324:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081326:	2010      	movs	r0, #16
 8081328:	f88d 3014 	strb.w	r3, [sp, #20]
 808132c:	f7fe feb5 	bl	808009a <_Znwj>
 8081330:	4605      	mov	r5, r0
 8081332:	b1d0      	cbz	r0, 808136a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081334:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081336:	2014      	movs	r0, #20
 8081338:	f7fe feaf 	bl	808009a <_Znwj>
 808133c:	4604      	mov	r4, r0
 808133e:	b178      	cbz	r0, 8081360 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081340:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081342:	4601      	mov	r1, r0
 8081344:	a801      	add	r0, sp, #4
 8081346:	f7ff fe2b 	bl	8080fa0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808134a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808134c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808134e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081350:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081352:	9203      	str	r2, [sp, #12]
 8081354:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081356:	60e3      	str	r3, [r4, #12]
 8081358:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808135c:	9204      	str	r2, [sp, #16]
 808135e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081360:	4b0a      	ldr	r3, [pc, #40]	; (808138c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081362:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081364:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081366:	4b0a      	ldr	r3, [pc, #40]	; (8081390 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8081368:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808136a:	a801      	add	r0, sp, #4
 808136c:	f7ff fca8 	bl	8080cc0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081370:	2200      	movs	r2, #0
 8081372:	4629      	mov	r1, r5
 8081374:	4807      	ldr	r0, [pc, #28]	; (8081394 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8081376:	f7ff faa9 	bl	80808cc <application_thread_invoke>
 808137a:	4630      	mov	r0, r6
 808137c:	f7ff fca0 	bl	8080cc0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081380:	4630      	mov	r0, r6
 8081382:	f7fe fe8c 	bl	808009e <_ZdlPv>
        }
    }
 8081386:	b007      	add	sp, #28
 8081388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808138a:	bf00      	nop
 808138c:	08080ff3 	.word	0x08080ff3
 8081390:	080812a5 	.word	0x080812a5
 8081394:	08080ad9 	.word	0x08080ad9

08081398 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8081398:	b530      	push	{r4, r5, lr}
 808139a:	4604      	mov	r4, r0
 808139c:	b085      	sub	sp, #20
 808139e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80813a0:	4668      	mov	r0, sp
 80813a2:	4611      	mov	r1, r2
 80813a4:	f7ff fddf 	bl	8080f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80813a8:	b17c      	cbz	r4, 80813ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80813aa:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80813ac:	4628      	mov	r0, r5
 80813ae:	b10d      	cbz	r5, 80813b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80813b0:	f001 fe2e 	bl	8083010 <strdup>
 80813b4:	9002      	str	r0, [sp, #8]
 80813b6:	a902      	add	r1, sp, #8
 80813b8:	4668      	mov	r0, sp
 80813ba:	f8ad 400c 	strh.w	r4, [sp, #12]
 80813be:	f7ff fe2f 	bl	8081020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80813c2:	9802      	ldr	r0, [sp, #8]
 80813c4:	f7ff faa6 	bl	8080914 <free>
 80813c8:	e01d      	b.n	8081406 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80813ca:	f04f 0201 	mov.w	r2, #1
 80813ce:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80813d0:	f88d 4008 	strb.w	r4, [sp, #8]
 80813d4:	e8d0 3f4f 	ldrexb	r3, [r0]
 80813d8:	42a3      	cmp	r3, r4
 80813da:	d103      	bne.n	80813e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80813dc:	e8c0 2f41 	strexb	r1, r2, [r0]
 80813e0:	2900      	cmp	r1, #0
 80813e2:	d1f7      	bne.n	80813d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80813e4:	d002      	beq.n	80813ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80813e6:	f88d 3008 	strb.w	r3, [sp, #8]
 80813ea:	e00c      	b.n	8081406 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80813ec:	f110 010c 	adds.w	r1, r0, #12
 80813f0:	f04f 0301 	mov.w	r3, #1
 80813f4:	bf18      	it	ne
 80813f6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80813f8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80813fc:	3004      	adds	r0, #4
 80813fe:	f800 3c03 	strb.w	r3, [r0, #-3]
 8081402:	f7ff ff71 	bl	80812e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8081406:	a801      	add	r0, sp, #4
 8081408:	f7ff fab4 	bl	8080974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 808140c:	b005      	add	sp, #20
 808140e:	bd30      	pop	{r4, r5, pc}

08081410 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8081410:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081412:	4b18      	ldr	r3, [pc, #96]	; (8081474 <serialEventRun+0x64>)
 8081414:	b133      	cbz	r3, 8081424 <serialEventRun+0x14>
 8081416:	f7ff fcb1 	bl	8080d7c <_Z16_fetch_usbserialv>
 808141a:	6803      	ldr	r3, [r0, #0]
 808141c:	691b      	ldr	r3, [r3, #16]
 808141e:	4798      	blx	r3
 8081420:	2800      	cmp	r0, #0
 8081422:	dc1e      	bgt.n	8081462 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8081424:	4b14      	ldr	r3, [pc, #80]	; (8081478 <serialEventRun+0x68>)
 8081426:	b133      	cbz	r3, 8081436 <serialEventRun+0x26>
 8081428:	f7ff fbae 	bl	8080b88 <_Z22__fetch_global_Serial1v>
 808142c:	6803      	ldr	r3, [r0, #0]
 808142e:	691b      	ldr	r3, [r3, #16]
 8081430:	4798      	blx	r3
 8081432:	2800      	cmp	r0, #0
 8081434:	dc18      	bgt.n	8081468 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8081436:	4b11      	ldr	r3, [pc, #68]	; (808147c <serialEventRun+0x6c>)
 8081438:	b10b      	cbz	r3, 808143e <serialEventRun+0x2e>
 808143a:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808143e:	4b10      	ldr	r3, [pc, #64]	; (8081480 <serialEventRun+0x70>)
 8081440:	b10b      	cbz	r3, 8081446 <serialEventRun+0x36>
 8081442:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8081446:	4b0f      	ldr	r3, [pc, #60]	; (8081484 <serialEventRun+0x74>)
 8081448:	b10b      	cbz	r3, 808144e <serialEventRun+0x3e>
 808144a:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808144e:	4b0e      	ldr	r3, [pc, #56]	; (8081488 <serialEventRun+0x78>)
 8081450:	b17b      	cbz	r3, 8081472 <serialEventRun+0x62>
 8081452:	f7ff fccf 	bl	8080df4 <_Z17_fetch_usbserial1v>
 8081456:	6803      	ldr	r3, [r0, #0]
 8081458:	691b      	ldr	r3, [r3, #16]
 808145a:	4798      	blx	r3
 808145c:	2800      	cmp	r0, #0
 808145e:	dc06      	bgt.n	808146e <serialEventRun+0x5e>
 8081460:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8081462:	f3af 8000 	nop.w
 8081466:	e7dd      	b.n	8081424 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8081468:	f3af 8000 	nop.w
 808146c:	e7e3      	b.n	8081436 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808146e:	f3af 8000 	nop.w
 8081472:	bd08      	pop	{r3, pc}
	...

0808148c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808148c:	b508      	push	{r3, lr}
	serialEventRun();
 808148e:	f7ff ffbf 	bl	8081410 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081492:	f7ff f95b 	bl	808074c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081496:	4b01      	ldr	r3, [pc, #4]	; (808149c <_post_loop+0x10>)
 8081498:	6018      	str	r0, [r3, #0]
 808149a:	bd08      	pop	{r3, pc}
 808149c:	20000aac 	.word	0x20000aac

080814a0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80814a0:	4802      	ldr	r0, [pc, #8]	; (80814ac <_Z33system_initialize_user_backup_ramv+0xc>)
 80814a2:	4a03      	ldr	r2, [pc, #12]	; (80814b0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80814a4:	4903      	ldr	r1, [pc, #12]	; (80814b4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80814a6:	1a12      	subs	r2, r2, r0
 80814a8:	f001 bd5e 	b.w	8082f68 <memcpy>
 80814ac:	40024000 	.word	0x40024000
 80814b0:	40024004 	.word	0x40024004
 80814b4:	080833e8 	.word	0x080833e8

080814b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80814b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80814ba:	2300      	movs	r3, #0
 80814bc:	9300      	str	r3, [sp, #0]
 80814be:	461a      	mov	r2, r3
 80814c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80814c4:	f7ff fa14 	bl	80808f0 <system_ctrl_set_result>
}
 80814c8:	b003      	add	sp, #12
 80814ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080814d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80814d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80814d2:	8843      	ldrh	r3, [r0, #2]
 80814d4:	2b0a      	cmp	r3, #10
 80814d6:	d008      	beq.n	80814ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80814d8:	2b50      	cmp	r3, #80	; 0x50
 80814da:	d109      	bne.n	80814f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80814dc:	4b09      	ldr	r3, [pc, #36]	; (8081504 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80814de:	681b      	ldr	r3, [r3, #0]
 80814e0:	b13b      	cbz	r3, 80814f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80814e2:	b003      	add	sp, #12
 80814e4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80814e8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80814ea:	f7ff ffe5 	bl	80814b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80814ee:	e006      	b.n	80814fe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80814f0:	2300      	movs	r3, #0
 80814f2:	9300      	str	r3, [sp, #0]
 80814f4:	461a      	mov	r2, r3
 80814f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80814fa:	f7ff f9f9 	bl	80808f0 <system_ctrl_set_result>
        break;
    }
}
 80814fe:	b003      	add	sp, #12
 8081500:	f85d fb04 	ldr.w	pc, [sp], #4
 8081504:	20000a64 	.word	0x20000a64

08081508 <module_user_init_hook>:

void module_user_init_hook()
{
 8081508:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808150a:	4c10      	ldr	r4, [pc, #64]	; (808154c <module_user_init_hook+0x44>)
 808150c:	4d10      	ldr	r5, [pc, #64]	; (8081550 <module_user_init_hook+0x48>)
 808150e:	6823      	ldr	r3, [r4, #0]
 8081510:	42ab      	cmp	r3, r5
 8081512:	4b10      	ldr	r3, [pc, #64]	; (8081554 <module_user_init_hook+0x4c>)
 8081514:	bf0c      	ite	eq
 8081516:	2201      	moveq	r2, #1
 8081518:	2200      	movne	r2, #0
 808151a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808151c:	d002      	beq.n	8081524 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808151e:	f7ff ffbf 	bl	80814a0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8081522:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8081524:	f7ff f90a 	bl	808073c <HAL_RNG_GetRandomNumber>
 8081528:	4604      	mov	r4, r0
    srand(seed);
 808152a:	f001 fd31 	bl	8082f90 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808152e:	4b0a      	ldr	r3, [pc, #40]	; (8081558 <module_user_init_hook+0x50>)
 8081530:	b113      	cbz	r3, 8081538 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8081532:	4620      	mov	r0, r4
 8081534:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8081538:	2100      	movs	r1, #0
 808153a:	4807      	ldr	r0, [pc, #28]	; (8081558 <module_user_init_hook+0x50>)
 808153c:	f7ff f956 	bl	80807ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8081540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8081544:	2100      	movs	r1, #0
 8081546:	4805      	ldr	r0, [pc, #20]	; (808155c <module_user_init_hook+0x54>)
 8081548:	f7ff b9c8 	b.w	80808dc <system_ctrl_set_app_request_handler>
 808154c:	40024000 	.word	0x40024000
 8081550:	9a271c1e 	.word	0x9a271c1e
 8081554:	20000a68 	.word	0x20000a68
 8081558:	00000000 	.word	0x00000000
 808155c:	080814d1 	.word	0x080814d1

08081560 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8081560:	b510      	push	{r4, lr}
 8081562:	4604      	mov	r4, r0
 8081564:	f7ff fbac 	bl	8080cc0 <_ZNSt14_Function_baseD1Ev>
 8081568:	4620      	mov	r0, r4
 808156a:	bd10      	pop	{r4, pc}

0808156c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808156c:	4803      	ldr	r0, [pc, #12]	; (808157c <_GLOBAL__sub_I_RGB+0x10>)
 808156e:	2300      	movs	r3, #0
 8081570:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8081572:	4a03      	ldr	r2, [pc, #12]	; (8081580 <_GLOBAL__sub_I_RGB+0x14>)
 8081574:	4903      	ldr	r1, [pc, #12]	; (8081584 <_GLOBAL__sub_I_RGB+0x18>)
 8081576:	f000 ba9e 	b.w	8081ab6 <__aeabi_atexit>
 808157a:	bf00      	nop
 808157c:	20000a6c 	.word	0x20000a6c
 8081580:	20000484 	.word	0x20000484
 8081584:	08081561 	.word	0x08081561

08081588 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081588:	2100      	movs	r1, #0
 808158a:	f7ff b98f 	b.w	80808ac <system_delay_ms>
	...

08081590 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081590:	4b02      	ldr	r3, [pc, #8]	; (808159c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8081592:	681a      	ldr	r2, [r3, #0]
 8081594:	4b02      	ldr	r3, [pc, #8]	; (80815a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8081596:	601a      	str	r2, [r3, #0]
 8081598:	4770      	bx	lr
 808159a:	bf00      	nop
 808159c:	2000041c 	.word	0x2000041c
 80815a0:	20000a7c 	.word	0x20000a7c

080815a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80815a4:	4a01      	ldr	r2, [pc, #4]	; (80815ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80815a6:	4b02      	ldr	r3, [pc, #8]	; (80815b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80815a8:	601a      	str	r2, [r3, #0]
 80815aa:	4770      	bx	lr
 80815ac:	08083308 	.word	0x08083308
 80815b0:	20000a80 	.word	0x20000a80

080815b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80815b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80815b6:	4606      	mov	r6, r0
 80815b8:	460d      	mov	r5, r1
 80815ba:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80815bc:	2400      	movs	r4, #0
  while (size--) {
 80815be:	42bd      	cmp	r5, r7
 80815c0:	d00c      	beq.n	80815dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80815c2:	6833      	ldr	r3, [r6, #0]
 80815c4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80815c8:	689b      	ldr	r3, [r3, #8]
 80815ca:	4630      	mov	r0, r6
 80815cc:	4798      	blx	r3
     if (chunk>=0)
 80815ce:	2800      	cmp	r0, #0
 80815d0:	db01      	blt.n	80815d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80815d2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80815d4:	e7f3      	b.n	80815be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80815d6:	2c00      	cmp	r4, #0
 80815d8:	bf08      	it	eq
 80815da:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80815dc:	4620      	mov	r0, r4
 80815de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080815e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80815e0:	b570      	push	{r4, r5, r6, lr}
 80815e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80815e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80815e6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80815e8:	b149      	cbz	r1, 80815fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80815ea:	f001 fd2c 	bl	8083046 <strlen>
 80815ee:	682b      	ldr	r3, [r5, #0]
 80815f0:	4602      	mov	r2, r0
 80815f2:	4621      	mov	r1, r4
 80815f4:	4628      	mov	r0, r5
    }
 80815f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80815fa:	68db      	ldr	r3, [r3, #12]
 80815fc:	4718      	bx	r3
    }
 80815fe:	bd70      	pop	{r4, r5, r6, pc}

08081600 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8081600:	6803      	ldr	r3, [r0, #0]
 8081602:	689b      	ldr	r3, [r3, #8]
 8081604:	4718      	bx	r3

08081606 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8081606:	2a01      	cmp	r2, #1
 8081608:	bf98      	it	ls
 808160a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 808160c:	b530      	push	{r4, r5, lr}
 808160e:	460b      	mov	r3, r1
 8081610:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8081612:	2100      	movs	r1, #0
 8081614:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8081618:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 808161c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8081620:	fb05 3312 	mls	r3, r5, r2, r3
 8081624:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8081626:	2b09      	cmp	r3, #9
 8081628:	bf94      	ite	ls
 808162a:	3330      	addls	r3, #48	; 0x30
 808162c:	3337      	addhi	r3, #55	; 0x37
 808162e:	b2db      	uxtb	r3, r3
 8081630:	4621      	mov	r1, r4
 8081632:	f804 3901 	strb.w	r3, [r4], #-1
 8081636:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8081638:	2d00      	cmp	r5, #0
 808163a:	d1ef      	bne.n	808161c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 808163c:	f7ff ffd0 	bl	80815e0 <_ZN5Print5writeEPKc>
}
 8081640:	b00b      	add	sp, #44	; 0x2c
 8081642:	bd30      	pop	{r4, r5, pc}

08081644 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8081644:	b410      	push	{r4}
  if (base == 0) return write(n);
 8081646:	b922      	cbnz	r2, 8081652 <_ZN5Print5printEmi+0xe>
 8081648:	6803      	ldr	r3, [r0, #0]
 808164a:	b2c9      	uxtb	r1, r1
 808164c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 808164e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8081650:	4718      	bx	r3
  else return printNumber(n, base);
 8081652:	b2d2      	uxtb	r2, r2
}
 8081654:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8081656:	f7ff bfd6 	b.w	8081606 <_ZN5Print11printNumberEmh>

0808165a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808165a:	f7ff bff3 	b.w	8081644 <_ZN5Print5printEmi>
	...

08081660 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8081660:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081664:	4680      	mov	r8, r0
 8081666:	460d      	mov	r5, r1
 8081668:	4617      	mov	r7, r2
 808166a:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 808166c:	2200      	movs	r2, #0
 808166e:	2300      	movs	r3, #0
 8081670:	4640      	mov	r0, r8
 8081672:	4629      	mov	r1, r5
 8081674:	f000 ff9a 	bl	80825ac <__aeabi_dcmplt>
 8081678:	b120      	cbz	r0, 8081684 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 808167a:	232d      	movs	r3, #45	; 0x2d
 808167c:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 808167e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 8081682:	3601      	adds	r6, #1
 8081684:	2300      	movs	r3, #0
    }
    long scale = 1;
 8081686:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 8081688:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 808168a:	b2d9      	uxtb	r1, r3
 808168c:	428f      	cmp	r7, r1
 808168e:	d902      	bls.n	8081696 <_Z4dtoadhPc+0x36>
        scale *= 10;
 8081690:	4354      	muls	r4, r2
 8081692:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8081694:	e7f9      	b.n	808168a <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 8081696:	4620      	mov	r0, r4
 8081698:	f000 fcb0 	bl	8081ffc <__aeabi_i2d>
 808169c:	4642      	mov	r2, r8
 808169e:	462b      	mov	r3, r5
 80816a0:	f000 fd12 	bl	80820c8 <__aeabi_dmul>
 80816a4:	4682      	mov	sl, r0
 80816a6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80816a8:	f001 fab4 	bl	8082c14 <__aeabi_d2ulz>
 80816ac:	4680      	mov	r8, r0
 80816ae:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80816b0:	f000 fcd4 	bl	808205c <__aeabi_ul2d>
 80816b4:	4602      	mov	r2, r0
 80816b6:	460b      	mov	r3, r1
 80816b8:	4650      	mov	r0, sl
 80816ba:	4659      	mov	r1, fp
 80816bc:	f000 fb50 	bl	8081d60 <__aeabi_dsub>
 80816c0:	2200      	movs	r2, #0
 80816c2:	4b17      	ldr	r3, [pc, #92]	; (8081720 <_Z4dtoadhPc+0xc0>)
 80816c4:	f000 ff86 	bl	80825d4 <__aeabi_dcmpge>
 80816c8:	b118      	cbz	r0, 80816d2 <_Z4dtoadhPc+0x72>
        fixed++;
 80816ca:	f118 0801 	adds.w	r8, r8, #1
 80816ce:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80816d2:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80816d4:	4622      	mov	r2, r4
 80816d6:	462b      	mov	r3, r5
 80816d8:	4640      	mov	r0, r8
 80816da:	4649      	mov	r1, r9
 80816dc:	f001 fa82 	bl	8082be4 <__aeabi_uldivmod>
 80816e0:	2301      	movs	r3, #1
 80816e2:	220a      	movs	r2, #10
 80816e4:	4631      	mov	r1, r6
 80816e6:	f000 f8ca 	bl	808187e <ultoa>
    if (prec) {
 80816ea:	b1af      	cbz	r7, 8081718 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80816ec:	4630      	mov	r0, r6
 80816ee:	f001 fcaa 	bl	8083046 <strlen>
        *sout++ = '.';
 80816f2:	232e      	movs	r3, #46	; 0x2e
 80816f4:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80816f6:	3001      	adds	r0, #1
 80816f8:	4406      	add	r6, r0
 80816fa:	4622      	mov	r2, r4
 80816fc:	462b      	mov	r3, r5
 80816fe:	4640      	mov	r0, r8
 8081700:	4649      	mov	r1, r9
 8081702:	f001 fa6f 	bl	8082be4 <__aeabi_uldivmod>
 8081706:	463b      	mov	r3, r7
 8081708:	4610      	mov	r0, r2
 808170a:	4631      	mov	r1, r6
 808170c:	220a      	movs	r2, #10
    }
}
 808170e:	b001      	add	sp, #4
 8081710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 8081714:	f000 b8b3 	b.w	808187e <ultoa>
    }
}
 8081718:	b001      	add	sp, #4
 808171a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808171e:	bf00      	nop
 8081720:	3fe00000 	.word	0x3fe00000

08081724 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8081724:	b510      	push	{r4, lr}
 8081726:	4604      	mov	r4, r0
{
	free(buffer);
 8081728:	6800      	ldr	r0, [r0, #0]
 808172a:	f7ff f8f3 	bl	8080914 <free>
}
 808172e:	4620      	mov	r0, r4
 8081730:	bd10      	pop	{r4, pc}

08081732 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8081732:	b510      	push	{r4, lr}
 8081734:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8081736:	6800      	ldr	r0, [r0, #0]
 8081738:	b108      	cbz	r0, 808173e <_ZN6String10invalidateEv+0xc>
 808173a:	f7ff f8eb 	bl	8080914 <free>
	buffer = NULL;
 808173e:	2300      	movs	r3, #0
 8081740:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8081742:	60a3      	str	r3, [r4, #8]
 8081744:	6063      	str	r3, [r4, #4]
 8081746:	bd10      	pop	{r4, pc}

08081748 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8081748:	b538      	push	{r3, r4, r5, lr}
 808174a:	4604      	mov	r4, r0
 808174c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808174e:	6800      	ldr	r0, [r0, #0]
 8081750:	3101      	adds	r1, #1
 8081752:	f7ff f8e7 	bl	8080924 <realloc>
	if (newbuffer) {
 8081756:	b110      	cbz	r0, 808175e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8081758:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808175c:	2001      	movs	r0, #1
	}
	return 0;
}
 808175e:	bd38      	pop	{r3, r4, r5, pc}

08081760 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081760:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8081762:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081764:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8081766:	b113      	cbz	r3, 808176e <_ZN6String7reserveEj+0xe>
 8081768:	6843      	ldr	r3, [r0, #4]
 808176a:	428b      	cmp	r3, r1
 808176c:	d207      	bcs.n	808177e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808176e:	4620      	mov	r0, r4
 8081770:	f7ff ffea 	bl	8081748 <_ZN6String12changeBufferEj>
 8081774:	b120      	cbz	r0, 8081780 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8081776:	68a3      	ldr	r3, [r4, #8]
 8081778:	b90b      	cbnz	r3, 808177e <_ZN6String7reserveEj+0x1e>
 808177a:	6822      	ldr	r2, [r4, #0]
 808177c:	7013      	strb	r3, [r2, #0]
 808177e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8081780:	bd10      	pop	{r4, pc}

08081782 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081782:	b570      	push	{r4, r5, r6, lr}
 8081784:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8081786:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081788:	4604      	mov	r4, r0
 808178a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808178c:	f7ff ffe8 	bl	8081760 <_ZN6String7reserveEj>
 8081790:	b918      	cbnz	r0, 808179a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8081792:	4620      	mov	r0, r4
 8081794:	f7ff ffcd 	bl	8081732 <_ZN6String10invalidateEv>
		return *this;
 8081798:	e009      	b.n	80817ae <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808179a:	462a      	mov	r2, r5
 808179c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808179e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80817a0:	6820      	ldr	r0, [r4, #0]
 80817a2:	f001 fbe1 	bl	8082f68 <memcpy>
	buffer[len] = 0;
 80817a6:	6822      	ldr	r2, [r4, #0]
 80817a8:	68a3      	ldr	r3, [r4, #8]
 80817aa:	2100      	movs	r1, #0
 80817ac:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80817ae:	4620      	mov	r0, r4
 80817b0:	bd70      	pop	{r4, r5, r6, pc}

080817b2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80817b2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80817b4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80817b6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80817b8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80817ba:	6043      	str	r3, [r0, #4]
	len = 0;
 80817bc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80817be:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80817c0:	460d      	mov	r5, r1
 80817c2:	b139      	cbz	r1, 80817d4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80817c4:	4608      	mov	r0, r1
 80817c6:	f001 fc3e 	bl	8083046 <strlen>
 80817ca:	4629      	mov	r1, r5
 80817cc:	4602      	mov	r2, r0
 80817ce:	4620      	mov	r0, r4
 80817d0:	f7ff ffd7 	bl	8081782 <_ZN6String4copyEPKcj>
}
 80817d4:	4620      	mov	r0, r4
 80817d6:	bd38      	pop	{r3, r4, r5, pc}

080817d8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80817d8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80817da:	b510      	push	{r4, lr}
 80817dc:	460b      	mov	r3, r1
 80817de:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80817e0:	d007      	beq.n	80817f2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80817e2:	6809      	ldr	r1, [r1, #0]
 80817e4:	b119      	cbz	r1, 80817ee <_ZN6StringaSERKS_+0x16>
 80817e6:	689a      	ldr	r2, [r3, #8]
 80817e8:	f7ff ffcb 	bl	8081782 <_ZN6String4copyEPKcj>
 80817ec:	e001      	b.n	80817f2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80817ee:	f7ff ffa0 	bl	8081732 <_ZN6String10invalidateEv>

	return *this;
}
 80817f2:	4620      	mov	r0, r4
 80817f4:	bd10      	pop	{r4, pc}

080817f6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80817f6:	b510      	push	{r4, lr}
 80817f8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80817fa:	2300      	movs	r3, #0
 80817fc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80817fe:	6043      	str	r3, [r0, #4]
	len = 0;
 8081800:	6083      	str	r3, [r0, #8]
	flags = 0;
 8081802:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8081804:	f7ff ffe8 	bl	80817d8 <_ZN6StringaSERKS_>
}
 8081808:	4620      	mov	r0, r4
 808180a:	bd10      	pop	{r4, pc}

0808180c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808180c:	b538      	push	{r3, r4, r5, lr}
 808180e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8081810:	460c      	mov	r4, r1
 8081812:	b141      	cbz	r1, 8081826 <_ZN6StringaSEPKc+0x1a>
 8081814:	4608      	mov	r0, r1
 8081816:	f001 fc16 	bl	8083046 <strlen>
 808181a:	4621      	mov	r1, r4
 808181c:	4602      	mov	r2, r0
 808181e:	4628      	mov	r0, r5
 8081820:	f7ff ffaf 	bl	8081782 <_ZN6String4copyEPKcj>
 8081824:	e001      	b.n	808182a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8081826:	f7ff ff84 	bl	8081732 <_ZN6String10invalidateEv>

	return *this;
}
 808182a:	4628      	mov	r0, r5
 808182c:	bd38      	pop	{r3, r4, r5, pc}

0808182e <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 808182e:	b530      	push	{r4, r5, lr}
 8081830:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081832:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 8081834:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081836:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081838:	6043      	str	r3, [r0, #4]
	len = 0;
 808183a:	6083      	str	r3, [r0, #8]
	flags = 0;
 808183c:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 808183e:	b2d5      	uxtb	r5, r2
 8081840:	4608      	mov	r0, r1
 8081842:	f000 fbed 	bl	8082020 <__aeabi_f2d>
 8081846:	ab01      	add	r3, sp, #4
 8081848:	462a      	mov	r2, r5
 808184a:	f7ff ff09 	bl	8081660 <_Z4dtoadhPc>
        *this = buf;
 808184e:	a901      	add	r1, sp, #4
 8081850:	4620      	mov	r0, r4
 8081852:	f7ff ffdb 	bl	808180c <_ZN6StringaSEPKc>
}
 8081856:	4620      	mov	r0, r4
 8081858:	b00b      	add	sp, #44	; 0x2c
 808185a:	bd30      	pop	{r4, r5, pc}

0808185c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 808185c:	b510      	push	{r4, lr}
 808185e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8081860:	f001 fbf1 	bl	8083046 <strlen>
 8081864:	3801      	subs	r0, #1
 8081866:	1823      	adds	r3, r4, r0
 8081868:	4620      	mov	r0, r4
	while(i<j){
 808186a:	4298      	cmp	r0, r3
 808186c:	d206      	bcs.n	808187c <_Z11str_reversePc+0x20>
		c = *i;
 808186e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8081870:	7819      	ldrb	r1, [r3, #0]
 8081872:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8081876:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 808187a:	e7f6      	b.n	808186a <_Z11str_reversePc+0xe>
 808187c:	bd10      	pop	{r4, pc}

0808187e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808187e:	b570      	push	{r4, r5, r6, lr}
 8081880:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8081882:	1e91      	subs	r1, r2, #2
 8081884:	2922      	cmp	r1, #34	; 0x22
 8081886:	d820      	bhi.n	80818ca <ultoa+0x4c>
 8081888:	4625      	mov	r5, r4
 808188a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808188c:	b910      	cbnz	r0, 8081894 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808188e:	4423      	add	r3, r4
            *ptr++ = '0';
 8081890:	2230      	movs	r2, #48	; 0x30
 8081892:	e00e      	b.n	80818b2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8081894:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8081898:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 808189c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808189e:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80818a0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80818a4:	bf94      	ite	ls
 80818a6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80818a8:	3157      	addhi	r1, #87	; 0x57
 80818aa:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80818ae:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80818b0:	e7eb      	b.n	808188a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80818b2:	4299      	cmp	r1, r3
 80818b4:	d202      	bcs.n	80818bc <ultoa+0x3e>
            *ptr++ = '0';
 80818b6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80818ba:	e7fa      	b.n	80818b2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80818bc:	2300      	movs	r3, #0
	str_reverse(buffer);
 80818be:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80818c0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80818c2:	f7ff ffcb 	bl	808185c <_Z11str_reversePc>
	return buffer;
 80818c6:	4620      	mov	r0, r4
 80818c8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80818ca:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80818cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080818d0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80818d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80818d4:	4b03      	ldr	r3, [pc, #12]	; (80818e4 <_GLOBAL__sub_I_System+0x14>)
 80818d6:	2000      	movs	r0, #0
 80818d8:	7018      	strb	r0, [r3, #0]
 80818da:	8058      	strh	r0, [r3, #2]
 80818dc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80818de:	f7fe bfdd 	b.w	808089c <set_system_mode>
 80818e2:	bf00      	nop
 80818e4:	20000a84 	.word	0x20000a84

080818e8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80818e8:	4770      	bx	lr

080818ea <_ZN8SPIClassD0Ev>:
 80818ea:	b510      	push	{r4, lr}
 80818ec:	4604      	mov	r4, r0
 80818ee:	f7fe fbd6 	bl	808009e <_ZdlPv>
 80818f2:	4620      	mov	r0, r4
 80818f4:	bd10      	pop	{r4, pc}
	...

080818f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80818f8:	b570      	push	{r4, r5, r6, lr}
 80818fa:	4604      	mov	r4, r0
 80818fc:	460e      	mov	r6, r1
 80818fe:	4b07      	ldr	r3, [pc, #28]	; (808191c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8081900:	2500      	movs	r5, #0
 8081902:	6003      	str	r3, [r0, #0]
 8081904:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8081908:	f7fe ff10 	bl	808072c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 808190c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808190e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8081910:	f7fe ff24 	bl	808075c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8081914:	60a5      	str	r5, [r4, #8]
}
 8081916:	4620      	mov	r0, r4
 8081918:	bd70      	pop	{r4, r5, r6, pc}
 808191a:	bf00      	nop
 808191c:	0808333c 	.word	0x0808333c

08081920 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8081920:	7900      	ldrb	r0, [r0, #4]
 8081922:	f7fe bf23 	b.w	808076c <HAL_SPI_Is_Enabled>
	...

08081928 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8081928:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808192a:	4d0b      	ldr	r5, [pc, #44]	; (8081958 <_Z19__fetch_global_Wirev+0x30>)
 808192c:	6829      	ldr	r1, [r5, #0]
 808192e:	f011 0401 	ands.w	r4, r1, #1
 8081932:	d10f      	bne.n	8081954 <_Z19__fetch_global_Wirev+0x2c>
 8081934:	4628      	mov	r0, r5
 8081936:	f7fe fbb4 	bl	80800a2 <__cxa_guard_acquire>
 808193a:	b158      	cbz	r0, 8081954 <_Z19__fetch_global_Wirev+0x2c>
 808193c:	4621      	mov	r1, r4
 808193e:	4807      	ldr	r0, [pc, #28]	; (808195c <_Z19__fetch_global_Wirev+0x34>)
 8081940:	f7ff f8b4 	bl	8080aac <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8081944:	4628      	mov	r0, r5
 8081946:	f7fe fbb1 	bl	80800ac <__cxa_guard_release>
 808194a:	4a05      	ldr	r2, [pc, #20]	; (8081960 <_Z19__fetch_global_Wirev+0x38>)
 808194c:	4905      	ldr	r1, [pc, #20]	; (8081964 <_Z19__fetch_global_Wirev+0x3c>)
 808194e:	4803      	ldr	r0, [pc, #12]	; (808195c <_Z19__fetch_global_Wirev+0x34>)
 8081950:	f000 f8b1 	bl	8081ab6 <__aeabi_atexit>
	return wire;
}
 8081954:	4801      	ldr	r0, [pc, #4]	; (808195c <_Z19__fetch_global_Wirev+0x34>)
 8081956:	bd38      	pop	{r3, r4, r5, pc}
 8081958:	20000a8c 	.word	0x20000a8c
 808195c:	20000a90 	.word	0x20000a90
 8081960:	20000484 	.word	0x20000484
 8081964:	08080a55 	.word	0x08080a55

08081968 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8081968:	b513      	push	{r0, r1, r4, lr}
 808196a:	4c08      	ldr	r4, [pc, #32]	; (808198c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808196c:	2300      	movs	r3, #0
 808196e:	461a      	mov	r2, r3
 8081970:	4619      	mov	r1, r3
 8081972:	9300      	str	r3, [sp, #0]
 8081974:	4620      	mov	r0, r4
 8081976:	f7ff faa5 	bl	8080ec4 <_ZN9IPAddressC1Ehhhh>
 808197a:	4620      	mov	r0, r4
 808197c:	4a04      	ldr	r2, [pc, #16]	; (8081990 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808197e:	4905      	ldr	r1, [pc, #20]	; (8081994 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8081980:	b002      	add	sp, #8
 8081982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081986:	f000 b896 	b.w	8081ab6 <__aeabi_atexit>
 808198a:	bf00      	nop
 808198c:	20000aa4 	.word	0x20000aa4
 8081990:	20000484 	.word	0x20000484
 8081994:	08080e41 	.word	0x08080e41

08081998 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081998:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808199a:	4e11      	ldr	r6, [pc, #68]	; (80819e0 <_GLOBAL__sub_I_SPI+0x48>)
 808199c:	4d11      	ldr	r5, [pc, #68]	; (80819e4 <_GLOBAL__sub_I_SPI+0x4c>)
 808199e:	4c12      	ldr	r4, [pc, #72]	; (80819e8 <_GLOBAL__sub_I_SPI+0x50>)
 80819a0:	2100      	movs	r1, #0
 80819a2:	4630      	mov	r0, r6
 80819a4:	f7ff ffa8 	bl	80818f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80819a8:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80819aa:	4e10      	ldr	r6, [pc, #64]	; (80819ec <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80819ac:	462a      	mov	r2, r5
 80819ae:	4621      	mov	r1, r4
 80819b0:	f000 f881 	bl	8081ab6 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80819b4:	2101      	movs	r1, #1
 80819b6:	4630      	mov	r0, r6
 80819b8:	f7ff ff9e 	bl	80818f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80819bc:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80819be:	4e0c      	ldr	r6, [pc, #48]	; (80819f0 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80819c0:	462a      	mov	r2, r5
 80819c2:	4621      	mov	r1, r4
 80819c4:	f000 f877 	bl	8081ab6 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80819c8:	2102      	movs	r1, #2
 80819ca:	4630      	mov	r0, r6
 80819cc:	f7ff ff94 	bl	80818f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80819d0:	462a      	mov	r2, r5
 80819d2:	4621      	mov	r1, r4
 80819d4:	4630      	mov	r0, r6
 80819d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80819da:	f000 b86c 	b.w	8081ab6 <__aeabi_atexit>
 80819de:	bf00      	nop
 80819e0:	20000ab0 	.word	0x20000ab0
 80819e4:	20000484 	.word	0x20000484
 80819e8:	080818e9 	.word	0x080818e9
 80819ec:	20000ac0 	.word	0x20000ac0
 80819f0:	20000ad0 	.word	0x20000ad0

080819f4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80819f4:	b510      	push	{r4, lr}
 80819f6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80819f8:	480f      	ldr	r0, [pc, #60]	; (8081a38 <pinAvailable+0x44>)
 80819fa:	f7ff ff91 	bl	8081920 <_ZN8SPIClass9isEnabledEv>
 80819fe:	b128      	cbz	r0, 8081a0c <pinAvailable+0x18>
 8081a00:	f1a4 030d 	sub.w	r3, r4, #13
 8081a04:	2b02      	cmp	r3, #2
 8081a06:	d801      	bhi.n	8081a0c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8081a08:	2000      	movs	r0, #0
 8081a0a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8081a0c:	f7ff ff8c 	bl	8081928 <_Z19__fetch_global_Wirev>
 8081a10:	f7ff f85e 	bl	8080ad0 <_ZN7TwoWire9isEnabledEv>
 8081a14:	b108      	cbz	r0, 8081a1a <pinAvailable+0x26>
 8081a16:	2c01      	cmp	r4, #1
 8081a18:	d9f6      	bls.n	8081a08 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8081a1a:	f7ff f8b5 	bl	8080b88 <_Z22__fetch_global_Serial1v>
 8081a1e:	f7ff f8af 	bl	8080b80 <_ZN11USARTSerial9isEnabledEv>
 8081a22:	b118      	cbz	r0, 8081a2c <pinAvailable+0x38>
 8081a24:	f1a4 0312 	sub.w	r3, r4, #18
 8081a28:	2b01      	cmp	r3, #1
 8081a2a:	d9ed      	bls.n	8081a08 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8081a2c:	2c2e      	cmp	r4, #46	; 0x2e
 8081a2e:	bf8c      	ite	hi
 8081a30:	2000      	movhi	r0, #0
 8081a32:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8081a34:	bd10      	pop	{r4, pc}
 8081a36:	bf00      	nop
 8081a38:	20000ab0 	.word	0x20000ab0

08081a3c <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8081a3c:	b510      	push	{r4, lr}
 8081a3e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8081a40:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8081a42:	bf9c      	itt	ls
 8081a44:	340a      	addls	r4, #10
 8081a46:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8081a48:	4620      	mov	r0, r4
 8081a4a:	f7ff ffd3 	bl	80819f4 <pinAvailable>
 8081a4e:	b150      	cbz	r0, 8081a66 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8081a50:	2103      	movs	r1, #3
 8081a52:	4620      	mov	r0, r4
 8081a54:	f7fe fe9a 	bl	808078c <HAL_Validate_Pin_Function>
 8081a58:	2803      	cmp	r0, #3
 8081a5a:	d104      	bne.n	8081a66 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8081a5c:	4620      	mov	r0, r4
}
 8081a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8081a62:	f7fe beab 	b.w	80807bc <HAL_ADC_Read>
}
 8081a66:	2000      	movs	r0, #0
 8081a68:	bd10      	pop	{r4, pc}

08081a6a <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 8081a6a:	b538      	push	{r3, r4, r5, lr}
 8081a6c:	4604      	mov	r4, r0
 8081a6e:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 8081a70:	f7ff ffc0 	bl	80819f4 <pinAvailable>
 8081a74:	b1f0      	cbz	r0, 8081ab4 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 8081a76:	2104      	movs	r1, #4
 8081a78:	4620      	mov	r0, r4
 8081a7a:	f7fe fe87 	bl	808078c <HAL_Validate_Pin_Function>
 8081a7e:	2804      	cmp	r0, #4
 8081a80:	d105      	bne.n	8081a8e <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 8081a82:	b2a9      	uxth	r1, r5
 8081a84:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 8081a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 8081a8a:	f7fe be8f 	b.w	80807ac <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 8081a8e:	2102      	movs	r1, #2
 8081a90:	4620      	mov	r0, r4
 8081a92:	f7fe fe7b 	bl	808078c <HAL_Validate_Pin_Function>
 8081a96:	2802      	cmp	r0, #2
 8081a98:	d10c      	bne.n	8081ab4 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 8081a9a:	4620      	mov	r0, r4
 8081a9c:	f7fe fe7e 	bl	808079c <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 8081aa0:	2801      	cmp	r0, #1
 8081aa2:	d001      	beq.n	8081aa8 <_Z11analogWritetm+0x3e>
 8081aa4:	2804      	cmp	r0, #4
 8081aa6:	d105      	bne.n	8081ab4 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 8081aa8:	4629      	mov	r1, r5
 8081aaa:	4620      	mov	r0, r4
    }
}
 8081aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 8081ab0:	f7fe be8c 	b.w	80807cc <HAL_PWM_Write_Ext>
 8081ab4:	bd38      	pop	{r3, r4, r5, pc}

08081ab6 <__aeabi_atexit>:
 8081ab6:	460b      	mov	r3, r1
 8081ab8:	4601      	mov	r1, r0
 8081aba:	4618      	mov	r0, r3
 8081abc:	f001 ba46 	b.w	8082f4c <__cxa_atexit>

08081ac0 <_ZSt25__throw_bad_function_callv>:
 8081ac0:	b508      	push	{r3, lr}
 8081ac2:	f7fe ff37 	bl	8080934 <abort>
	...

08081ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081ac8:	4b18      	ldr	r3, [pc, #96]	; (8081b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081aca:	681a      	ldr	r2, [r3, #0]
 8081acc:	07d1      	lsls	r1, r2, #31
 8081ace:	bf5c      	itt	pl
 8081ad0:	2201      	movpl	r2, #1
 8081ad2:	601a      	strpl	r2, [r3, #0]
 8081ad4:	4b16      	ldr	r3, [pc, #88]	; (8081b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081ad6:	681a      	ldr	r2, [r3, #0]
 8081ad8:	07d2      	lsls	r2, r2, #31
 8081ada:	bf5c      	itt	pl
 8081adc:	2201      	movpl	r2, #1
 8081ade:	601a      	strpl	r2, [r3, #0]
 8081ae0:	4b14      	ldr	r3, [pc, #80]	; (8081b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081ae2:	681a      	ldr	r2, [r3, #0]
 8081ae4:	07d0      	lsls	r0, r2, #31
 8081ae6:	bf5c      	itt	pl
 8081ae8:	2201      	movpl	r2, #1
 8081aea:	601a      	strpl	r2, [r3, #0]
 8081aec:	4b12      	ldr	r3, [pc, #72]	; (8081b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081aee:	681a      	ldr	r2, [r3, #0]
 8081af0:	07d1      	lsls	r1, r2, #31
 8081af2:	bf5c      	itt	pl
 8081af4:	2201      	movpl	r2, #1
 8081af6:	601a      	strpl	r2, [r3, #0]
 8081af8:	4b10      	ldr	r3, [pc, #64]	; (8081b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081afa:	681a      	ldr	r2, [r3, #0]
 8081afc:	07d2      	lsls	r2, r2, #31
 8081afe:	bf5c      	itt	pl
 8081b00:	2201      	movpl	r2, #1
 8081b02:	601a      	strpl	r2, [r3, #0]
 8081b04:	4b0e      	ldr	r3, [pc, #56]	; (8081b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081b06:	681a      	ldr	r2, [r3, #0]
 8081b08:	07d0      	lsls	r0, r2, #31
 8081b0a:	bf5c      	itt	pl
 8081b0c:	2201      	movpl	r2, #1
 8081b0e:	601a      	strpl	r2, [r3, #0]
 8081b10:	4b0c      	ldr	r3, [pc, #48]	; (8081b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081b12:	681a      	ldr	r2, [r3, #0]
 8081b14:	07d1      	lsls	r1, r2, #31
 8081b16:	bf5c      	itt	pl
 8081b18:	2201      	movpl	r2, #1
 8081b1a:	601a      	strpl	r2, [r3, #0]
 8081b1c:	4b0a      	ldr	r3, [pc, #40]	; (8081b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081b1e:	681a      	ldr	r2, [r3, #0]
 8081b20:	07d2      	lsls	r2, r2, #31
 8081b22:	bf5c      	itt	pl
 8081b24:	2201      	movpl	r2, #1
 8081b26:	601a      	strpl	r2, [r3, #0]
 8081b28:	4770      	bx	lr
 8081b2a:	bf00      	nop
 8081b2c:	20000afc 	.word	0x20000afc
 8081b30:	20000af8 	.word	0x20000af8
 8081b34:	20000af4 	.word	0x20000af4
 8081b38:	20000af0 	.word	0x20000af0
 8081b3c:	20000aec 	.word	0x20000aec
 8081b40:	20000ae8 	.word	0x20000ae8
 8081b44:	20000ae4 	.word	0x20000ae4
 8081b48:	20000ae0 	.word	0x20000ae0

08081b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8081b4c:	4b24      	ldr	r3, [pc, #144]	; (8081be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8081b4e:	681a      	ldr	r2, [r3, #0]
 8081b50:	07d0      	lsls	r0, r2, #31
 8081b52:	bf5c      	itt	pl
 8081b54:	2201      	movpl	r2, #1
 8081b56:	601a      	strpl	r2, [r3, #0]
 8081b58:	4b22      	ldr	r3, [pc, #136]	; (8081be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8081b5a:	681a      	ldr	r2, [r3, #0]
 8081b5c:	07d1      	lsls	r1, r2, #31
 8081b5e:	bf5c      	itt	pl
 8081b60:	2201      	movpl	r2, #1
 8081b62:	601a      	strpl	r2, [r3, #0]
 8081b64:	4b20      	ldr	r3, [pc, #128]	; (8081be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8081b66:	681a      	ldr	r2, [r3, #0]
 8081b68:	07d2      	lsls	r2, r2, #31
 8081b6a:	bf5c      	itt	pl
 8081b6c:	2201      	movpl	r2, #1
 8081b6e:	601a      	strpl	r2, [r3, #0]
 8081b70:	4b1e      	ldr	r3, [pc, #120]	; (8081bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8081b72:	681a      	ldr	r2, [r3, #0]
 8081b74:	07d0      	lsls	r0, r2, #31
 8081b76:	bf5c      	itt	pl
 8081b78:	2201      	movpl	r2, #1
 8081b7a:	601a      	strpl	r2, [r3, #0]
 8081b7c:	4b1c      	ldr	r3, [pc, #112]	; (8081bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8081b7e:	681a      	ldr	r2, [r3, #0]
 8081b80:	07d1      	lsls	r1, r2, #31
 8081b82:	bf5c      	itt	pl
 8081b84:	2201      	movpl	r2, #1
 8081b86:	601a      	strpl	r2, [r3, #0]
 8081b88:	4b1a      	ldr	r3, [pc, #104]	; (8081bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8081b8a:	681a      	ldr	r2, [r3, #0]
 8081b8c:	07d2      	lsls	r2, r2, #31
 8081b8e:	bf5c      	itt	pl
 8081b90:	2201      	movpl	r2, #1
 8081b92:	601a      	strpl	r2, [r3, #0]
 8081b94:	4b18      	ldr	r3, [pc, #96]	; (8081bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8081b96:	681a      	ldr	r2, [r3, #0]
 8081b98:	07d0      	lsls	r0, r2, #31
 8081b9a:	bf5c      	itt	pl
 8081b9c:	2201      	movpl	r2, #1
 8081b9e:	601a      	strpl	r2, [r3, #0]
 8081ba0:	4b16      	ldr	r3, [pc, #88]	; (8081bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8081ba2:	681a      	ldr	r2, [r3, #0]
 8081ba4:	07d1      	lsls	r1, r2, #31
 8081ba6:	bf5c      	itt	pl
 8081ba8:	2201      	movpl	r2, #1
 8081baa:	601a      	strpl	r2, [r3, #0]
 8081bac:	4b14      	ldr	r3, [pc, #80]	; (8081c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8081bae:	681a      	ldr	r2, [r3, #0]
 8081bb0:	07d2      	lsls	r2, r2, #31
 8081bb2:	bf5c      	itt	pl
 8081bb4:	2201      	movpl	r2, #1
 8081bb6:	601a      	strpl	r2, [r3, #0]
 8081bb8:	4b12      	ldr	r3, [pc, #72]	; (8081c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8081bba:	681a      	ldr	r2, [r3, #0]
 8081bbc:	07d0      	lsls	r0, r2, #31
 8081bbe:	bf5c      	itt	pl
 8081bc0:	2201      	movpl	r2, #1
 8081bc2:	601a      	strpl	r2, [r3, #0]
 8081bc4:	4b10      	ldr	r3, [pc, #64]	; (8081c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8081bc6:	681a      	ldr	r2, [r3, #0]
 8081bc8:	07d1      	lsls	r1, r2, #31
 8081bca:	bf5c      	itt	pl
 8081bcc:	2201      	movpl	r2, #1
 8081bce:	601a      	strpl	r2, [r3, #0]
 8081bd0:	4b0e      	ldr	r3, [pc, #56]	; (8081c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8081bd2:	681a      	ldr	r2, [r3, #0]
 8081bd4:	07d2      	lsls	r2, r2, #31
 8081bd6:	bf5c      	itt	pl
 8081bd8:	2201      	movpl	r2, #1
 8081bda:	601a      	strpl	r2, [r3, #0]
 8081bdc:	4770      	bx	lr
 8081bde:	bf00      	nop
 8081be0:	20000b2c 	.word	0x20000b2c
 8081be4:	20000b28 	.word	0x20000b28
 8081be8:	20000b24 	.word	0x20000b24
 8081bec:	20000b20 	.word	0x20000b20
 8081bf0:	20000b1c 	.word	0x20000b1c
 8081bf4:	20000b18 	.word	0x20000b18
 8081bf8:	20000b14 	.word	0x20000b14
 8081bfc:	20000b10 	.word	0x20000b10
 8081c00:	20000b0c 	.word	0x20000b0c
 8081c04:	20000b08 	.word	0x20000b08
 8081c08:	20000b04 	.word	0x20000b04
 8081c0c:	20000b00 	.word	0x20000b00

08081c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8081c10:	4b24      	ldr	r3, [pc, #144]	; (8081ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8081c12:	681a      	ldr	r2, [r3, #0]
 8081c14:	07d0      	lsls	r0, r2, #31
 8081c16:	bf5c      	itt	pl
 8081c18:	2201      	movpl	r2, #1
 8081c1a:	601a      	strpl	r2, [r3, #0]
 8081c1c:	4b22      	ldr	r3, [pc, #136]	; (8081ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8081c1e:	681a      	ldr	r2, [r3, #0]
 8081c20:	07d1      	lsls	r1, r2, #31
 8081c22:	bf5c      	itt	pl
 8081c24:	2201      	movpl	r2, #1
 8081c26:	601a      	strpl	r2, [r3, #0]
 8081c28:	4b20      	ldr	r3, [pc, #128]	; (8081cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8081c2a:	681a      	ldr	r2, [r3, #0]
 8081c2c:	07d2      	lsls	r2, r2, #31
 8081c2e:	bf5c      	itt	pl
 8081c30:	2201      	movpl	r2, #1
 8081c32:	601a      	strpl	r2, [r3, #0]
 8081c34:	4b1e      	ldr	r3, [pc, #120]	; (8081cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8081c36:	681a      	ldr	r2, [r3, #0]
 8081c38:	07d0      	lsls	r0, r2, #31
 8081c3a:	bf5c      	itt	pl
 8081c3c:	2201      	movpl	r2, #1
 8081c3e:	601a      	strpl	r2, [r3, #0]
 8081c40:	4b1c      	ldr	r3, [pc, #112]	; (8081cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8081c42:	681a      	ldr	r2, [r3, #0]
 8081c44:	07d1      	lsls	r1, r2, #31
 8081c46:	bf5c      	itt	pl
 8081c48:	2201      	movpl	r2, #1
 8081c4a:	601a      	strpl	r2, [r3, #0]
 8081c4c:	4b1a      	ldr	r3, [pc, #104]	; (8081cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8081c4e:	681a      	ldr	r2, [r3, #0]
 8081c50:	07d2      	lsls	r2, r2, #31
 8081c52:	bf5c      	itt	pl
 8081c54:	2201      	movpl	r2, #1
 8081c56:	601a      	strpl	r2, [r3, #0]
 8081c58:	4b18      	ldr	r3, [pc, #96]	; (8081cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8081c5a:	681a      	ldr	r2, [r3, #0]
 8081c5c:	07d0      	lsls	r0, r2, #31
 8081c5e:	bf5c      	itt	pl
 8081c60:	2201      	movpl	r2, #1
 8081c62:	601a      	strpl	r2, [r3, #0]
 8081c64:	4b16      	ldr	r3, [pc, #88]	; (8081cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8081c66:	681a      	ldr	r2, [r3, #0]
 8081c68:	07d1      	lsls	r1, r2, #31
 8081c6a:	bf5c      	itt	pl
 8081c6c:	2201      	movpl	r2, #1
 8081c6e:	601a      	strpl	r2, [r3, #0]
 8081c70:	4b14      	ldr	r3, [pc, #80]	; (8081cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8081c72:	681a      	ldr	r2, [r3, #0]
 8081c74:	07d2      	lsls	r2, r2, #31
 8081c76:	bf5c      	itt	pl
 8081c78:	2201      	movpl	r2, #1
 8081c7a:	601a      	strpl	r2, [r3, #0]
 8081c7c:	4b12      	ldr	r3, [pc, #72]	; (8081cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8081c7e:	681a      	ldr	r2, [r3, #0]
 8081c80:	07d0      	lsls	r0, r2, #31
 8081c82:	bf5c      	itt	pl
 8081c84:	2201      	movpl	r2, #1
 8081c86:	601a      	strpl	r2, [r3, #0]
 8081c88:	4b10      	ldr	r3, [pc, #64]	; (8081ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8081c8a:	681a      	ldr	r2, [r3, #0]
 8081c8c:	07d1      	lsls	r1, r2, #31
 8081c8e:	bf5c      	itt	pl
 8081c90:	2201      	movpl	r2, #1
 8081c92:	601a      	strpl	r2, [r3, #0]
 8081c94:	4b0e      	ldr	r3, [pc, #56]	; (8081cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8081c96:	681a      	ldr	r2, [r3, #0]
 8081c98:	07d2      	lsls	r2, r2, #31
 8081c9a:	bf5c      	itt	pl
 8081c9c:	2201      	movpl	r2, #1
 8081c9e:	601a      	strpl	r2, [r3, #0]
 8081ca0:	4770      	bx	lr
 8081ca2:	bf00      	nop
 8081ca4:	20000b5c 	.word	0x20000b5c
 8081ca8:	20000b58 	.word	0x20000b58
 8081cac:	20000b54 	.word	0x20000b54
 8081cb0:	20000b50 	.word	0x20000b50
 8081cb4:	20000b4c 	.word	0x20000b4c
 8081cb8:	20000b48 	.word	0x20000b48
 8081cbc:	20000b44 	.word	0x20000b44
 8081cc0:	20000b40 	.word	0x20000b40
 8081cc4:	20000b3c 	.word	0x20000b3c
 8081cc8:	20000b38 	.word	0x20000b38
 8081ccc:	20000b34 	.word	0x20000b34
 8081cd0:	20000b30 	.word	0x20000b30

08081cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081cd4:	4b18      	ldr	r3, [pc, #96]	; (8081d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081cd6:	681a      	ldr	r2, [r3, #0]
 8081cd8:	07d1      	lsls	r1, r2, #31
 8081cda:	bf5c      	itt	pl
 8081cdc:	2201      	movpl	r2, #1
 8081cde:	601a      	strpl	r2, [r3, #0]
 8081ce0:	4b16      	ldr	r3, [pc, #88]	; (8081d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081ce2:	681a      	ldr	r2, [r3, #0]
 8081ce4:	07d2      	lsls	r2, r2, #31
 8081ce6:	bf5c      	itt	pl
 8081ce8:	2201      	movpl	r2, #1
 8081cea:	601a      	strpl	r2, [r3, #0]
 8081cec:	4b14      	ldr	r3, [pc, #80]	; (8081d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081cee:	681a      	ldr	r2, [r3, #0]
 8081cf0:	07d0      	lsls	r0, r2, #31
 8081cf2:	bf5c      	itt	pl
 8081cf4:	2201      	movpl	r2, #1
 8081cf6:	601a      	strpl	r2, [r3, #0]
 8081cf8:	4b12      	ldr	r3, [pc, #72]	; (8081d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081cfa:	681a      	ldr	r2, [r3, #0]
 8081cfc:	07d1      	lsls	r1, r2, #31
 8081cfe:	bf5c      	itt	pl
 8081d00:	2201      	movpl	r2, #1
 8081d02:	601a      	strpl	r2, [r3, #0]
 8081d04:	4b10      	ldr	r3, [pc, #64]	; (8081d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081d06:	681a      	ldr	r2, [r3, #0]
 8081d08:	07d2      	lsls	r2, r2, #31
 8081d0a:	bf5c      	itt	pl
 8081d0c:	2201      	movpl	r2, #1
 8081d0e:	601a      	strpl	r2, [r3, #0]
 8081d10:	4b0e      	ldr	r3, [pc, #56]	; (8081d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081d12:	681a      	ldr	r2, [r3, #0]
 8081d14:	07d0      	lsls	r0, r2, #31
 8081d16:	bf5c      	itt	pl
 8081d18:	2201      	movpl	r2, #1
 8081d1a:	601a      	strpl	r2, [r3, #0]
 8081d1c:	4b0c      	ldr	r3, [pc, #48]	; (8081d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081d1e:	681a      	ldr	r2, [r3, #0]
 8081d20:	07d1      	lsls	r1, r2, #31
 8081d22:	bf5c      	itt	pl
 8081d24:	2201      	movpl	r2, #1
 8081d26:	601a      	strpl	r2, [r3, #0]
 8081d28:	4b0a      	ldr	r3, [pc, #40]	; (8081d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081d2a:	681a      	ldr	r2, [r3, #0]
 8081d2c:	07d2      	lsls	r2, r2, #31
 8081d2e:	bf5c      	itt	pl
 8081d30:	2201      	movpl	r2, #1
 8081d32:	601a      	strpl	r2, [r3, #0]
 8081d34:	4770      	bx	lr
 8081d36:	bf00      	nop
 8081d38:	20000b7c 	.word	0x20000b7c
 8081d3c:	20000b78 	.word	0x20000b78
 8081d40:	20000b74 	.word	0x20000b74
 8081d44:	20000b70 	.word	0x20000b70
 8081d48:	20000b6c 	.word	0x20000b6c
 8081d4c:	20000b68 	.word	0x20000b68
 8081d50:	20000b64 	.word	0x20000b64
 8081d54:	20000b60 	.word	0x20000b60

08081d58 <__aeabi_drsub>:
 8081d58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8081d5c:	e002      	b.n	8081d64 <__adddf3>
 8081d5e:	bf00      	nop

08081d60 <__aeabi_dsub>:
 8081d60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08081d64 <__adddf3>:
 8081d64:	b530      	push	{r4, r5, lr}
 8081d66:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8081d6a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8081d6e:	ea94 0f05 	teq	r4, r5
 8081d72:	bf08      	it	eq
 8081d74:	ea90 0f02 	teqeq	r0, r2
 8081d78:	bf1f      	itttt	ne
 8081d7a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8081d7e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8081d82:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8081d86:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081d8a:	f000 80e2 	beq.w	8081f52 <__adddf3+0x1ee>
 8081d8e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8081d92:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8081d96:	bfb8      	it	lt
 8081d98:	426d      	neglt	r5, r5
 8081d9a:	dd0c      	ble.n	8081db6 <__adddf3+0x52>
 8081d9c:	442c      	add	r4, r5
 8081d9e:	ea80 0202 	eor.w	r2, r0, r2
 8081da2:	ea81 0303 	eor.w	r3, r1, r3
 8081da6:	ea82 0000 	eor.w	r0, r2, r0
 8081daa:	ea83 0101 	eor.w	r1, r3, r1
 8081dae:	ea80 0202 	eor.w	r2, r0, r2
 8081db2:	ea81 0303 	eor.w	r3, r1, r3
 8081db6:	2d36      	cmp	r5, #54	; 0x36
 8081db8:	bf88      	it	hi
 8081dba:	bd30      	pophi	{r4, r5, pc}
 8081dbc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8081dc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8081dc4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8081dc8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8081dcc:	d002      	beq.n	8081dd4 <__adddf3+0x70>
 8081dce:	4240      	negs	r0, r0
 8081dd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8081dd4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8081dd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8081ddc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8081de0:	d002      	beq.n	8081de8 <__adddf3+0x84>
 8081de2:	4252      	negs	r2, r2
 8081de4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8081de8:	ea94 0f05 	teq	r4, r5
 8081dec:	f000 80a7 	beq.w	8081f3e <__adddf3+0x1da>
 8081df0:	f1a4 0401 	sub.w	r4, r4, #1
 8081df4:	f1d5 0e20 	rsbs	lr, r5, #32
 8081df8:	db0d      	blt.n	8081e16 <__adddf3+0xb2>
 8081dfa:	fa02 fc0e 	lsl.w	ip, r2, lr
 8081dfe:	fa22 f205 	lsr.w	r2, r2, r5
 8081e02:	1880      	adds	r0, r0, r2
 8081e04:	f141 0100 	adc.w	r1, r1, #0
 8081e08:	fa03 f20e 	lsl.w	r2, r3, lr
 8081e0c:	1880      	adds	r0, r0, r2
 8081e0e:	fa43 f305 	asr.w	r3, r3, r5
 8081e12:	4159      	adcs	r1, r3
 8081e14:	e00e      	b.n	8081e34 <__adddf3+0xd0>
 8081e16:	f1a5 0520 	sub.w	r5, r5, #32
 8081e1a:	f10e 0e20 	add.w	lr, lr, #32
 8081e1e:	2a01      	cmp	r2, #1
 8081e20:	fa03 fc0e 	lsl.w	ip, r3, lr
 8081e24:	bf28      	it	cs
 8081e26:	f04c 0c02 	orrcs.w	ip, ip, #2
 8081e2a:	fa43 f305 	asr.w	r3, r3, r5
 8081e2e:	18c0      	adds	r0, r0, r3
 8081e30:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8081e34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081e38:	d507      	bpl.n	8081e4a <__adddf3+0xe6>
 8081e3a:	f04f 0e00 	mov.w	lr, #0
 8081e3e:	f1dc 0c00 	rsbs	ip, ip, #0
 8081e42:	eb7e 0000 	sbcs.w	r0, lr, r0
 8081e46:	eb6e 0101 	sbc.w	r1, lr, r1
 8081e4a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8081e4e:	d31b      	bcc.n	8081e88 <__adddf3+0x124>
 8081e50:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8081e54:	d30c      	bcc.n	8081e70 <__adddf3+0x10c>
 8081e56:	0849      	lsrs	r1, r1, #1
 8081e58:	ea5f 0030 	movs.w	r0, r0, rrx
 8081e5c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8081e60:	f104 0401 	add.w	r4, r4, #1
 8081e64:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8081e68:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8081e6c:	f080 809a 	bcs.w	8081fa4 <__adddf3+0x240>
 8081e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8081e74:	bf08      	it	eq
 8081e76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8081e7a:	f150 0000 	adcs.w	r0, r0, #0
 8081e7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8081e82:	ea41 0105 	orr.w	r1, r1, r5
 8081e86:	bd30      	pop	{r4, r5, pc}
 8081e88:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8081e8c:	4140      	adcs	r0, r0
 8081e8e:	eb41 0101 	adc.w	r1, r1, r1
 8081e92:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081e96:	f1a4 0401 	sub.w	r4, r4, #1
 8081e9a:	d1e9      	bne.n	8081e70 <__adddf3+0x10c>
 8081e9c:	f091 0f00 	teq	r1, #0
 8081ea0:	bf04      	itt	eq
 8081ea2:	4601      	moveq	r1, r0
 8081ea4:	2000      	moveq	r0, #0
 8081ea6:	fab1 f381 	clz	r3, r1
 8081eaa:	bf08      	it	eq
 8081eac:	3320      	addeq	r3, #32
 8081eae:	f1a3 030b 	sub.w	r3, r3, #11
 8081eb2:	f1b3 0220 	subs.w	r2, r3, #32
 8081eb6:	da0c      	bge.n	8081ed2 <__adddf3+0x16e>
 8081eb8:	320c      	adds	r2, #12
 8081eba:	dd08      	ble.n	8081ece <__adddf3+0x16a>
 8081ebc:	f102 0c14 	add.w	ip, r2, #20
 8081ec0:	f1c2 020c 	rsb	r2, r2, #12
 8081ec4:	fa01 f00c 	lsl.w	r0, r1, ip
 8081ec8:	fa21 f102 	lsr.w	r1, r1, r2
 8081ecc:	e00c      	b.n	8081ee8 <__adddf3+0x184>
 8081ece:	f102 0214 	add.w	r2, r2, #20
 8081ed2:	bfd8      	it	le
 8081ed4:	f1c2 0c20 	rsble	ip, r2, #32
 8081ed8:	fa01 f102 	lsl.w	r1, r1, r2
 8081edc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8081ee0:	bfdc      	itt	le
 8081ee2:	ea41 010c 	orrle.w	r1, r1, ip
 8081ee6:	4090      	lslle	r0, r2
 8081ee8:	1ae4      	subs	r4, r4, r3
 8081eea:	bfa2      	ittt	ge
 8081eec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8081ef0:	4329      	orrge	r1, r5
 8081ef2:	bd30      	popge	{r4, r5, pc}
 8081ef4:	ea6f 0404 	mvn.w	r4, r4
 8081ef8:	3c1f      	subs	r4, #31
 8081efa:	da1c      	bge.n	8081f36 <__adddf3+0x1d2>
 8081efc:	340c      	adds	r4, #12
 8081efe:	dc0e      	bgt.n	8081f1e <__adddf3+0x1ba>
 8081f00:	f104 0414 	add.w	r4, r4, #20
 8081f04:	f1c4 0220 	rsb	r2, r4, #32
 8081f08:	fa20 f004 	lsr.w	r0, r0, r4
 8081f0c:	fa01 f302 	lsl.w	r3, r1, r2
 8081f10:	ea40 0003 	orr.w	r0, r0, r3
 8081f14:	fa21 f304 	lsr.w	r3, r1, r4
 8081f18:	ea45 0103 	orr.w	r1, r5, r3
 8081f1c:	bd30      	pop	{r4, r5, pc}
 8081f1e:	f1c4 040c 	rsb	r4, r4, #12
 8081f22:	f1c4 0220 	rsb	r2, r4, #32
 8081f26:	fa20 f002 	lsr.w	r0, r0, r2
 8081f2a:	fa01 f304 	lsl.w	r3, r1, r4
 8081f2e:	ea40 0003 	orr.w	r0, r0, r3
 8081f32:	4629      	mov	r1, r5
 8081f34:	bd30      	pop	{r4, r5, pc}
 8081f36:	fa21 f004 	lsr.w	r0, r1, r4
 8081f3a:	4629      	mov	r1, r5
 8081f3c:	bd30      	pop	{r4, r5, pc}
 8081f3e:	f094 0f00 	teq	r4, #0
 8081f42:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8081f46:	bf06      	itte	eq
 8081f48:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8081f4c:	3401      	addeq	r4, #1
 8081f4e:	3d01      	subne	r5, #1
 8081f50:	e74e      	b.n	8081df0 <__adddf3+0x8c>
 8081f52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081f56:	bf18      	it	ne
 8081f58:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081f5c:	d029      	beq.n	8081fb2 <__adddf3+0x24e>
 8081f5e:	ea94 0f05 	teq	r4, r5
 8081f62:	bf08      	it	eq
 8081f64:	ea90 0f02 	teqeq	r0, r2
 8081f68:	d005      	beq.n	8081f76 <__adddf3+0x212>
 8081f6a:	ea54 0c00 	orrs.w	ip, r4, r0
 8081f6e:	bf04      	itt	eq
 8081f70:	4619      	moveq	r1, r3
 8081f72:	4610      	moveq	r0, r2
 8081f74:	bd30      	pop	{r4, r5, pc}
 8081f76:	ea91 0f03 	teq	r1, r3
 8081f7a:	bf1e      	ittt	ne
 8081f7c:	2100      	movne	r1, #0
 8081f7e:	2000      	movne	r0, #0
 8081f80:	bd30      	popne	{r4, r5, pc}
 8081f82:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8081f86:	d105      	bne.n	8081f94 <__adddf3+0x230>
 8081f88:	0040      	lsls	r0, r0, #1
 8081f8a:	4149      	adcs	r1, r1
 8081f8c:	bf28      	it	cs
 8081f8e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8081f92:	bd30      	pop	{r4, r5, pc}
 8081f94:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8081f98:	bf3c      	itt	cc
 8081f9a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8081f9e:	bd30      	popcc	{r4, r5, pc}
 8081fa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081fa4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8081fa8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8081fac:	f04f 0000 	mov.w	r0, #0
 8081fb0:	bd30      	pop	{r4, r5, pc}
 8081fb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081fb6:	bf1a      	itte	ne
 8081fb8:	4619      	movne	r1, r3
 8081fba:	4610      	movne	r0, r2
 8081fbc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8081fc0:	bf1c      	itt	ne
 8081fc2:	460b      	movne	r3, r1
 8081fc4:	4602      	movne	r2, r0
 8081fc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8081fca:	bf06      	itte	eq
 8081fcc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8081fd0:	ea91 0f03 	teqeq	r1, r3
 8081fd4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8081fd8:	bd30      	pop	{r4, r5, pc}
 8081fda:	bf00      	nop

08081fdc <__aeabi_ui2d>:
 8081fdc:	f090 0f00 	teq	r0, #0
 8081fe0:	bf04      	itt	eq
 8081fe2:	2100      	moveq	r1, #0
 8081fe4:	4770      	bxeq	lr
 8081fe6:	b530      	push	{r4, r5, lr}
 8081fe8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081fec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081ff0:	f04f 0500 	mov.w	r5, #0
 8081ff4:	f04f 0100 	mov.w	r1, #0
 8081ff8:	e750      	b.n	8081e9c <__adddf3+0x138>
 8081ffa:	bf00      	nop

08081ffc <__aeabi_i2d>:
 8081ffc:	f090 0f00 	teq	r0, #0
 8082000:	bf04      	itt	eq
 8082002:	2100      	moveq	r1, #0
 8082004:	4770      	bxeq	lr
 8082006:	b530      	push	{r4, r5, lr}
 8082008:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808200c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082010:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8082014:	bf48      	it	mi
 8082016:	4240      	negmi	r0, r0
 8082018:	f04f 0100 	mov.w	r1, #0
 808201c:	e73e      	b.n	8081e9c <__adddf3+0x138>
 808201e:	bf00      	nop

08082020 <__aeabi_f2d>:
 8082020:	0042      	lsls	r2, r0, #1
 8082022:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8082026:	ea4f 0131 	mov.w	r1, r1, rrx
 808202a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808202e:	bf1f      	itttt	ne
 8082030:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8082034:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082038:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808203c:	4770      	bxne	lr
 808203e:	f092 0f00 	teq	r2, #0
 8082042:	bf14      	ite	ne
 8082044:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082048:	4770      	bxeq	lr
 808204a:	b530      	push	{r4, r5, lr}
 808204c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8082050:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082054:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8082058:	e720      	b.n	8081e9c <__adddf3+0x138>
 808205a:	bf00      	nop

0808205c <__aeabi_ul2d>:
 808205c:	ea50 0201 	orrs.w	r2, r0, r1
 8082060:	bf08      	it	eq
 8082062:	4770      	bxeq	lr
 8082064:	b530      	push	{r4, r5, lr}
 8082066:	f04f 0500 	mov.w	r5, #0
 808206a:	e00a      	b.n	8082082 <__aeabi_l2d+0x16>

0808206c <__aeabi_l2d>:
 808206c:	ea50 0201 	orrs.w	r2, r0, r1
 8082070:	bf08      	it	eq
 8082072:	4770      	bxeq	lr
 8082074:	b530      	push	{r4, r5, lr}
 8082076:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808207a:	d502      	bpl.n	8082082 <__aeabi_l2d+0x16>
 808207c:	4240      	negs	r0, r0
 808207e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082082:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082086:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808208a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808208e:	f43f aedc 	beq.w	8081e4a <__adddf3+0xe6>
 8082092:	f04f 0203 	mov.w	r2, #3
 8082096:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808209a:	bf18      	it	ne
 808209c:	3203      	addne	r2, #3
 808209e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80820a2:	bf18      	it	ne
 80820a4:	3203      	addne	r2, #3
 80820a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80820aa:	f1c2 0320 	rsb	r3, r2, #32
 80820ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80820b2:	fa20 f002 	lsr.w	r0, r0, r2
 80820b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80820ba:	ea40 000e 	orr.w	r0, r0, lr
 80820be:	fa21 f102 	lsr.w	r1, r1, r2
 80820c2:	4414      	add	r4, r2
 80820c4:	e6c1      	b.n	8081e4a <__adddf3+0xe6>
 80820c6:	bf00      	nop

080820c8 <__aeabi_dmul>:
 80820c8:	b570      	push	{r4, r5, r6, lr}
 80820ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80820ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80820d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80820d6:	bf1d      	ittte	ne
 80820d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80820dc:	ea94 0f0c 	teqne	r4, ip
 80820e0:	ea95 0f0c 	teqne	r5, ip
 80820e4:	f000 f8de 	bleq	80822a4 <__aeabi_dmul+0x1dc>
 80820e8:	442c      	add	r4, r5
 80820ea:	ea81 0603 	eor.w	r6, r1, r3
 80820ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80820f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80820f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80820fa:	bf18      	it	ne
 80820fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8082100:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8082108:	d038      	beq.n	808217c <__aeabi_dmul+0xb4>
 808210a:	fba0 ce02 	umull	ip, lr, r0, r2
 808210e:	f04f 0500 	mov.w	r5, #0
 8082112:	fbe1 e502 	umlal	lr, r5, r1, r2
 8082116:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808211a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808211e:	f04f 0600 	mov.w	r6, #0
 8082122:	fbe1 5603 	umlal	r5, r6, r1, r3
 8082126:	f09c 0f00 	teq	ip, #0
 808212a:	bf18      	it	ne
 808212c:	f04e 0e01 	orrne.w	lr, lr, #1
 8082130:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8082134:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082138:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808213c:	d204      	bcs.n	8082148 <__aeabi_dmul+0x80>
 808213e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8082142:	416d      	adcs	r5, r5
 8082144:	eb46 0606 	adc.w	r6, r6, r6
 8082148:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808214c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8082150:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8082154:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8082158:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808215c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8082160:	bf88      	it	hi
 8082162:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082166:	d81e      	bhi.n	80821a6 <__aeabi_dmul+0xde>
 8082168:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808216c:	bf08      	it	eq
 808216e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8082172:	f150 0000 	adcs.w	r0, r0, #0
 8082176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808217a:	bd70      	pop	{r4, r5, r6, pc}
 808217c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8082180:	ea46 0101 	orr.w	r1, r6, r1
 8082184:	ea40 0002 	orr.w	r0, r0, r2
 8082188:	ea81 0103 	eor.w	r1, r1, r3
 808218c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8082190:	bfc2      	ittt	gt
 8082192:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082196:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808219a:	bd70      	popgt	{r4, r5, r6, pc}
 808219c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80821a0:	f04f 0e00 	mov.w	lr, #0
 80821a4:	3c01      	subs	r4, #1
 80821a6:	f300 80ab 	bgt.w	8082300 <__aeabi_dmul+0x238>
 80821aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80821ae:	bfde      	ittt	le
 80821b0:	2000      	movle	r0, #0
 80821b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80821b6:	bd70      	pople	{r4, r5, r6, pc}
 80821b8:	f1c4 0400 	rsb	r4, r4, #0
 80821bc:	3c20      	subs	r4, #32
 80821be:	da35      	bge.n	808222c <__aeabi_dmul+0x164>
 80821c0:	340c      	adds	r4, #12
 80821c2:	dc1b      	bgt.n	80821fc <__aeabi_dmul+0x134>
 80821c4:	f104 0414 	add.w	r4, r4, #20
 80821c8:	f1c4 0520 	rsb	r5, r4, #32
 80821cc:	fa00 f305 	lsl.w	r3, r0, r5
 80821d0:	fa20 f004 	lsr.w	r0, r0, r4
 80821d4:	fa01 f205 	lsl.w	r2, r1, r5
 80821d8:	ea40 0002 	orr.w	r0, r0, r2
 80821dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80821e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80821e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80821e8:	fa21 f604 	lsr.w	r6, r1, r4
 80821ec:	eb42 0106 	adc.w	r1, r2, r6
 80821f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80821f4:	bf08      	it	eq
 80821f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80821fa:	bd70      	pop	{r4, r5, r6, pc}
 80821fc:	f1c4 040c 	rsb	r4, r4, #12
 8082200:	f1c4 0520 	rsb	r5, r4, #32
 8082204:	fa00 f304 	lsl.w	r3, r0, r4
 8082208:	fa20 f005 	lsr.w	r0, r0, r5
 808220c:	fa01 f204 	lsl.w	r2, r1, r4
 8082210:	ea40 0002 	orr.w	r0, r0, r2
 8082214:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082218:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808221c:	f141 0100 	adc.w	r1, r1, #0
 8082220:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082224:	bf08      	it	eq
 8082226:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808222a:	bd70      	pop	{r4, r5, r6, pc}
 808222c:	f1c4 0520 	rsb	r5, r4, #32
 8082230:	fa00 f205 	lsl.w	r2, r0, r5
 8082234:	ea4e 0e02 	orr.w	lr, lr, r2
 8082238:	fa20 f304 	lsr.w	r3, r0, r4
 808223c:	fa01 f205 	lsl.w	r2, r1, r5
 8082240:	ea43 0302 	orr.w	r3, r3, r2
 8082244:	fa21 f004 	lsr.w	r0, r1, r4
 8082248:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808224c:	fa21 f204 	lsr.w	r2, r1, r4
 8082250:	ea20 0002 	bic.w	r0, r0, r2
 8082254:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8082258:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808225c:	bf08      	it	eq
 808225e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8082262:	bd70      	pop	{r4, r5, r6, pc}
 8082264:	f094 0f00 	teq	r4, #0
 8082268:	d10f      	bne.n	808228a <__aeabi_dmul+0x1c2>
 808226a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808226e:	0040      	lsls	r0, r0, #1
 8082270:	eb41 0101 	adc.w	r1, r1, r1
 8082274:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082278:	bf08      	it	eq
 808227a:	3c01      	subeq	r4, #1
 808227c:	d0f7      	beq.n	808226e <__aeabi_dmul+0x1a6>
 808227e:	ea41 0106 	orr.w	r1, r1, r6
 8082282:	f095 0f00 	teq	r5, #0
 8082286:	bf18      	it	ne
 8082288:	4770      	bxne	lr
 808228a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808228e:	0052      	lsls	r2, r2, #1
 8082290:	eb43 0303 	adc.w	r3, r3, r3
 8082294:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8082298:	bf08      	it	eq
 808229a:	3d01      	subeq	r5, #1
 808229c:	d0f7      	beq.n	808228e <__aeabi_dmul+0x1c6>
 808229e:	ea43 0306 	orr.w	r3, r3, r6
 80822a2:	4770      	bx	lr
 80822a4:	ea94 0f0c 	teq	r4, ip
 80822a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80822ac:	bf18      	it	ne
 80822ae:	ea95 0f0c 	teqne	r5, ip
 80822b2:	d00c      	beq.n	80822ce <__aeabi_dmul+0x206>
 80822b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80822b8:	bf18      	it	ne
 80822ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80822be:	d1d1      	bne.n	8082264 <__aeabi_dmul+0x19c>
 80822c0:	ea81 0103 	eor.w	r1, r1, r3
 80822c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80822c8:	f04f 0000 	mov.w	r0, #0
 80822cc:	bd70      	pop	{r4, r5, r6, pc}
 80822ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80822d2:	bf06      	itte	eq
 80822d4:	4610      	moveq	r0, r2
 80822d6:	4619      	moveq	r1, r3
 80822d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80822dc:	d019      	beq.n	8082312 <__aeabi_dmul+0x24a>
 80822de:	ea94 0f0c 	teq	r4, ip
 80822e2:	d102      	bne.n	80822ea <__aeabi_dmul+0x222>
 80822e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80822e8:	d113      	bne.n	8082312 <__aeabi_dmul+0x24a>
 80822ea:	ea95 0f0c 	teq	r5, ip
 80822ee:	d105      	bne.n	80822fc <__aeabi_dmul+0x234>
 80822f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80822f4:	bf1c      	itt	ne
 80822f6:	4610      	movne	r0, r2
 80822f8:	4619      	movne	r1, r3
 80822fa:	d10a      	bne.n	8082312 <__aeabi_dmul+0x24a>
 80822fc:	ea81 0103 	eor.w	r1, r1, r3
 8082300:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082304:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082308:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808230c:	f04f 0000 	mov.w	r0, #0
 8082310:	bd70      	pop	{r4, r5, r6, pc}
 8082312:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082316:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808231a:	bd70      	pop	{r4, r5, r6, pc}

0808231c <__aeabi_ddiv>:
 808231c:	b570      	push	{r4, r5, r6, lr}
 808231e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082322:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8082326:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808232a:	bf1d      	ittte	ne
 808232c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8082330:	ea94 0f0c 	teqne	r4, ip
 8082334:	ea95 0f0c 	teqne	r5, ip
 8082338:	f000 f8a7 	bleq	808248a <__aeabi_ddiv+0x16e>
 808233c:	eba4 0405 	sub.w	r4, r4, r5
 8082340:	ea81 0e03 	eor.w	lr, r1, r3
 8082344:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8082348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808234c:	f000 8088 	beq.w	8082460 <__aeabi_ddiv+0x144>
 8082350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082354:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8082358:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808235c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8082360:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8082364:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8082368:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808236c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8082370:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8082374:	429d      	cmp	r5, r3
 8082376:	bf08      	it	eq
 8082378:	4296      	cmpeq	r6, r2
 808237a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808237e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8082382:	d202      	bcs.n	808238a <__aeabi_ddiv+0x6e>
 8082384:	085b      	lsrs	r3, r3, #1
 8082386:	ea4f 0232 	mov.w	r2, r2, rrx
 808238a:	1ab6      	subs	r6, r6, r2
 808238c:	eb65 0503 	sbc.w	r5, r5, r3
 8082390:	085b      	lsrs	r3, r3, #1
 8082392:	ea4f 0232 	mov.w	r2, r2, rrx
 8082396:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808239a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808239e:	ebb6 0e02 	subs.w	lr, r6, r2
 80823a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80823a6:	bf22      	ittt	cs
 80823a8:	1ab6      	subcs	r6, r6, r2
 80823aa:	4675      	movcs	r5, lr
 80823ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80823b0:	085b      	lsrs	r3, r3, #1
 80823b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80823b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80823ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80823be:	bf22      	ittt	cs
 80823c0:	1ab6      	subcs	r6, r6, r2
 80823c2:	4675      	movcs	r5, lr
 80823c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80823c8:	085b      	lsrs	r3, r3, #1
 80823ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80823ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80823d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80823d6:	bf22      	ittt	cs
 80823d8:	1ab6      	subcs	r6, r6, r2
 80823da:	4675      	movcs	r5, lr
 80823dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80823e0:	085b      	lsrs	r3, r3, #1
 80823e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80823e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80823ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80823ee:	bf22      	ittt	cs
 80823f0:	1ab6      	subcs	r6, r6, r2
 80823f2:	4675      	movcs	r5, lr
 80823f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80823f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80823fc:	d018      	beq.n	8082430 <__aeabi_ddiv+0x114>
 80823fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8082402:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8082406:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808240a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808240e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8082412:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8082416:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808241a:	d1c0      	bne.n	808239e <__aeabi_ddiv+0x82>
 808241c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082420:	d10b      	bne.n	808243a <__aeabi_ddiv+0x11e>
 8082422:	ea41 0100 	orr.w	r1, r1, r0
 8082426:	f04f 0000 	mov.w	r0, #0
 808242a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808242e:	e7b6      	b.n	808239e <__aeabi_ddiv+0x82>
 8082430:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082434:	bf04      	itt	eq
 8082436:	4301      	orreq	r1, r0
 8082438:	2000      	moveq	r0, #0
 808243a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808243e:	bf88      	it	hi
 8082440:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082444:	f63f aeaf 	bhi.w	80821a6 <__aeabi_dmul+0xde>
 8082448:	ebb5 0c03 	subs.w	ip, r5, r3
 808244c:	bf04      	itt	eq
 808244e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8082452:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082456:	f150 0000 	adcs.w	r0, r0, #0
 808245a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808245e:	bd70      	pop	{r4, r5, r6, pc}
 8082460:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8082464:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8082468:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808246c:	bfc2      	ittt	gt
 808246e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082472:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8082476:	bd70      	popgt	{r4, r5, r6, pc}
 8082478:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808247c:	f04f 0e00 	mov.w	lr, #0
 8082480:	3c01      	subs	r4, #1
 8082482:	e690      	b.n	80821a6 <__aeabi_dmul+0xde>
 8082484:	ea45 0e06 	orr.w	lr, r5, r6
 8082488:	e68d      	b.n	80821a6 <__aeabi_dmul+0xde>
 808248a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808248e:	ea94 0f0c 	teq	r4, ip
 8082492:	bf08      	it	eq
 8082494:	ea95 0f0c 	teqeq	r5, ip
 8082498:	f43f af3b 	beq.w	8082312 <__aeabi_dmul+0x24a>
 808249c:	ea94 0f0c 	teq	r4, ip
 80824a0:	d10a      	bne.n	80824b8 <__aeabi_ddiv+0x19c>
 80824a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80824a6:	f47f af34 	bne.w	8082312 <__aeabi_dmul+0x24a>
 80824aa:	ea95 0f0c 	teq	r5, ip
 80824ae:	f47f af25 	bne.w	80822fc <__aeabi_dmul+0x234>
 80824b2:	4610      	mov	r0, r2
 80824b4:	4619      	mov	r1, r3
 80824b6:	e72c      	b.n	8082312 <__aeabi_dmul+0x24a>
 80824b8:	ea95 0f0c 	teq	r5, ip
 80824bc:	d106      	bne.n	80824cc <__aeabi_ddiv+0x1b0>
 80824be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80824c2:	f43f aefd 	beq.w	80822c0 <__aeabi_dmul+0x1f8>
 80824c6:	4610      	mov	r0, r2
 80824c8:	4619      	mov	r1, r3
 80824ca:	e722      	b.n	8082312 <__aeabi_dmul+0x24a>
 80824cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80824d0:	bf18      	it	ne
 80824d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80824d6:	f47f aec5 	bne.w	8082264 <__aeabi_dmul+0x19c>
 80824da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80824de:	f47f af0d 	bne.w	80822fc <__aeabi_dmul+0x234>
 80824e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80824e6:	f47f aeeb 	bne.w	80822c0 <__aeabi_dmul+0x1f8>
 80824ea:	e712      	b.n	8082312 <__aeabi_dmul+0x24a>

080824ec <__gedf2>:
 80824ec:	f04f 3cff 	mov.w	ip, #4294967295
 80824f0:	e006      	b.n	8082500 <__cmpdf2+0x4>
 80824f2:	bf00      	nop

080824f4 <__ledf2>:
 80824f4:	f04f 0c01 	mov.w	ip, #1
 80824f8:	e002      	b.n	8082500 <__cmpdf2+0x4>
 80824fa:	bf00      	nop

080824fc <__cmpdf2>:
 80824fc:	f04f 0c01 	mov.w	ip, #1
 8082500:	f84d cd04 	str.w	ip, [sp, #-4]!
 8082504:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8082508:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808250c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8082510:	bf18      	it	ne
 8082512:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8082516:	d01b      	beq.n	8082550 <__cmpdf2+0x54>
 8082518:	b001      	add	sp, #4
 808251a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808251e:	bf0c      	ite	eq
 8082520:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8082524:	ea91 0f03 	teqne	r1, r3
 8082528:	bf02      	ittt	eq
 808252a:	ea90 0f02 	teqeq	r0, r2
 808252e:	2000      	moveq	r0, #0
 8082530:	4770      	bxeq	lr
 8082532:	f110 0f00 	cmn.w	r0, #0
 8082536:	ea91 0f03 	teq	r1, r3
 808253a:	bf58      	it	pl
 808253c:	4299      	cmppl	r1, r3
 808253e:	bf08      	it	eq
 8082540:	4290      	cmpeq	r0, r2
 8082542:	bf2c      	ite	cs
 8082544:	17d8      	asrcs	r0, r3, #31
 8082546:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808254a:	f040 0001 	orr.w	r0, r0, #1
 808254e:	4770      	bx	lr
 8082550:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8082554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082558:	d102      	bne.n	8082560 <__cmpdf2+0x64>
 808255a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808255e:	d107      	bne.n	8082570 <__cmpdf2+0x74>
 8082560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8082564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082568:	d1d6      	bne.n	8082518 <__cmpdf2+0x1c>
 808256a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808256e:	d0d3      	beq.n	8082518 <__cmpdf2+0x1c>
 8082570:	f85d 0b04 	ldr.w	r0, [sp], #4
 8082574:	4770      	bx	lr
 8082576:	bf00      	nop

08082578 <__aeabi_cdrcmple>:
 8082578:	4684      	mov	ip, r0
 808257a:	4610      	mov	r0, r2
 808257c:	4662      	mov	r2, ip
 808257e:	468c      	mov	ip, r1
 8082580:	4619      	mov	r1, r3
 8082582:	4663      	mov	r3, ip
 8082584:	e000      	b.n	8082588 <__aeabi_cdcmpeq>
 8082586:	bf00      	nop

08082588 <__aeabi_cdcmpeq>:
 8082588:	b501      	push	{r0, lr}
 808258a:	f7ff ffb7 	bl	80824fc <__cmpdf2>
 808258e:	2800      	cmp	r0, #0
 8082590:	bf48      	it	mi
 8082592:	f110 0f00 	cmnmi.w	r0, #0
 8082596:	bd01      	pop	{r0, pc}

08082598 <__aeabi_dcmpeq>:
 8082598:	f84d ed08 	str.w	lr, [sp, #-8]!
 808259c:	f7ff fff4 	bl	8082588 <__aeabi_cdcmpeq>
 80825a0:	bf0c      	ite	eq
 80825a2:	2001      	moveq	r0, #1
 80825a4:	2000      	movne	r0, #0
 80825a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80825aa:	bf00      	nop

080825ac <__aeabi_dcmplt>:
 80825ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80825b0:	f7ff ffea 	bl	8082588 <__aeabi_cdcmpeq>
 80825b4:	bf34      	ite	cc
 80825b6:	2001      	movcc	r0, #1
 80825b8:	2000      	movcs	r0, #0
 80825ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80825be:	bf00      	nop

080825c0 <__aeabi_dcmple>:
 80825c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80825c4:	f7ff ffe0 	bl	8082588 <__aeabi_cdcmpeq>
 80825c8:	bf94      	ite	ls
 80825ca:	2001      	movls	r0, #1
 80825cc:	2000      	movhi	r0, #0
 80825ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80825d2:	bf00      	nop

080825d4 <__aeabi_dcmpge>:
 80825d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80825d8:	f7ff ffce 	bl	8082578 <__aeabi_cdrcmple>
 80825dc:	bf94      	ite	ls
 80825de:	2001      	movls	r0, #1
 80825e0:	2000      	movhi	r0, #0
 80825e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80825e6:	bf00      	nop

080825e8 <__aeabi_dcmpgt>:
 80825e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80825ec:	f7ff ffc4 	bl	8082578 <__aeabi_cdrcmple>
 80825f0:	bf34      	ite	cc
 80825f2:	2001      	movcc	r0, #1
 80825f4:	2000      	movcs	r0, #0
 80825f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80825fa:	bf00      	nop

080825fc <__aeabi_d2uiz>:
 80825fc:	004a      	lsls	r2, r1, #1
 80825fe:	d211      	bcs.n	8082624 <__aeabi_d2uiz+0x28>
 8082600:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8082604:	d211      	bcs.n	808262a <__aeabi_d2uiz+0x2e>
 8082606:	d50d      	bpl.n	8082624 <__aeabi_d2uiz+0x28>
 8082608:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808260c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8082610:	d40e      	bmi.n	8082630 <__aeabi_d2uiz+0x34>
 8082612:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082616:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808261a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808261e:	fa23 f002 	lsr.w	r0, r3, r2
 8082622:	4770      	bx	lr
 8082624:	f04f 0000 	mov.w	r0, #0
 8082628:	4770      	bx	lr
 808262a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808262e:	d102      	bne.n	8082636 <__aeabi_d2uiz+0x3a>
 8082630:	f04f 30ff 	mov.w	r0, #4294967295
 8082634:	4770      	bx	lr
 8082636:	f04f 0000 	mov.w	r0, #0
 808263a:	4770      	bx	lr

0808263c <__aeabi_frsub>:
 808263c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8082640:	e002      	b.n	8082648 <__addsf3>
 8082642:	bf00      	nop

08082644 <__aeabi_fsub>:
 8082644:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08082648 <__addsf3>:
 8082648:	0042      	lsls	r2, r0, #1
 808264a:	bf1f      	itttt	ne
 808264c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8082650:	ea92 0f03 	teqne	r2, r3
 8082654:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8082658:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808265c:	d06a      	beq.n	8082734 <__addsf3+0xec>
 808265e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8082662:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8082666:	bfc1      	itttt	gt
 8082668:	18d2      	addgt	r2, r2, r3
 808266a:	4041      	eorgt	r1, r0
 808266c:	4048      	eorgt	r0, r1
 808266e:	4041      	eorgt	r1, r0
 8082670:	bfb8      	it	lt
 8082672:	425b      	neglt	r3, r3
 8082674:	2b19      	cmp	r3, #25
 8082676:	bf88      	it	hi
 8082678:	4770      	bxhi	lr
 808267a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808267e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082682:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8082686:	bf18      	it	ne
 8082688:	4240      	negne	r0, r0
 808268a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808268e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8082692:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8082696:	bf18      	it	ne
 8082698:	4249      	negne	r1, r1
 808269a:	ea92 0f03 	teq	r2, r3
 808269e:	d03f      	beq.n	8082720 <__addsf3+0xd8>
 80826a0:	f1a2 0201 	sub.w	r2, r2, #1
 80826a4:	fa41 fc03 	asr.w	ip, r1, r3
 80826a8:	eb10 000c 	adds.w	r0, r0, ip
 80826ac:	f1c3 0320 	rsb	r3, r3, #32
 80826b0:	fa01 f103 	lsl.w	r1, r1, r3
 80826b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80826b8:	d502      	bpl.n	80826c0 <__addsf3+0x78>
 80826ba:	4249      	negs	r1, r1
 80826bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80826c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80826c4:	d313      	bcc.n	80826ee <__addsf3+0xa6>
 80826c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80826ca:	d306      	bcc.n	80826da <__addsf3+0x92>
 80826cc:	0840      	lsrs	r0, r0, #1
 80826ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80826d2:	f102 0201 	add.w	r2, r2, #1
 80826d6:	2afe      	cmp	r2, #254	; 0xfe
 80826d8:	d251      	bcs.n	808277e <__addsf3+0x136>
 80826da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80826de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80826e2:	bf08      	it	eq
 80826e4:	f020 0001 	biceq.w	r0, r0, #1
 80826e8:	ea40 0003 	orr.w	r0, r0, r3
 80826ec:	4770      	bx	lr
 80826ee:	0049      	lsls	r1, r1, #1
 80826f0:	eb40 0000 	adc.w	r0, r0, r0
 80826f4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80826f8:	f1a2 0201 	sub.w	r2, r2, #1
 80826fc:	d1ed      	bne.n	80826da <__addsf3+0x92>
 80826fe:	fab0 fc80 	clz	ip, r0
 8082702:	f1ac 0c08 	sub.w	ip, ip, #8
 8082706:	ebb2 020c 	subs.w	r2, r2, ip
 808270a:	fa00 f00c 	lsl.w	r0, r0, ip
 808270e:	bfaa      	itet	ge
 8082710:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8082714:	4252      	neglt	r2, r2
 8082716:	4318      	orrge	r0, r3
 8082718:	bfbc      	itt	lt
 808271a:	40d0      	lsrlt	r0, r2
 808271c:	4318      	orrlt	r0, r3
 808271e:	4770      	bx	lr
 8082720:	f092 0f00 	teq	r2, #0
 8082724:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8082728:	bf06      	itte	eq
 808272a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808272e:	3201      	addeq	r2, #1
 8082730:	3b01      	subne	r3, #1
 8082732:	e7b5      	b.n	80826a0 <__addsf3+0x58>
 8082734:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082738:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808273c:	bf18      	it	ne
 808273e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082742:	d021      	beq.n	8082788 <__addsf3+0x140>
 8082744:	ea92 0f03 	teq	r2, r3
 8082748:	d004      	beq.n	8082754 <__addsf3+0x10c>
 808274a:	f092 0f00 	teq	r2, #0
 808274e:	bf08      	it	eq
 8082750:	4608      	moveq	r0, r1
 8082752:	4770      	bx	lr
 8082754:	ea90 0f01 	teq	r0, r1
 8082758:	bf1c      	itt	ne
 808275a:	2000      	movne	r0, #0
 808275c:	4770      	bxne	lr
 808275e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8082762:	d104      	bne.n	808276e <__addsf3+0x126>
 8082764:	0040      	lsls	r0, r0, #1
 8082766:	bf28      	it	cs
 8082768:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808276c:	4770      	bx	lr
 808276e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8082772:	bf3c      	itt	cc
 8082774:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8082778:	4770      	bxcc	lr
 808277a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808277e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8082782:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082786:	4770      	bx	lr
 8082788:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808278c:	bf16      	itet	ne
 808278e:	4608      	movne	r0, r1
 8082790:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8082794:	4601      	movne	r1, r0
 8082796:	0242      	lsls	r2, r0, #9
 8082798:	bf06      	itte	eq
 808279a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808279e:	ea90 0f01 	teqeq	r0, r1
 80827a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80827a6:	4770      	bx	lr

080827a8 <__aeabi_ui2f>:
 80827a8:	f04f 0300 	mov.w	r3, #0
 80827ac:	e004      	b.n	80827b8 <__aeabi_i2f+0x8>
 80827ae:	bf00      	nop

080827b0 <__aeabi_i2f>:
 80827b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80827b4:	bf48      	it	mi
 80827b6:	4240      	negmi	r0, r0
 80827b8:	ea5f 0c00 	movs.w	ip, r0
 80827bc:	bf08      	it	eq
 80827be:	4770      	bxeq	lr
 80827c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80827c4:	4601      	mov	r1, r0
 80827c6:	f04f 0000 	mov.w	r0, #0
 80827ca:	e01c      	b.n	8082806 <__aeabi_l2f+0x2a>

080827cc <__aeabi_ul2f>:
 80827cc:	ea50 0201 	orrs.w	r2, r0, r1
 80827d0:	bf08      	it	eq
 80827d2:	4770      	bxeq	lr
 80827d4:	f04f 0300 	mov.w	r3, #0
 80827d8:	e00a      	b.n	80827f0 <__aeabi_l2f+0x14>
 80827da:	bf00      	nop

080827dc <__aeabi_l2f>:
 80827dc:	ea50 0201 	orrs.w	r2, r0, r1
 80827e0:	bf08      	it	eq
 80827e2:	4770      	bxeq	lr
 80827e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80827e8:	d502      	bpl.n	80827f0 <__aeabi_l2f+0x14>
 80827ea:	4240      	negs	r0, r0
 80827ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80827f0:	ea5f 0c01 	movs.w	ip, r1
 80827f4:	bf02      	ittt	eq
 80827f6:	4684      	moveq	ip, r0
 80827f8:	4601      	moveq	r1, r0
 80827fa:	2000      	moveq	r0, #0
 80827fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8082800:	bf08      	it	eq
 8082802:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8082806:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808280a:	fabc f28c 	clz	r2, ip
 808280e:	3a08      	subs	r2, #8
 8082810:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8082814:	db10      	blt.n	8082838 <__aeabi_l2f+0x5c>
 8082816:	fa01 fc02 	lsl.w	ip, r1, r2
 808281a:	4463      	add	r3, ip
 808281c:	fa00 fc02 	lsl.w	ip, r0, r2
 8082820:	f1c2 0220 	rsb	r2, r2, #32
 8082824:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082828:	fa20 f202 	lsr.w	r2, r0, r2
 808282c:	eb43 0002 	adc.w	r0, r3, r2
 8082830:	bf08      	it	eq
 8082832:	f020 0001 	biceq.w	r0, r0, #1
 8082836:	4770      	bx	lr
 8082838:	f102 0220 	add.w	r2, r2, #32
 808283c:	fa01 fc02 	lsl.w	ip, r1, r2
 8082840:	f1c2 0220 	rsb	r2, r2, #32
 8082844:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8082848:	fa21 f202 	lsr.w	r2, r1, r2
 808284c:	eb43 0002 	adc.w	r0, r3, r2
 8082850:	bf08      	it	eq
 8082852:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082856:	4770      	bx	lr

08082858 <__aeabi_fmul>:
 8082858:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808285c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8082860:	bf1e      	ittt	ne
 8082862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8082866:	ea92 0f0c 	teqne	r2, ip
 808286a:	ea93 0f0c 	teqne	r3, ip
 808286e:	d06f      	beq.n	8082950 <__aeabi_fmul+0xf8>
 8082870:	441a      	add	r2, r3
 8082872:	ea80 0c01 	eor.w	ip, r0, r1
 8082876:	0240      	lsls	r0, r0, #9
 8082878:	bf18      	it	ne
 808287a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808287e:	d01e      	beq.n	80828be <__aeabi_fmul+0x66>
 8082880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8082884:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8082888:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808288c:	fba0 3101 	umull	r3, r1, r0, r1
 8082890:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8082894:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8082898:	bf3e      	ittt	cc
 808289a:	0049      	lslcc	r1, r1, #1
 808289c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80828a0:	005b      	lslcc	r3, r3, #1
 80828a2:	ea40 0001 	orr.w	r0, r0, r1
 80828a6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80828aa:	2afd      	cmp	r2, #253	; 0xfd
 80828ac:	d81d      	bhi.n	80828ea <__aeabi_fmul+0x92>
 80828ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80828b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80828b6:	bf08      	it	eq
 80828b8:	f020 0001 	biceq.w	r0, r0, #1
 80828bc:	4770      	bx	lr
 80828be:	f090 0f00 	teq	r0, #0
 80828c2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80828c6:	bf08      	it	eq
 80828c8:	0249      	lsleq	r1, r1, #9
 80828ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80828ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80828d2:	3a7f      	subs	r2, #127	; 0x7f
 80828d4:	bfc2      	ittt	gt
 80828d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80828da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80828de:	4770      	bxgt	lr
 80828e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80828e4:	f04f 0300 	mov.w	r3, #0
 80828e8:	3a01      	subs	r2, #1
 80828ea:	dc5d      	bgt.n	80829a8 <__aeabi_fmul+0x150>
 80828ec:	f112 0f19 	cmn.w	r2, #25
 80828f0:	bfdc      	itt	le
 80828f2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80828f6:	4770      	bxle	lr
 80828f8:	f1c2 0200 	rsb	r2, r2, #0
 80828fc:	0041      	lsls	r1, r0, #1
 80828fe:	fa21 f102 	lsr.w	r1, r1, r2
 8082902:	f1c2 0220 	rsb	r2, r2, #32
 8082906:	fa00 fc02 	lsl.w	ip, r0, r2
 808290a:	ea5f 0031 	movs.w	r0, r1, rrx
 808290e:	f140 0000 	adc.w	r0, r0, #0
 8082912:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8082916:	bf08      	it	eq
 8082918:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808291c:	4770      	bx	lr
 808291e:	f092 0f00 	teq	r2, #0
 8082922:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8082926:	bf02      	ittt	eq
 8082928:	0040      	lsleq	r0, r0, #1
 808292a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808292e:	3a01      	subeq	r2, #1
 8082930:	d0f9      	beq.n	8082926 <__aeabi_fmul+0xce>
 8082932:	ea40 000c 	orr.w	r0, r0, ip
 8082936:	f093 0f00 	teq	r3, #0
 808293a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808293e:	bf02      	ittt	eq
 8082940:	0049      	lsleq	r1, r1, #1
 8082942:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8082946:	3b01      	subeq	r3, #1
 8082948:	d0f9      	beq.n	808293e <__aeabi_fmul+0xe6>
 808294a:	ea41 010c 	orr.w	r1, r1, ip
 808294e:	e78f      	b.n	8082870 <__aeabi_fmul+0x18>
 8082950:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8082954:	ea92 0f0c 	teq	r2, ip
 8082958:	bf18      	it	ne
 808295a:	ea93 0f0c 	teqne	r3, ip
 808295e:	d00a      	beq.n	8082976 <__aeabi_fmul+0x11e>
 8082960:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8082964:	bf18      	it	ne
 8082966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808296a:	d1d8      	bne.n	808291e <__aeabi_fmul+0xc6>
 808296c:	ea80 0001 	eor.w	r0, r0, r1
 8082970:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8082974:	4770      	bx	lr
 8082976:	f090 0f00 	teq	r0, #0
 808297a:	bf17      	itett	ne
 808297c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8082980:	4608      	moveq	r0, r1
 8082982:	f091 0f00 	teqne	r1, #0
 8082986:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808298a:	d014      	beq.n	80829b6 <__aeabi_fmul+0x15e>
 808298c:	ea92 0f0c 	teq	r2, ip
 8082990:	d101      	bne.n	8082996 <__aeabi_fmul+0x13e>
 8082992:	0242      	lsls	r2, r0, #9
 8082994:	d10f      	bne.n	80829b6 <__aeabi_fmul+0x15e>
 8082996:	ea93 0f0c 	teq	r3, ip
 808299a:	d103      	bne.n	80829a4 <__aeabi_fmul+0x14c>
 808299c:	024b      	lsls	r3, r1, #9
 808299e:	bf18      	it	ne
 80829a0:	4608      	movne	r0, r1
 80829a2:	d108      	bne.n	80829b6 <__aeabi_fmul+0x15e>
 80829a4:	ea80 0001 	eor.w	r0, r0, r1
 80829a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80829ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80829b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80829b4:	4770      	bx	lr
 80829b6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80829ba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80829be:	4770      	bx	lr

080829c0 <__aeabi_fdiv>:
 80829c0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80829c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80829c8:	bf1e      	ittt	ne
 80829ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80829ce:	ea92 0f0c 	teqne	r2, ip
 80829d2:	ea93 0f0c 	teqne	r3, ip
 80829d6:	d069      	beq.n	8082aac <__aeabi_fdiv+0xec>
 80829d8:	eba2 0203 	sub.w	r2, r2, r3
 80829dc:	ea80 0c01 	eor.w	ip, r0, r1
 80829e0:	0249      	lsls	r1, r1, #9
 80829e2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80829e6:	d037      	beq.n	8082a58 <__aeabi_fdiv+0x98>
 80829e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80829ec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80829f0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80829f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80829f8:	428b      	cmp	r3, r1
 80829fa:	bf38      	it	cc
 80829fc:	005b      	lslcc	r3, r3, #1
 80829fe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8082a02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8082a06:	428b      	cmp	r3, r1
 8082a08:	bf24      	itt	cs
 8082a0a:	1a5b      	subcs	r3, r3, r1
 8082a0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8082a10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8082a14:	bf24      	itt	cs
 8082a16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8082a1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8082a1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8082a22:	bf24      	itt	cs
 8082a24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8082a28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8082a2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8082a30:	bf24      	itt	cs
 8082a32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8082a36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8082a3a:	011b      	lsls	r3, r3, #4
 8082a3c:	bf18      	it	ne
 8082a3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8082a42:	d1e0      	bne.n	8082a06 <__aeabi_fdiv+0x46>
 8082a44:	2afd      	cmp	r2, #253	; 0xfd
 8082a46:	f63f af50 	bhi.w	80828ea <__aeabi_fmul+0x92>
 8082a4a:	428b      	cmp	r3, r1
 8082a4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082a50:	bf08      	it	eq
 8082a52:	f020 0001 	biceq.w	r0, r0, #1
 8082a56:	4770      	bx	lr
 8082a58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8082a5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8082a60:	327f      	adds	r2, #127	; 0x7f
 8082a62:	bfc2      	ittt	gt
 8082a64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8082a68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8082a6c:	4770      	bxgt	lr
 8082a6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082a72:	f04f 0300 	mov.w	r3, #0
 8082a76:	3a01      	subs	r2, #1
 8082a78:	e737      	b.n	80828ea <__aeabi_fmul+0x92>
 8082a7a:	f092 0f00 	teq	r2, #0
 8082a7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8082a82:	bf02      	ittt	eq
 8082a84:	0040      	lsleq	r0, r0, #1
 8082a86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8082a8a:	3a01      	subeq	r2, #1
 8082a8c:	d0f9      	beq.n	8082a82 <__aeabi_fdiv+0xc2>
 8082a8e:	ea40 000c 	orr.w	r0, r0, ip
 8082a92:	f093 0f00 	teq	r3, #0
 8082a96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8082a9a:	bf02      	ittt	eq
 8082a9c:	0049      	lsleq	r1, r1, #1
 8082a9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8082aa2:	3b01      	subeq	r3, #1
 8082aa4:	d0f9      	beq.n	8082a9a <__aeabi_fdiv+0xda>
 8082aa6:	ea41 010c 	orr.w	r1, r1, ip
 8082aaa:	e795      	b.n	80829d8 <__aeabi_fdiv+0x18>
 8082aac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8082ab0:	ea92 0f0c 	teq	r2, ip
 8082ab4:	d108      	bne.n	8082ac8 <__aeabi_fdiv+0x108>
 8082ab6:	0242      	lsls	r2, r0, #9
 8082ab8:	f47f af7d 	bne.w	80829b6 <__aeabi_fmul+0x15e>
 8082abc:	ea93 0f0c 	teq	r3, ip
 8082ac0:	f47f af70 	bne.w	80829a4 <__aeabi_fmul+0x14c>
 8082ac4:	4608      	mov	r0, r1
 8082ac6:	e776      	b.n	80829b6 <__aeabi_fmul+0x15e>
 8082ac8:	ea93 0f0c 	teq	r3, ip
 8082acc:	d104      	bne.n	8082ad8 <__aeabi_fdiv+0x118>
 8082ace:	024b      	lsls	r3, r1, #9
 8082ad0:	f43f af4c 	beq.w	808296c <__aeabi_fmul+0x114>
 8082ad4:	4608      	mov	r0, r1
 8082ad6:	e76e      	b.n	80829b6 <__aeabi_fmul+0x15e>
 8082ad8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8082adc:	bf18      	it	ne
 8082ade:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8082ae2:	d1ca      	bne.n	8082a7a <__aeabi_fdiv+0xba>
 8082ae4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8082ae8:	f47f af5c 	bne.w	80829a4 <__aeabi_fmul+0x14c>
 8082aec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8082af0:	f47f af3c 	bne.w	808296c <__aeabi_fmul+0x114>
 8082af4:	e75f      	b.n	80829b6 <__aeabi_fmul+0x15e>
 8082af6:	bf00      	nop

08082af8 <__gesf2>:
 8082af8:	f04f 3cff 	mov.w	ip, #4294967295
 8082afc:	e006      	b.n	8082b0c <__cmpsf2+0x4>
 8082afe:	bf00      	nop

08082b00 <__lesf2>:
 8082b00:	f04f 0c01 	mov.w	ip, #1
 8082b04:	e002      	b.n	8082b0c <__cmpsf2+0x4>
 8082b06:	bf00      	nop

08082b08 <__cmpsf2>:
 8082b08:	f04f 0c01 	mov.w	ip, #1
 8082b0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8082b10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8082b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082b1c:	bf18      	it	ne
 8082b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082b22:	d011      	beq.n	8082b48 <__cmpsf2+0x40>
 8082b24:	b001      	add	sp, #4
 8082b26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8082b2a:	bf18      	it	ne
 8082b2c:	ea90 0f01 	teqne	r0, r1
 8082b30:	bf58      	it	pl
 8082b32:	ebb2 0003 	subspl.w	r0, r2, r3
 8082b36:	bf88      	it	hi
 8082b38:	17c8      	asrhi	r0, r1, #31
 8082b3a:	bf38      	it	cc
 8082b3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8082b40:	bf18      	it	ne
 8082b42:	f040 0001 	orrne.w	r0, r0, #1
 8082b46:	4770      	bx	lr
 8082b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082b4c:	d102      	bne.n	8082b54 <__cmpsf2+0x4c>
 8082b4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8082b52:	d105      	bne.n	8082b60 <__cmpsf2+0x58>
 8082b54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8082b58:	d1e4      	bne.n	8082b24 <__cmpsf2+0x1c>
 8082b5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8082b5e:	d0e1      	beq.n	8082b24 <__cmpsf2+0x1c>
 8082b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8082b64:	4770      	bx	lr
 8082b66:	bf00      	nop

08082b68 <__aeabi_cfrcmple>:
 8082b68:	4684      	mov	ip, r0
 8082b6a:	4608      	mov	r0, r1
 8082b6c:	4661      	mov	r1, ip
 8082b6e:	e7ff      	b.n	8082b70 <__aeabi_cfcmpeq>

08082b70 <__aeabi_cfcmpeq>:
 8082b70:	b50f      	push	{r0, r1, r2, r3, lr}
 8082b72:	f7ff ffc9 	bl	8082b08 <__cmpsf2>
 8082b76:	2800      	cmp	r0, #0
 8082b78:	bf48      	it	mi
 8082b7a:	f110 0f00 	cmnmi.w	r0, #0
 8082b7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08082b80 <__aeabi_fcmpeq>:
 8082b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082b84:	f7ff fff4 	bl	8082b70 <__aeabi_cfcmpeq>
 8082b88:	bf0c      	ite	eq
 8082b8a:	2001      	moveq	r0, #1
 8082b8c:	2000      	movne	r0, #0
 8082b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8082b92:	bf00      	nop

08082b94 <__aeabi_fcmplt>:
 8082b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082b98:	f7ff ffea 	bl	8082b70 <__aeabi_cfcmpeq>
 8082b9c:	bf34      	ite	cc
 8082b9e:	2001      	movcc	r0, #1
 8082ba0:	2000      	movcs	r0, #0
 8082ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8082ba6:	bf00      	nop

08082ba8 <__aeabi_fcmple>:
 8082ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082bac:	f7ff ffe0 	bl	8082b70 <__aeabi_cfcmpeq>
 8082bb0:	bf94      	ite	ls
 8082bb2:	2001      	movls	r0, #1
 8082bb4:	2000      	movhi	r0, #0
 8082bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8082bba:	bf00      	nop

08082bbc <__aeabi_fcmpge>:
 8082bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082bc0:	f7ff ffd2 	bl	8082b68 <__aeabi_cfrcmple>
 8082bc4:	bf94      	ite	ls
 8082bc6:	2001      	movls	r0, #1
 8082bc8:	2000      	movhi	r0, #0
 8082bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8082bce:	bf00      	nop

08082bd0 <__aeabi_fcmpgt>:
 8082bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082bd4:	f7ff ffc8 	bl	8082b68 <__aeabi_cfrcmple>
 8082bd8:	bf34      	ite	cc
 8082bda:	2001      	movcc	r0, #1
 8082bdc:	2000      	movcs	r0, #0
 8082bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8082be2:	bf00      	nop

08082be4 <__aeabi_uldivmod>:
 8082be4:	b953      	cbnz	r3, 8082bfc <__aeabi_uldivmod+0x18>
 8082be6:	b94a      	cbnz	r2, 8082bfc <__aeabi_uldivmod+0x18>
 8082be8:	2900      	cmp	r1, #0
 8082bea:	bf08      	it	eq
 8082bec:	2800      	cmpeq	r0, #0
 8082bee:	bf1c      	itt	ne
 8082bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8082bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8082bf8:	f000 b9a6 	b.w	8082f48 <__aeabi_idiv0>
 8082bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8082c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8082c04:	f000 f82a 	bl	8082c5c <__udivmoddi4>
 8082c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8082c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8082c10:	b004      	add	sp, #16
 8082c12:	4770      	bx	lr

08082c14 <__aeabi_d2ulz>:
 8082c14:	b5d0      	push	{r4, r6, r7, lr}
 8082c16:	2200      	movs	r2, #0
 8082c18:	4b0e      	ldr	r3, [pc, #56]	; (8082c54 <__aeabi_d2ulz+0x40>)
 8082c1a:	4606      	mov	r6, r0
 8082c1c:	460f      	mov	r7, r1
 8082c1e:	f7ff fa53 	bl	80820c8 <__aeabi_dmul>
 8082c22:	f7ff fceb 	bl	80825fc <__aeabi_d2uiz>
 8082c26:	4604      	mov	r4, r0
 8082c28:	f7ff f9d8 	bl	8081fdc <__aeabi_ui2d>
 8082c2c:	2200      	movs	r2, #0
 8082c2e:	4b0a      	ldr	r3, [pc, #40]	; (8082c58 <__aeabi_d2ulz+0x44>)
 8082c30:	f7ff fa4a 	bl	80820c8 <__aeabi_dmul>
 8082c34:	4602      	mov	r2, r0
 8082c36:	460b      	mov	r3, r1
 8082c38:	4630      	mov	r0, r6
 8082c3a:	4639      	mov	r1, r7
 8082c3c:	f7ff f890 	bl	8081d60 <__aeabi_dsub>
 8082c40:	f7ff fcdc 	bl	80825fc <__aeabi_d2uiz>
 8082c44:	4623      	mov	r3, r4
 8082c46:	2200      	movs	r2, #0
 8082c48:	ea42 0200 	orr.w	r2, r2, r0
 8082c4c:	4610      	mov	r0, r2
 8082c4e:	4619      	mov	r1, r3
 8082c50:	bdd0      	pop	{r4, r6, r7, pc}
 8082c52:	bf00      	nop
 8082c54:	3df00000 	.word	0x3df00000
 8082c58:	41f00000 	.word	0x41f00000

08082c5c <__udivmoddi4>:
 8082c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082c60:	468c      	mov	ip, r1
 8082c62:	460c      	mov	r4, r1
 8082c64:	4605      	mov	r5, r0
 8082c66:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8082c68:	2b00      	cmp	r3, #0
 8082c6a:	d14f      	bne.n	8082d0c <__udivmoddi4+0xb0>
 8082c6c:	428a      	cmp	r2, r1
 8082c6e:	4617      	mov	r7, r2
 8082c70:	d96b      	bls.n	8082d4a <__udivmoddi4+0xee>
 8082c72:	fab2 fe82 	clz	lr, r2
 8082c76:	f1be 0f00 	cmp.w	lr, #0
 8082c7a:	d00b      	beq.n	8082c94 <__udivmoddi4+0x38>
 8082c7c:	f1ce 0520 	rsb	r5, lr, #32
 8082c80:	fa20 f505 	lsr.w	r5, r0, r5
 8082c84:	fa01 f30e 	lsl.w	r3, r1, lr
 8082c88:	ea45 0c03 	orr.w	ip, r5, r3
 8082c8c:	fa02 f70e 	lsl.w	r7, r2, lr
 8082c90:	fa00 f50e 	lsl.w	r5, r0, lr
 8082c94:	0c39      	lsrs	r1, r7, #16
 8082c96:	fbbc f0f1 	udiv	r0, ip, r1
 8082c9a:	b2ba      	uxth	r2, r7
 8082c9c:	fb01 c310 	mls	r3, r1, r0, ip
 8082ca0:	fb00 f802 	mul.w	r8, r0, r2
 8082ca4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8082ca8:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8082cac:	45a0      	cmp	r8, r4
 8082cae:	d909      	bls.n	8082cc4 <__udivmoddi4+0x68>
 8082cb0:	19e4      	adds	r4, r4, r7
 8082cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8082cb6:	f080 8128 	bcs.w	8082f0a <__udivmoddi4+0x2ae>
 8082cba:	45a0      	cmp	r8, r4
 8082cbc:	f240 8125 	bls.w	8082f0a <__udivmoddi4+0x2ae>
 8082cc0:	3802      	subs	r0, #2
 8082cc2:	443c      	add	r4, r7
 8082cc4:	ebc8 0404 	rsb	r4, r8, r4
 8082cc8:	fbb4 f3f1 	udiv	r3, r4, r1
 8082ccc:	fb01 4c13 	mls	ip, r1, r3, r4
 8082cd0:	fb03 f202 	mul.w	r2, r3, r2
 8082cd4:	b2ac      	uxth	r4, r5
 8082cd6:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8082cda:	428a      	cmp	r2, r1
 8082cdc:	d909      	bls.n	8082cf2 <__udivmoddi4+0x96>
 8082cde:	19c9      	adds	r1, r1, r7
 8082ce0:	f103 34ff 	add.w	r4, r3, #4294967295
 8082ce4:	f080 810f 	bcs.w	8082f06 <__udivmoddi4+0x2aa>
 8082ce8:	428a      	cmp	r2, r1
 8082cea:	f240 810c 	bls.w	8082f06 <__udivmoddi4+0x2aa>
 8082cee:	3b02      	subs	r3, #2
 8082cf0:	4439      	add	r1, r7
 8082cf2:	1a8a      	subs	r2, r1, r2
 8082cf4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8082cf8:	2100      	movs	r1, #0
 8082cfa:	2e00      	cmp	r6, #0
 8082cfc:	d063      	beq.n	8082dc6 <__udivmoddi4+0x16a>
 8082cfe:	fa22 f20e 	lsr.w	r2, r2, lr
 8082d02:	2300      	movs	r3, #0
 8082d04:	e886 000c 	stmia.w	r6, {r2, r3}
 8082d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082d0c:	428b      	cmp	r3, r1
 8082d0e:	d907      	bls.n	8082d20 <__udivmoddi4+0xc4>
 8082d10:	2e00      	cmp	r6, #0
 8082d12:	d056      	beq.n	8082dc2 <__udivmoddi4+0x166>
 8082d14:	2100      	movs	r1, #0
 8082d16:	e886 0011 	stmia.w	r6, {r0, r4}
 8082d1a:	4608      	mov	r0, r1
 8082d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082d20:	fab3 f183 	clz	r1, r3
 8082d24:	2900      	cmp	r1, #0
 8082d26:	f040 8093 	bne.w	8082e50 <__udivmoddi4+0x1f4>
 8082d2a:	42a3      	cmp	r3, r4
 8082d2c:	d302      	bcc.n	8082d34 <__udivmoddi4+0xd8>
 8082d2e:	4282      	cmp	r2, r0
 8082d30:	f200 80fe 	bhi.w	8082f30 <__udivmoddi4+0x2d4>
 8082d34:	1a85      	subs	r5, r0, r2
 8082d36:	eb64 0303 	sbc.w	r3, r4, r3
 8082d3a:	469c      	mov	ip, r3
 8082d3c:	2001      	movs	r0, #1
 8082d3e:	2e00      	cmp	r6, #0
 8082d40:	d041      	beq.n	8082dc6 <__udivmoddi4+0x16a>
 8082d42:	e886 1020 	stmia.w	r6, {r5, ip}
 8082d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082d4a:	b912      	cbnz	r2, 8082d52 <__udivmoddi4+0xf6>
 8082d4c:	2701      	movs	r7, #1
 8082d4e:	fbb7 f7f2 	udiv	r7, r7, r2
 8082d52:	fab7 fe87 	clz	lr, r7
 8082d56:	f1be 0f00 	cmp.w	lr, #0
 8082d5a:	d136      	bne.n	8082dca <__udivmoddi4+0x16e>
 8082d5c:	1be4      	subs	r4, r4, r7
 8082d5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8082d62:	fa1f f987 	uxth.w	r9, r7
 8082d66:	2101      	movs	r1, #1
 8082d68:	fbb4 f3f8 	udiv	r3, r4, r8
 8082d6c:	fb08 4413 	mls	r4, r8, r3, r4
 8082d70:	fb09 f203 	mul.w	r2, r9, r3
 8082d74:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8082d78:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8082d7c:	42a2      	cmp	r2, r4
 8082d7e:	d907      	bls.n	8082d90 <__udivmoddi4+0x134>
 8082d80:	19e4      	adds	r4, r4, r7
 8082d82:	f103 30ff 	add.w	r0, r3, #4294967295
 8082d86:	d202      	bcs.n	8082d8e <__udivmoddi4+0x132>
 8082d88:	42a2      	cmp	r2, r4
 8082d8a:	f200 80d3 	bhi.w	8082f34 <__udivmoddi4+0x2d8>
 8082d8e:	4603      	mov	r3, r0
 8082d90:	1aa4      	subs	r4, r4, r2
 8082d92:	fbb4 f0f8 	udiv	r0, r4, r8
 8082d96:	fb08 4810 	mls	r8, r8, r0, r4
 8082d9a:	fb09 f900 	mul.w	r9, r9, r0
 8082d9e:	b2ac      	uxth	r4, r5
 8082da0:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8082da4:	4591      	cmp	r9, r2
 8082da6:	d907      	bls.n	8082db8 <__udivmoddi4+0x15c>
 8082da8:	19d2      	adds	r2, r2, r7
 8082daa:	f100 34ff 	add.w	r4, r0, #4294967295
 8082dae:	d202      	bcs.n	8082db6 <__udivmoddi4+0x15a>
 8082db0:	4591      	cmp	r9, r2
 8082db2:	f200 80ba 	bhi.w	8082f2a <__udivmoddi4+0x2ce>
 8082db6:	4620      	mov	r0, r4
 8082db8:	ebc9 0202 	rsb	r2, r9, r2
 8082dbc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8082dc0:	e79b      	b.n	8082cfa <__udivmoddi4+0x9e>
 8082dc2:	4631      	mov	r1, r6
 8082dc4:	4630      	mov	r0, r6
 8082dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082dca:	fa07 f70e 	lsl.w	r7, r7, lr
 8082dce:	f1ce 0c20 	rsb	ip, lr, #32
 8082dd2:	fa24 f30c 	lsr.w	r3, r4, ip
 8082dd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8082dda:	fbb3 faf8 	udiv	sl, r3, r8
 8082dde:	fa1f f987 	uxth.w	r9, r7
 8082de2:	fb08 351a 	mls	r5, r8, sl, r3
 8082de6:	fa20 fc0c 	lsr.w	ip, r0, ip
 8082dea:	fa04 f40e 	lsl.w	r4, r4, lr
 8082dee:	fb0a fb09 	mul.w	fp, sl, r9
 8082df2:	ea4c 0c04 	orr.w	ip, ip, r4
 8082df6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8082dfa:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8082dfe:	459b      	cmp	fp, r3
 8082e00:	fa00 f50e 	lsl.w	r5, r0, lr
 8082e04:	d90a      	bls.n	8082e1c <__udivmoddi4+0x1c0>
 8082e06:	19db      	adds	r3, r3, r7
 8082e08:	f10a 32ff 	add.w	r2, sl, #4294967295
 8082e0c:	f080 808b 	bcs.w	8082f26 <__udivmoddi4+0x2ca>
 8082e10:	459b      	cmp	fp, r3
 8082e12:	f240 8088 	bls.w	8082f26 <__udivmoddi4+0x2ca>
 8082e16:	f1aa 0a02 	sub.w	sl, sl, #2
 8082e1a:	443b      	add	r3, r7
 8082e1c:	ebcb 0303 	rsb	r3, fp, r3
 8082e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8082e24:	fb08 3310 	mls	r3, r8, r0, r3
 8082e28:	fb00 f409 	mul.w	r4, r0, r9
 8082e2c:	fa1f fc8c 	uxth.w	ip, ip
 8082e30:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8082e34:	429c      	cmp	r4, r3
 8082e36:	d907      	bls.n	8082e48 <__udivmoddi4+0x1ec>
 8082e38:	19db      	adds	r3, r3, r7
 8082e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8082e3e:	d26e      	bcs.n	8082f1e <__udivmoddi4+0x2c2>
 8082e40:	429c      	cmp	r4, r3
 8082e42:	d96c      	bls.n	8082f1e <__udivmoddi4+0x2c2>
 8082e44:	3802      	subs	r0, #2
 8082e46:	443b      	add	r3, r7
 8082e48:	1b1c      	subs	r4, r3, r4
 8082e4a:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8082e4e:	e78b      	b.n	8082d68 <__udivmoddi4+0x10c>
 8082e50:	f1c1 0e20 	rsb	lr, r1, #32
 8082e54:	408b      	lsls	r3, r1
 8082e56:	fa22 fc0e 	lsr.w	ip, r2, lr
 8082e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8082e5e:	fa24 f70e 	lsr.w	r7, r4, lr
 8082e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8082e66:	fbb7 faf9 	udiv	sl, r7, r9
 8082e6a:	fa1f f38c 	uxth.w	r3, ip
 8082e6e:	fb09 771a 	mls	r7, r9, sl, r7
 8082e72:	fa20 f80e 	lsr.w	r8, r0, lr
 8082e76:	408c      	lsls	r4, r1
 8082e78:	fb0a f503 	mul.w	r5, sl, r3
 8082e7c:	ea48 0404 	orr.w	r4, r8, r4
 8082e80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8082e84:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8082e88:	42bd      	cmp	r5, r7
 8082e8a:	fa02 f201 	lsl.w	r2, r2, r1
 8082e8e:	fa00 fb01 	lsl.w	fp, r0, r1
 8082e92:	d909      	bls.n	8082ea8 <__udivmoddi4+0x24c>
 8082e94:	eb17 070c 	adds.w	r7, r7, ip
 8082e98:	f10a 30ff 	add.w	r0, sl, #4294967295
 8082e9c:	d241      	bcs.n	8082f22 <__udivmoddi4+0x2c6>
 8082e9e:	42bd      	cmp	r5, r7
 8082ea0:	d93f      	bls.n	8082f22 <__udivmoddi4+0x2c6>
 8082ea2:	f1aa 0a02 	sub.w	sl, sl, #2
 8082ea6:	4467      	add	r7, ip
 8082ea8:	1b7f      	subs	r7, r7, r5
 8082eaa:	fbb7 f5f9 	udiv	r5, r7, r9
 8082eae:	fb09 7715 	mls	r7, r9, r5, r7
 8082eb2:	fb05 f303 	mul.w	r3, r5, r3
 8082eb6:	b2a4      	uxth	r4, r4
 8082eb8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8082ebc:	42bb      	cmp	r3, r7
 8082ebe:	d908      	bls.n	8082ed2 <__udivmoddi4+0x276>
 8082ec0:	eb17 070c 	adds.w	r7, r7, ip
 8082ec4:	f105 30ff 	add.w	r0, r5, #4294967295
 8082ec8:	d227      	bcs.n	8082f1a <__udivmoddi4+0x2be>
 8082eca:	42bb      	cmp	r3, r7
 8082ecc:	d925      	bls.n	8082f1a <__udivmoddi4+0x2be>
 8082ece:	3d02      	subs	r5, #2
 8082ed0:	4467      	add	r7, ip
 8082ed2:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8082ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8082eda:	1aff      	subs	r7, r7, r3
 8082edc:	454f      	cmp	r7, r9
 8082ede:	4645      	mov	r5, r8
 8082ee0:	464c      	mov	r4, r9
 8082ee2:	d314      	bcc.n	8082f0e <__udivmoddi4+0x2b2>
 8082ee4:	d029      	beq.n	8082f3a <__udivmoddi4+0x2de>
 8082ee6:	b366      	cbz	r6, 8082f42 <__udivmoddi4+0x2e6>
 8082ee8:	ebbb 0305 	subs.w	r3, fp, r5
 8082eec:	eb67 0704 	sbc.w	r7, r7, r4
 8082ef0:	fa07 fe0e 	lsl.w	lr, r7, lr
 8082ef4:	40cb      	lsrs	r3, r1
 8082ef6:	40cf      	lsrs	r7, r1
 8082ef8:	ea4e 0303 	orr.w	r3, lr, r3
 8082efc:	e886 0088 	stmia.w	r6, {r3, r7}
 8082f00:	2100      	movs	r1, #0
 8082f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082f06:	4623      	mov	r3, r4
 8082f08:	e6f3      	b.n	8082cf2 <__udivmoddi4+0x96>
 8082f0a:	4618      	mov	r0, r3
 8082f0c:	e6da      	b.n	8082cc4 <__udivmoddi4+0x68>
 8082f0e:	ebb8 0502 	subs.w	r5, r8, r2
 8082f12:	eb69 040c 	sbc.w	r4, r9, ip
 8082f16:	3801      	subs	r0, #1
 8082f18:	e7e5      	b.n	8082ee6 <__udivmoddi4+0x28a>
 8082f1a:	4605      	mov	r5, r0
 8082f1c:	e7d9      	b.n	8082ed2 <__udivmoddi4+0x276>
 8082f1e:	4610      	mov	r0, r2
 8082f20:	e792      	b.n	8082e48 <__udivmoddi4+0x1ec>
 8082f22:	4682      	mov	sl, r0
 8082f24:	e7c0      	b.n	8082ea8 <__udivmoddi4+0x24c>
 8082f26:	4692      	mov	sl, r2
 8082f28:	e778      	b.n	8082e1c <__udivmoddi4+0x1c0>
 8082f2a:	3802      	subs	r0, #2
 8082f2c:	443a      	add	r2, r7
 8082f2e:	e743      	b.n	8082db8 <__udivmoddi4+0x15c>
 8082f30:	4608      	mov	r0, r1
 8082f32:	e704      	b.n	8082d3e <__udivmoddi4+0xe2>
 8082f34:	3b02      	subs	r3, #2
 8082f36:	443c      	add	r4, r7
 8082f38:	e72a      	b.n	8082d90 <__udivmoddi4+0x134>
 8082f3a:	45c3      	cmp	fp, r8
 8082f3c:	d3e7      	bcc.n	8082f0e <__udivmoddi4+0x2b2>
 8082f3e:	463c      	mov	r4, r7
 8082f40:	e7d1      	b.n	8082ee6 <__udivmoddi4+0x28a>
 8082f42:	4631      	mov	r1, r6
 8082f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082f48 <__aeabi_idiv0>:
 8082f48:	4770      	bx	lr
 8082f4a:	bf00      	nop

08082f4c <__cxa_atexit>:
 8082f4c:	b510      	push	{r4, lr}
 8082f4e:	4c05      	ldr	r4, [pc, #20]	; (8082f64 <__cxa_atexit+0x18>)
 8082f50:	4613      	mov	r3, r2
 8082f52:	b12c      	cbz	r4, 8082f60 <__cxa_atexit+0x14>
 8082f54:	460a      	mov	r2, r1
 8082f56:	4601      	mov	r1, r0
 8082f58:	2002      	movs	r0, #2
 8082f5a:	f3af 8000 	nop.w
 8082f5e:	bd10      	pop	{r4, pc}
 8082f60:	4620      	mov	r0, r4
 8082f62:	bd10      	pop	{r4, pc}
 8082f64:	00000000 	.word	0x00000000

08082f68 <memcpy>:
 8082f68:	b510      	push	{r4, lr}
 8082f6a:	1e43      	subs	r3, r0, #1
 8082f6c:	440a      	add	r2, r1
 8082f6e:	4291      	cmp	r1, r2
 8082f70:	d004      	beq.n	8082f7c <memcpy+0x14>
 8082f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8082f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8082f7a:	e7f8      	b.n	8082f6e <memcpy+0x6>
 8082f7c:	bd10      	pop	{r4, pc}

08082f7e <memset>:
 8082f7e:	4603      	mov	r3, r0
 8082f80:	4402      	add	r2, r0
 8082f82:	4293      	cmp	r3, r2
 8082f84:	d002      	beq.n	8082f8c <memset+0xe>
 8082f86:	f803 1b01 	strb.w	r1, [r3], #1
 8082f8a:	e7fa      	b.n	8082f82 <memset+0x4>
 8082f8c:	4770      	bx	lr
	...

08082f90 <srand>:
 8082f90:	b538      	push	{r3, r4, r5, lr}
 8082f92:	4b12      	ldr	r3, [pc, #72]	; (8082fdc <srand+0x4c>)
 8082f94:	4605      	mov	r5, r0
 8082f96:	681c      	ldr	r4, [r3, #0]
 8082f98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8082f9a:	b9d3      	cbnz	r3, 8082fd2 <srand+0x42>
 8082f9c:	2018      	movs	r0, #24
 8082f9e:	f7fd fcb1 	bl	8080904 <malloc>
 8082fa2:	f243 330e 	movw	r3, #13070	; 0x330e
 8082fa6:	63a0      	str	r0, [r4, #56]	; 0x38
 8082fa8:	8003      	strh	r3, [r0, #0]
 8082faa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8082fae:	8043      	strh	r3, [r0, #2]
 8082fb0:	f241 2334 	movw	r3, #4660	; 0x1234
 8082fb4:	8083      	strh	r3, [r0, #4]
 8082fb6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8082fba:	80c3      	strh	r3, [r0, #6]
 8082fbc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8082fc0:	8103      	strh	r3, [r0, #8]
 8082fc2:	2305      	movs	r3, #5
 8082fc4:	8143      	strh	r3, [r0, #10]
 8082fc6:	230b      	movs	r3, #11
 8082fc8:	8183      	strh	r3, [r0, #12]
 8082fca:	2201      	movs	r2, #1
 8082fcc:	2300      	movs	r3, #0
 8082fce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8082fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8082fd4:	2200      	movs	r2, #0
 8082fd6:	611d      	str	r5, [r3, #16]
 8082fd8:	615a      	str	r2, [r3, #20]
 8082fda:	bd38      	pop	{r3, r4, r5, pc}
 8082fdc:	20000480 	.word	0x20000480

08082fe0 <strcat>:
 8082fe0:	4602      	mov	r2, r0
 8082fe2:	b510      	push	{r4, lr}
 8082fe4:	4613      	mov	r3, r2
 8082fe6:	781c      	ldrb	r4, [r3, #0]
 8082fe8:	3201      	adds	r2, #1
 8082fea:	2c00      	cmp	r4, #0
 8082fec:	d1fa      	bne.n	8082fe4 <strcat+0x4>
 8082fee:	3b01      	subs	r3, #1
 8082ff0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8082ff4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8082ff8:	2a00      	cmp	r2, #0
 8082ffa:	d1f9      	bne.n	8082ff0 <strcat+0x10>
 8082ffc:	bd10      	pop	{r4, pc}

08082ffe <strcpy>:
 8082ffe:	4603      	mov	r3, r0
 8083000:	f811 2b01 	ldrb.w	r2, [r1], #1
 8083004:	f803 2b01 	strb.w	r2, [r3], #1
 8083008:	2a00      	cmp	r2, #0
 808300a:	d1f9      	bne.n	8083000 <strcpy+0x2>
 808300c:	4770      	bx	lr
	...

08083010 <strdup>:
 8083010:	4b02      	ldr	r3, [pc, #8]	; (808301c <strdup+0xc>)
 8083012:	4601      	mov	r1, r0
 8083014:	6818      	ldr	r0, [r3, #0]
 8083016:	f000 b803 	b.w	8083020 <_strdup_r>
 808301a:	bf00      	nop
 808301c:	20000480 	.word	0x20000480

08083020 <_strdup_r>:
 8083020:	b570      	push	{r4, r5, r6, lr}
 8083022:	4606      	mov	r6, r0
 8083024:	4608      	mov	r0, r1
 8083026:	460c      	mov	r4, r1
 8083028:	f000 f80d 	bl	8083046 <strlen>
 808302c:	1c45      	adds	r5, r0, #1
 808302e:	4629      	mov	r1, r5
 8083030:	4630      	mov	r0, r6
 8083032:	f7fd fc87 	bl	8080944 <_malloc_r>
 8083036:	4606      	mov	r6, r0
 8083038:	b118      	cbz	r0, 8083042 <_strdup_r+0x22>
 808303a:	462a      	mov	r2, r5
 808303c:	4621      	mov	r1, r4
 808303e:	f7ff ff93 	bl	8082f68 <memcpy>
 8083042:	4630      	mov	r0, r6
 8083044:	bd70      	pop	{r4, r5, r6, pc}

08083046 <strlen>:
 8083046:	4603      	mov	r3, r0
 8083048:	f813 2b01 	ldrb.w	r2, [r3], #1
 808304c:	2a00      	cmp	r2, #0
 808304e:	d1fb      	bne.n	8083048 <strlen+0x2>
 8083050:	1a18      	subs	r0, r3, r0
 8083052:	3801      	subs	r0, #1
 8083054:	4770      	bx	lr

08083056 <link_code_end>:
	...

08083058 <dynalib_user>:
 8083058:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8083068:	0000 0000 227b 6142 7474 7265 2079 2231     ....{"Battery 1"
 8083078:	003a 202c 4222 7461 6574 7972 3220 3a22     :., "Battery 2":
 8083088:	2c00 2220 6942 676c 2065 7453 7461 7375     ., "Bilge Status
 8083098:	3a22 2c00 2220 6157 6574 2072 6553 736e     ":., "Water Sens
 80830a8:	726f 3a22 2c00 2220 6f76 746c 654d 6574     or":., "voltMete
 80830b8:	2272 003a 007d 6f42 7461 6144 6174 4200     r":.}.BoatData.B
 80830c8:	616f 4474 7461 5761 7461 7265 6e49 6f42     oatDataWaterInBo
 80830d8:	7461 4200 616f 4474 7461 4261 6c69 6567     at.BoatDataBilge
 80830e8:	6e4f 4200 616f 4474 7461 4261 7461 6574     On.BoatDataBatte
 80830f8:	7972 4c41 5245 2154 0000 0000               ryALERT!....

08083104 <_ZTVN5spark12NetworkClassE>:
	...
 808310c:	098d 0808 0997 0808 09a1 0808 09ab 0808     ................
 808311c:	09b5 0808 09c1 0808 09cd 0808 09d9 0808     ................
 808312c:	09e1 0808 09eb 0808 09f5 0808               ............

08083138 <_ZTV7TwoWire>:
	...
 8083140:	0a55 0808 0a9f 0808 0a77 0808 0a57 0808     U.......w...W...
 8083150:	0a7f 0808 0a87 0808 0a8f 0808 0a97 0808     ................

08083160 <_ZTV11USARTSerial>:
	...
 8083168:	0aff 0808 0b23 0808 0b2f 0808 15b5 0808     ....#.../.......
 8083178:	0b0b 0808 0b17 0808 0b11 0808 0b1d 0808     ................
 8083188:	0b01 0808 0b05 0808                         ........

08083190 <_ZTVN5spark13CellularClassE>:
	...
 8083198:	0c77 0808 0c6d 0808 0c63 0808 0bd5 0808     w...m...c.......
 80831a8:	0c57 0808 0c4b 0808 0c3f 0808 0c37 0808     W...K...?...7...
 80831b8:	0c2d 0808 0c23 0808 0bdf 0808               -...#.......

080831c4 <_ZTV9USBSerial>:
	...
 80831cc:	0cd7 0808 0d1b 0808 0cf5 0808 15b5 0808     ................
 80831dc:	0cef 0808 0cd9 0808 0ce1 0808 0d15 0808     ................
 80831ec:	0ce9 0808 0cd3 0808                         ........

080831f4 <_ZTV9IPAddress>:
	...
 80831fc:	0e4f 0808 0e41 0808 0e43 0808               O...A...C...

08083208 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8083210:	0edd 0808 0ee3 0808 0ef9 0808 0eef 0808     ................
 8083220:	0edf 0808 005a 2b25 3330 3a64 3025 7532     ....Z.%+03d:%02u
 8083230:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
 8083240:	5325 7a25 6100 6373 6974 656d 6600 6c00     %S%z.asctime.f.l
 8083250:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
 8083260:	0d00 000a 3025 3031 2075 5d00 0020 6425     ....%010u .] .%d
 8083270:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
 8083280:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
 8083290:	0020 6162 6475 5300 7265 6169 006c 5355      .baud.Serial.US
 80832a0:	5342 7265 6169 316c 7400 7079 0065 6170     BSerial1.type.pa
 80832b0:	6172 006d 6d63 0064 6469 6800 646e 7300     ram.cmd.id.hnd.s
 80832c0:	7274 006d 6966 746c 6c00 6c76 6100 6464     trm.filt.lvl.add
 80832d0:	6148 646e 656c 0072 6572 6f6d 6576 6148     Handler.removeHa
 80832e0:	646e 656c 0072 6e65 6d75 6148 646e 656c     ndler.enumHandle
 80832f0:	7372 4a00 4f53 534e 7274 6165 4c6d 676f     rs.JSONStreamLog
 8083300:	6148 646e 656c 0072 7061 0070 6f6e 656e     Handler.app.none
 8083310:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
 8083320:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
 8083330:	0000 0000                                   ....

08083334 <_ZTV8SPIClass>:
	...
 808333c:	18e9 0808 18eb 0808                         ........

08083344 <__sf_fake_stdin>:
	...

08083364 <__sf_fake_stdout>:
	...

08083384 <__sf_fake_stderr>:
	...
 80833a4:	0043                                        C.

080833a6 <link_const_variable_data_end>:
	...

080833a8 <link_constructors_location>:
 80833a8:	080804ad 	.word	0x080804ad
 80833ac:	080805a5 	.word	0x080805a5
 80833b0:	08080a41 	.word	0x08080a41
 80833b4:	08080c81 	.word	0x08080c81
 80833b8:	0808156d 	.word	0x0808156d
 80833bc:	08081591 	.word	0x08081591
 80833c0:	080815a5 	.word	0x080815a5
 80833c4:	080818d1 	.word	0x080818d1
 80833c8:	08081969 	.word	0x08081969
 80833cc:	08081999 	.word	0x08081999
 80833d0:	08081ac9 	.word	0x08081ac9
 80833d4:	08081b4d 	.word	0x08081b4d
 80833d8:	08081c11 	.word	0x08081c11
 80833dc:	08081cd5 	.word	0x08081cd5
